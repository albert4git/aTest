!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<c-d>	0vimL0scrap.vim	/^            imap <c-d> <esc>dd$/;"	m
<c-d>	0vimL0scrap.vim	/^            imap <c-d> <esc>ddi$/;"	m
<space>	0vimL0scrap.vim	/^            map <space> viw$/;"	m
<c-d>	0vimL0scrap.vim	/^            map <c-d> dd$/;"	m
<space>	0vimL0scrap.vim	/^            map <space> viw " Select word$/;"	m
-d	0vimL0scrap.vim	/^            nnoremap -d dd$/;"	m
-c	0vimL0scrap.vim	/^            nnoremap -c ddO$/;"	m
mapleader	0vimL0scrap.vim	/^            let mapleader = ","$/;"	v
maplocalleader	0vimL0scrap.vim	/^            let maplocalleader = "\\\\"$/;"	v
<leader>ev	0vimL0scrap.vim	/^            nnoremap <leader>ev :splitMYVIMRC<cr>$/;"	m
<leader>e	0vimL0scrap.vim	/^            nnoremap <leader>e :splitMYVIMRC<cr>$/;"	m
<leader>m	0vimL0scrap.vim	/^            nnoremap <leader>m viw<esc>a"<esc>bi"<esc>lel$/;"	m
jj	0vimL0scrap.vim	/^            inoremap jj <esc>$/;"	m
testgroup	0vimL0scrap.vim	/^                augroup testgroup$/;"	a
testgroup	0vimL0scrap.vim	/^                augroup testgroup$/;"	a
p	0vimL0scrap.vim	/^                onoremap p i($/;"	m
p	0vimL0scrap.vim	/^                onoremap p i($/;"	m
<leader>m	0vimL0scrap.vim	/^                nnoremap <leader>m viw<esc>a"<esc>bi"<esc>lel$/;"	m
b	0vimL0scrap.vim	/^                onoremap b \/return<cr>$/;"	m
gg/a<cr>	0vimL0scrap.vim	/^            normal! gg\/a<cr>$/;"	m
/^==\+$<cr>:hlsearch<cr>kvg_	0vimL0scrap.vim	/^            normal! \/^==\\+$<cr>:hlsearch<cr>kvg_$/;"	m
filetype_vim	0vimL0scrap.vim	/^            augroup filetype_vim$/;"	a
b:hello	0vimL0scrap.vim	/^            let b:hello = "world"$/;"	v
testgroup	0vimL0scrap.vim	/^            augroup testgroup$/;"	a
Meow	0vimL0scrap.vim	/^            function Meow()$/;"	f
GetMeow	0vimL0scrap.vim	/^            function GetMeow()$/;"	f
TextwidthIsTooWide	0vimL0scrap.vim	/^            function TextwidthIsTooWide()$/;"	f
DisplayName	0vimL0scrap.vim	/^            function DisplayName(name)$/;"	f
UnscopedDisplayName	0vimL0scrap.vim	/^            function UnscopedDisplayName(name)$/;"	f
Varg	0vimL0scrap.vim	/^            function Varg(...)$/;"	f
Varg2	0vimL0scrap.vim	/^            function Varg2(foo, ...)$/;"	f
Assign	0vimL0scrap.vim	/^            function Assign(foo)$/;"	f
AssignGood	0vimL0scrap.vim	/^            function AssignGood(foo)$/;"	f
ggdd	0vimL0scrap.vim	/^            normal ggdd$/;"	m
G	0vimL0scrap.vim	/^            normal! G$/;"	m
leader	0vimL0scrap.vim	/^            let leader = "<space>"$/;"	v
leader	0vimL0scrap.vim	/^            let leader = ","$/;"	v
g:Super	0vimL0scrap.vim	/^            let g:Super$/;"	v
g:airline_theme	1startNinit19.vim	/^                let g:airline_theme='light'$/;"	v
g:airline_section_c	1startNinit19.vim	/^                let g:airline_section_c = '%{strftime("%Y %b %d %X")}'$/;"	v
g:airline#extensions#tabline#enabled	1startNinit19.vim	/^                let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#buffer_min_count	1startNinit19.vim	/^                let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline#extensions#syntastic#enabled	1startNinit19.vim	/^                let g:airline#extensions#syntastic#enabled = 1$/;"	v
g:airline#extensions#branch#enabled	1startNinit19.vim	/^                let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline_symbols	1startNinit19.vim	/^                        let g:airline_symbols = {}$/;"	v
g:bling_time	1startNinit19.vim	/^                let g:bling_time = 42$/;"	v
g:bling_color_fg	1startNinit19.vim	/^                let g:bling_color_fg = 'green'$/;"	v
g:bling_color_cterm	1startNinit19.vim	/^                let g:bling_color_cterm = 'reverse'$/;"	v
<F7>	1startNinit19.vim	/^                nnoremap <F7> :Scratch<CR>$/;"	m
<F6>	1startNinit19.vim	/^                nnoremap <F6> :ScratchPreview<CR>$/;"	m
zp	1startNinit19.vim	/^                nmap zp <Plug>yankstack_substitute_older_paste$/;"	m
zn	1startNinit19.vim	/^                nmap zn <Plug>yankstack_substitute_newer_paste$/;"	m
g:unite_source_history_yank_save_clipboard	1startNinit19.vim	/^                let g:unite_source_history_yank_save_clipboard = 1$/;"	v
g:unite_source_mark_marks	1startNinit19.vim	/^                let g:unite_source_mark_marks = "abcdefghijklmnopqrstuvwxyz"$/;"	v
g:unite_candidate_icon	1startNinit19.vim	/^                let g:unite_candidate_icon = '∘'$/;"	v
g:unite_source_history_yank_enable	1startNinit19.vim	/^                let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	1startNinit19.vim	/^                let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	1startNinit19.vim	/^                let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	1startNinit19.vim	/^                let g:unite_force_overwrite_statusline = 1$/;"	v
g:unite_prompt	1startNinit19.vim	/^                let g:unite_prompt = '::: '$/;"	v
g:unite_marked_icon	1startNinit19.vim	/^                let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	1startNinit19.vim	/^                let g:unite_winheight = 15$/;"	v
g:unite_winwidth	1startNinit19.vim	/^                let g:unite_winwidth = 50$/;"	v
g:unite_update_time	1startNinit19.vim	/^                let g:unite_update_time = 200$/;"	v
g:unite_split_rule	1startNinit19.vim	/^                let g:unite_split_rule = 'botright'$/;"	v
g:unite_split_rule	1startNinit19.vim	/^                let g:unite_split_rule = "topleft"$/;"	v
g:unite_data_directory	1startNinit19.vim	/^                let g:unite_data_directory ='~\/.config\/nvim\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	1startNinit19.vim	/^                let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	1startNinit19.vim	/^                let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	1startNinit19.vim	/^                let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
<Leader>u	1startNinit19.vim	/^                nnoremap <Leader>u :Unite help file_mru file buffer file_rec bookmark <CR>$/;"	m
<Leader>\	1startNinit19.vim	/^                nnoremap <Leader>\\ :Unite -silent -vertical -winwidth=40  -direction=botright -toggle outline<CR>$/;"	m
<Leader>h	1startNinit19.vim	/^                nnoremap <Leader>h :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>r	1startNinit19.vim	/^                nnoremap <Leader>r :<C-u>Unite -buffer-name=register register<CR>$/;"	m
<Leader>c	1startNinit19.vim	/^                nnoremap <Leader>c :<C-u>Unite -buffer-name=change change<CR>$/;"	m
<Leader>j	1startNinit19.vim	/^                nnoremap <Leader>j :<C-u>Unite -buffer-name=jump jump<CR>$/;"	m
<Leader>'	1startNinit19.vim	/^                nnoremap <Leader>' :Unite bookmark <CR>$/;"	m
g:nv_search_paths	1startNinit19.vim	/^                let g:nv_search_paths = ['~\/git\/aTest\/dotFiles\/']$/;"	v
g:side_search_prg	1startNinit19.vim	/^        let g:side_search_prg = 'ag --word-regexp'$/;"	v
g:side_search_splitter	1startNinit19.vim	/^                let g:side_search_splitter = 'vnew'$/;"	v
g:side_search_split_pct	1startNinit19.vim	/^                let g:side_search_split_pct = 0.4$/;"	v
<Leader>ss	1startNinit19.vim	/^                nnoremap <Leader>ss :SideSearch <C-r><C-w><CR> | wincmd p$/;"	m
SS	1startNinit19.vim	/^                command! -complete=file -nargs=+ SS execute 'SideSearch <args>'$/;"	c
g:undoquit_mapping	1startNinit19.vim	/^                let g:undoquit_mapping = ';q' $/;"	v
<F9>	1startNinit19.vim	/^                nnoremap <F9> :TagbarToggle<CR>$/;"	m
g:indentLine_enabled	1startNinit19.vim	/^                let g:indentLine_enabled = 1$/;"	v
g:indentLine_noConcealCursor	1startNinit19.vim	/^                let g:indentLine_noConcealCursor='nc'$/;"	v
g:indentLine_color_term	1startNinit19.vim	/^                let g:indentLine_color_term = 9$/;"	v
g:ale_sign_column_always	1startNinit19.vim	/^                let g:ale_sign_column_always = 1$/;"	v
g:ale_sign_error	1startNinit19.vim	/^                let g:ale_sign_error = '>>'$/;"	v
g:ale_sign_warning	1startNinit19.vim	/^                let g:ale_sign_warning = '--'$/;"	v
g:ale_linters	1startNinit19.vim	/^                let g:ale_linters = {$/;"	v
NERDTreeShowBookmarks	1startNinit19.vim	/^                let NERDTreeShowBookmarks=1$/;"	v
NERDTreeIgnore	1startNinit19.vim	/^                let NERDTreeIgnore=['\\.py[cd]$', '\\~$', '\\.swo$', '\\.swp$', '^\\.git$', '^\\.hg$', '^\\.svn$', '\\.bzr$']$/;"	v
NERDTreeChDirMode	1startNinit19.vim	/^                let NERDTreeChDirMode=0$/;"	v
NERDTreeQuitOnOpen	1startNinit19.vim	/^                let NERDTreeQuitOnOpen=1$/;"	v
NERDTreeMouseMode	1startNinit19.vim	/^                let NERDTreeMouseMode=2$/;"	v
NERDTreeShowHidden	1startNinit19.vim	/^                let NERDTreeShowHidden=1$/;"	v
NERDTreeKeepTreeInNewTab	1startNinit19.vim	/^                let NERDTreeKeepTreeInNewTab=1$/;"	v
NERDTreeToggleInCurDir	1startNinit19.vim	/^                function! NERDTreeToggleInCurDir()$/;"	f
<S-F2>	1startNinit19.vim	/^                map <S-F2> :call NERDTreeToggleInCurDir()<CR>$/;"	m
g:NERDDefaultAlign	1startNinit19.vim	/^                let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDCommentEmptyLines	1startNinit19.vim	/^                let g:NERDCommentEmptyLines = 1$/;"	v
g:NERDTrimTrailingWhitespace	1startNinit19.vim	/^                let g:NERDTrimTrailingWhitespace = 1$/;"	v
<LocalLeader>w	1startNinit19.vim	/^        nnoremap <LocalLeader>w :<C-r>=expand("<cword>")<CR>$/;"	m
<LocaLeader>z	1startNinit19.vim	/^        nnoremap <LocaLeader>z :<C-r>=getline(".")<CR>$/;"	m
ScriptExecute	1startNinit19.vim	/^        function! ScriptExecute()$/;"	f
ScriptExecutePermission	1startNinit19.vim	/^        augroup ScriptExecutePermission$/;"	a
SourceVimrc	1startNinit19.vim	/^        augroup SourceVimrc$/;"	a
FixVimSpellcheck	1startNinit19.vim	/^        function! FixVimSpellcheck()$/;"	f
z=	1startNinit19.vim	/^        nnoremap z= :call FixVimSpellcheck()<cr>$/;"	m
zg	1startNinit19.vim	/^        nnoremap zg z=$/;"	m
gitroot	1startNinit19.vim	/^        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\\n\\r]', '', 'g')$/;"	v
jk	1startNinit19.vim	/^        inoremap jk <esc>$/;"	m
fu	1startNinit19.vim	/^        nnoremap fu :syntax sync fromstart<cr>:redraw!<cr>$/;"	m
zu	1startNinit19.vim	/^        nnoremap zu :<c-u>update<cr>$/;"	m
;e	1startNinit19.vim	/^        nnoremap ;e :ls<cr>:b<space>$/;"	m
;v	1startNinit19.vim	/^        nnoremap ;v <c-w>v<c-w>l$/;"	m
;f	1startNinit19.vim	/^        nnoremap ;f :set tw=70<cr>v<s-}>gq<end>$/;"	m
W	1startNinit19.vim	/^        nnoremap W gwip$/;"	m
<LocalLeader>a	1startNinit19.vim	/^        noremap <LocalLeader>a =ip$/;"	m
;;	1startNinit19.vim	/^        imap            ;;              <ESC>$/;"	m
,R	1startNinit19.vim	/^        map <expr>      ,R              ":e ".expand("%:r")."."$/;"	m
(	1startNinit19.vim	/^        nnoremap ( <c-x>:y x\\|@x<cr>$/;"	m
)	1startNinit19.vim	/^        nnoremap ) <c-a>:y x\\|@x<cr>$/;"	m
Q	1startNinit19.vim	/^        nnoremap Q @q$/;"	m
Q	1startNinit19.vim	/^        vnoremap Q :norm @q<cr>$/;"	m
q	1startNinit19.vim	/^        nmap q <nop>$/;"	m
q	1startNinit19.vim	/^        nnoremap q q$/;"	m
ss	1startNinit19.vim	/^        nnoremap ss :wa<cr>$/;"	m
qq	1startNinit19.vim	/^        nnoremap qq :wa<cr> :bd<cr>$/;"	m
qs	1startNinit19.vim	/^        nnoremap qs :wa<cr> :qa<cr>$/;"	m
qa	1startNinit19.vim	/^        nnoremap qa :qa!<cr>$/;"	m
ge	1startNinit19.vim	/^        nnoremap ge :w<cr>:e #<cr>$/;"	m
qw	1startNinit19.vim	/^        nnoremap qw <C-w>q<CR>$/;"	m
qo	1startNinit19.vim	/^        nnoremap qo <C-w>o<CR>$/;"	m
ZZ	1startNinit19.vim	/^        nnoremap ZZ  <Nop> $/;"	m
ZZ	1startNinit19.vim	/^        nnoremap ZZ mzzt3<c-u>`z$/;"	m
zs	1startNinit19.vim	/^        nnoremap zs mzzt3<c-u>`z$/;"	m
zx	1startNinit19.vim	/^        nnoremap zx mzzt35<c-u>`z$/;"	m
zh	1startNinit19.vim	/^        nnoremap zh mzzt10<c-u>`z$/;"	m
EE	1startNinit19.vim	/^        nnoremap EE :source $MYVIMRC<CR>$/;"	m
BB	1startNinit19.vim	/^        nnoremap BB ggVG$/;"	m
<BS>	1startNinit19.vim	/^        nnoremap <BS> X$/;"	m
j	1startNinit19.vim	/^        noremap j gj$/;"	m
k	1startNinit19.vim	/^        noremap k gk$/;"	m
gj	1startNinit19.vim	/^        noremap gj j$/;"	m
gk	1startNinit19.vim	/^        noremap gk k$/;"	m
<C-A>	1startNinit19.vim	/^        cnoremap <C-A> <Home>$/;"	m
<C-E>	1startNinit19.vim	/^        cnoremap <C-E> <End>$/;"	m
<C-d>	1startNinit19.vim	/^        cnoremap <C-d> <Del>$/;"	m
<c-o>	1startNinit19.vim	/^        nnoremap <c-o> <c-o>zz$/;"	m
<c-i>	1startNinit19.vim	/^        nnoremap <c-i> <c-i>zz$/;"	m
Y	1startNinit19.vim	/^        nnoremap Y y\$$/;"	m
H	1startNinit19.vim	/^        nnoremap H mzJ`z$/;"	m
S	1startNinit19.vim	/^        nnoremap S i<cr><esc>^mwgk:silent! s\/\\v +$\/\/<cr>:noh<cr>`w$/;"	m
gv	1startNinit19.vim	/^        nnoremap gv `[v`]$/;"	m
\\	1startNinit19.vim	/^        noremap \\\\ #*$/;"	m
<C-W>	1startNinit19.vim	/^        inoremap <C-W> <C-G>u<C-W>$/;"	m
<C-U>	1startNinit19.vim	/^        inoremap <C-U> <C-G>u<C-U>$/;"	m
dg	1startNinit19.vim	/^        vmap     dg  :dffget<CR>$/;"	m
dp	1startNinit19.vim	/^        vmap     dp  :diffput<CR>$/;"	m
do	1startNinit19.vim	/^        nnoremap do  :diffoff!<cr>$/;"	m
<C-_>	1startNinit19.vim	/^        inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
<leader>c	1startNinit19.vim	/^        nnoremap <silent> <leader>c \/\\v^[<\\|=>]{7}([^=].+)?$<CR>$/;"	m
w:persistent_cursorline	1startNinit19.vim	/^                let w:persistent_cursorline = 1$/;"	v
$MYVIMRC	GitaErr-ninitOkt18.vim	/^        let $MYVIMRC='~\/.config\/nvim\/init.vim'$/;"	v
s:thesaurus_pat	GitaErr-ninitOkt18.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	GitaErr-ninitOkt18.vim	/^        let maplocalleader=','$/;"	v
mapleader	GitaErr-ninitOkt18.vim	/^        let mapleader=' '$/;"	v
vimrc	GitaErr-ninitOkt18.vim	/^        augroup vimrc$/;"	a
<LocalLeader>w	GitaErr-ninitOkt18.vim	/^        nnoremap <LocalLeader>w :<C-r>=expand("<cword>")<CR>$/;"	m
<LocaLeader>z	GitaErr-ninitOkt18.vim	/^        nnoremap <LocaLeader>z :<C-r>=getline(".")<CR>$/;"	m
ScriptExecute	GitaErr-ninitOkt18.vim	/^        function! ScriptExecute()$/;"	f
ScriptExecutePermission	GitaErr-ninitOkt18.vim	/^        augroup ScriptExecutePermission$/;"	a
SourceVimrc	GitaErr-ninitOkt18.vim	/^        augroup SourceVimrc$/;"	a
g:pymode_python	GitaErr-ninitOkt18.vim	/^        let g:pymode_python = 'python3'$/;"	v
FixVimSpellcheck	GitaErr-ninitOkt18.vim	/^        function! FixVimSpellcheck()$/;"	f
z=	GitaErr-ninitOkt18.vim	/^        nnoremap z= :call FixVimSpellcheck()<cr>$/;"	m
zg	GitaErr-ninitOkt18.vim	/^        nnoremap zg z=$/;"	m
wordUnderCursor	GitaErr-ninitOkt18.vim	/^        let wordUnderCursor = expand("<cword>")$/;"	v
currentLine	GitaErr-ninitOkt18.vim	/^        let currentLine   = getline(".")$/;"	v
gitroot	GitaErr-ninitOkt18.vim	/^        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\\n\\r]', '', 'g')$/;"	v
g:bling_time	GitaErr-ninitOkt18.vim	/^        let g:bling_time = 42$/;"	v
g:bling_color_fg	GitaErr-ninitOkt18.vim	/^        let g:bling_color_fg = 'green'$/;"	v
g:bling_color_cterm	GitaErr-ninitOkt18.vim	/^        let g:bling_color_cterm = 'reverse'$/;"	v
<cr>	GitaErr-ninitOkt18.vim	/^        nnoremap <cr> o<esc>$/;"	m
<CR>	GitaErr-ninitOkt18.vim	/^        inoremap <silent><expr> <CR> (pumvisible() && bufname('%') !=# '[Command Line]' ? "\\<C-e>\\<CR>" : "\\<C-g>u\\<CR>")$/;"	m
}	GitaErr-ninitOkt18.vim	/^        noremap } }^$/;"	m
>	GitaErr-ninitOkt18.vim	/^        nnoremap > v>$/;"	m
<	GitaErr-ninitOkt18.vim	/^        nnoremap < v<$/;"	m
<	GitaErr-ninitOkt18.vim	/^        vnoremap < <gv$/;"	m
>	GitaErr-ninitOkt18.vim	/^        vnoremap > >gv$/;"	m
.	GitaErr-ninitOkt18.vim	/^        vnoremap . :normal .<CR>$/;"	m
w!!	GitaErr-ninitOkt18.vim	/^        cmap w!! w !sudo tee % >\/dev\/null$/;"	m
cd	GitaErr-ninitOkt18.vim	/^        map cd :cd %:p:h<cr>$/;"	m
g:myplugin_enablefeature	GitaErr-ninitOkt18.vim	/^                let g:myplugin_enablefeature = 1$/;"	v
g:myplugin_defaultdir	GitaErr-ninitOkt18.vim	/^                let g:myplugin_defaultdir = $HOME$/;"	v
g:myplugin_weirdmode	GitaErr-ninitOkt18.vim	/^                let g:myplugin_weirdmode = 'm'$/;"	v
autoformat_settings	GitaErr-ninitOkt18.vim	/^                augroup autoformat_settings$/;"	a
g:undoquit_mapping	GitaErr-ninitOkt18.vim	/^                let g:undoquit_mapping = ';q' $/;"	v
g:switch_mapping	GitaErr-ninitOkt18.vim	/^                let g:switch_mapping = "-"$/;"	v
g:switch_custom_definitions	GitaErr-ninitOkt18.vim	/^                let g:switch_custom_definitions =$/;"	v
b:switch_custom_definitions	GitaErr-ninitOkt18.vim	/^                        let b:switch_custom_definitions = [$/;"	v
ff	GitaErr-ninitOkt18.vim	/^                nnoremap ff :call CscopeFindInteractive(expand('<cword>'))<CR>$/;"	m
qs_colors	GitaErr-ninitOkt18.vim	/^                augroup qs_colors$/;"	a
g:bookmark_no_default_key_mappings	GitaErr-ninitOkt18.vim	/^                let g:bookmark_no_default_key_mappings = 1$/;"	v
BookmarkMapKeys	GitaErr-ninitOkt18.vim	/^                function! BookmarkMapKeys()$/;"	f
g:bookmark_auto_close	GitaErr-ninitOkt18.vim	/^                let g:bookmark_auto_close = 1$/;"	v
g:bookmark_highlight_lines	GitaErr-ninitOkt18.vim	/^                let g:bookmark_highlight_lines = 1          $/;"	v
g:bookmark_show_warning	GitaErr-ninitOkt18.vim	/^                let g:bookmark_show_warning = 0           $/;"	v
g:bookmark_show_toggle_warning	GitaErr-ninitOkt18.vim	/^                let g:bookmark_show_toggle_warning = 0      $/;"	v
g:bookmark_sign	GitaErr-ninitOkt18.vim	/^                let g:bookmark_sign = '♥'$/;"	v
g:bookmark_highlight_lines	GitaErr-ninitOkt18.vim	/^                let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_save_per_working_dir	GitaErr-ninitOkt18.vim	/^                let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_auto_save	GitaErr-ninitOkt18.vim	/^                let g:bookmark_auto_save = 1$/;"	v
g:bookmark_save_per_working_dir	GitaErr-ninitOkt18.vim	/^                let g:bookmark_save_per_working_dir = 1  $/;"	v
g:indentLine_enabled	GitaErr-ninitOkt18.vim	/^                let g:indentLine_enabled = 1$/;"	v
g:indentLine_noConcealCursor	GitaErr-ninitOkt18.vim	/^                let g:indentLine_noConcealCursor='nc'$/;"	v
g:indentLine_color_term	GitaErr-ninitOkt18.vim	/^                let g:indentLine_color_term = 9$/;"	v
g:EasyMotion_smartcase	GitaErr-ninitOkt18.vim	/^                let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_do_mapping	GitaErr-ninitOkt18.vim	/^                let g:EasyMotion_do_mapping = 0 "-Disable default mappings$/;"	v
<LocalLeader><LocalLeader>	GitaErr-ninitOkt18.vim	/^                nmap <LocalLeader><LocalLeader> <Plug>(easymotion-overwin-w)$/;"	m
g:accordion_mode	GitaErr-ninitOkt18.vim	/^                let g:accordion_mode="v"$/;"	v
g:trans_directions_list	GitaErr-ninitOkt18.vim	/^                let g:trans_directions_list = [$/;"	v
g:trans_save_history	GitaErr-ninitOkt18.vim	/^                let g:trans_save_history = 1$/;"	v
b:vimpipe_command	GitaErr-ninitOkt18.vim	/^                let b:vimpipe_command="lynx -dump -stdin"$/;"	v
b:vimpipe_command	GitaErr-ninitOkt18.vim	/^                let b:vimpipe_command='jslint <(cat)'$/;"	v
b:vimpipe_command	GitaErr-ninitOkt18.vim	/^                let b:vimpipe_command="python -m json.tool"$/;"	v
b:vimpipe_command	GitaErr-ninitOkt18.vim	/^                let b:vimpipe_command="multimarkdown"$/;"	v
g:coveragepy_uncovered_sign	GitaErr-ninitOkt18.vim	/^                let g:coveragepy_uncovered_sign = '-'$/;"	v
g:brightest#highlight	GitaErr-ninitOkt18.vim	/^                let g:brightest#highlight = { "group" : "Define" }$/;"	v
]c	GitaErr-ninitOkt18.vim	/^                nmap ]c <Plug>GitGutterNextHunk$/;"	m
[c	GitaErr-ninitOkt18.vim	/^                nmap [c <Plug>GitGutterPrevHunk$/;"	m
hp	GitaErr-ninitOkt18.vim	/^                nmap hp <Plug>GitGutterPreviewHunk$/;"	m
hs	GitaErr-ninitOkt18.vim	/^                nmap hs <Plug>GitGutterStageHunk$/;"	m
hu	GitaErr-ninitOkt18.vim	/^                nmap hu <Plug>GitGutterUndoHunk$/;"	m
g:extradite_width	GitaErr-ninitOkt18.vim	/^                let g:extradite_width = 60$/;"	v
g:extradite_showhash	GitaErr-ninitOkt18.vim	/^                let g:extradite_showhash = 1 "show abbre commit hashes.$/;"	v
g:highlightedyank_highlight_duration	GitaErr-ninitOkt18.vim	/^                let g:highlightedyank_highlight_duration = -1$/;"	v
ih	GitaErr-ninitOkt18.vim	/^                vmap ih <Plug>(textobj-gitgutter-i)$/;"	m
g:expand_region_text_objects	GitaErr-ninitOkt18.vim	/^                 let g:expand_region_text_objects = {$/;"	v
<m-1>	GitaErr-ninitOkt18.vim	/^        nmap <m-1> <esc>viq<left> $/;"	m
<m-q>	GitaErr-ninitOkt18.vim	/^                nmap <m-q> <esc>vaq<left> $/;"	m
<m-0>	GitaErr-ninitOkt18.vim	/^                        nmap <m-0> <esc>vab<left> $/;"	m
<m-3>	GitaErr-ninitOkt18.vim	/^                                nmap <m-3> <esc>viB $/;"	m
<m-i>	GitaErr-ninitOkt18.vim	/^                                        nmap <m-i> <esc>vio $/;"	m
<m-9>	GitaErr-ninitOkt18.vim	/^                                        nmap <m-9> <esc>vif $/;"	m
<m-8>	GitaErr-ninitOkt18.vim	/^                        nmap <m-8> <esc>vaf $/;"	m
<m-7>	GitaErr-ninitOkt18.vim	/^                nmap <m-7> <esc>vip $/;"	m
<m-6>	GitaErr-ninitOkt18.vim	/^        nmap <m-6> <esc>vih $/;"	m
<F1>	GitaErr-ninitOkt18.vim	/^        inoremap <F1> <ESC>$/;"	m
<F1>	GitaErr-ninitOkt18.vim	/^        nnoremap <F1> <ESC>$/;"	m
<F1>	GitaErr-ninitOkt18.vim	/^        vnoremap <F1> <ESC>$/;"	m
<F2>	GitaErr-ninitOkt18.vim	/^        nnoremap <buffer> <F2> <Esc>:help <C-r><C-w><CR>$/;"	m
<C-F2>	GitaErr-ninitOkt18.vim	/^        nnoremap <buffer> <C-F2> <Esc>:helpgrep <C-r><C-w><CR>$/;"	m
,h	GitaErr-ninitOkt18.vim	/^        map       ,h          :call ToggleHeader()<CR>$/;"	m
<C-F6>	GitaErr-ninitOkt18.vim	/^        map       <C-F6>      ,h$/;"	m
<C-F6>	GitaErr-ninitOkt18.vim	/^        imap      <C-F6>      <C-O><C-F6>$/;"	m
<C-F7>	GitaErr-ninitOkt18.vim	/^        nnoremap <C-F7> :Scratch<CR>$/;"	m
<F7>	GitaErr-ninitOkt18.vim	/^        nnoremap <F7> :ScratchPreview<CR>$/;"	m
LocationToggle	GitaErr-ninitOkt18.vim	/^        command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	GitaErr-ninitOkt18.vim	/^        function! LocationToggle()$/;"	f
<F8>	GitaErr-ninitOkt18.vim	/^        nnoremap <F8> :LocationToggle<cr>$/;"	m
<LocalLeader>n	GitaErr-ninitOkt18.vim	/^                nnoremap <LocalLeader>n :lnext<cr>zvzz$/;"	m
<LocalLeader>b	GitaErr-ninitOkt18.vim	/^                nnoremap <LocalLeader>b :lprev<cr>zvzz$/;"	m
ToggleQuickFix	GitaErr-ninitOkt18.vim	/^        function! ToggleQuickFix()$/;"	f
<F9>	GitaErr-ninitOkt18.vim	/^        nnoremap <F9> :call ToggleQuickFix()<CR>$/;"	m
<Leader>b	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>b :cprev<cr>zvzz$/;"	m
<Leader>n	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>n :cnext<cr>zvzz$/;"	m
<F12>	GitaErr-ninitOkt18.vim	/^                nnoremap <F12> :TagbarToggle<CR>$/;"	m
s	GitaErr-ninitOkt18.vim	/^                nmap s <Nop>$/;"	m
g:textobj_sandwich_no_default_key_mappings	GitaErr-ninitOkt18.vim	/^                let g:textobj_sandwich_no_default_key_mappings = 1$/;"	v
ia	GitaErr-ninitOkt18.vim	/^                omap ia <Plug>(textobj-sandwich-auto-i)$/;"	m
aa	GitaErr-ninitOkt18.vim	/^                omap aa <Plug>(textobj-sandwich-auto-a)$/;"	m
sb	GitaErr-ninitOkt18.vim	/^                vmap sb "zdi sympy.pprint(<c-r>z)<esc>$/;"	m
sn	GitaErr-ninitOkt18.vim	/^                vmap sn "zdi print(<c-r>z)<esc> $/;"	m
g:qf_mapping_ack_style	GitaErr-ninitOkt18.vim	/^                let g:qf_mapping_ack_style = 1$/;"	v
g:qf_window_bottom	GitaErr-ninitOkt18.vim	/^                let g:qf_window_bottom = 0$/;"	v
g:qf_auto_open_loclist	GitaErr-ninitOkt18.vim	/^                let g:qf_auto_open_loclist = 0$/;"	v
g:qf_max_height	GitaErr-ninitOkt18.vim	/^                let g:qf_max_height = 8$/;"	v
g:qf_nowrap	GitaErr-ninitOkt18.vim	/^                let g:qf_nowrap = 1$/;"	v
g:AutoPairs	GitaErr-ninitOkt18.vim	/^                let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}$/;"	v
g:AutoPairsShortcutToggle	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutBackInsert	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcuts	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsShortcuts = 1$/;"	v
g:AutoPairsMapBS	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsMapCR = 0 " insert a new indented line if cursor in pairs.$/;"	v
g:AutoPairsMapSpace	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsMapSpace = 0$/;"	v
g:AutoPairsCenterLine	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsFlyMode = 1$/;"	v
g:AutoPairsMapCR	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsMapCR=0$/;"	v
g:AutoPairsMapCh	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsMapCh=1$/;"	v
g:AutoPairsDelete	GitaErr-ninitOkt18.vim	/^                let g:AutoPairsDelete = '<M-5>'$/;"	v
<C-W>r	GitaErr-ninitOkt18.vim	/^                nmap <C-W>r  <Plug>(Visual-Split-Resize)$/;"	m
<C-W>s	GitaErr-ninitOkt18.vim	/^                nmap <C-W>s <Plug>(Visual-Split-Split)$/;"	m
zp	GitaErr-ninitOkt18.vim	/^                nmap zp <Plug>yankstack_substitute_older_paste$/;"	m
zn	GitaErr-ninitOkt18.vim	/^                nmap zn <Plug>yankstack_substitute_newer_paste$/;"	m
cmdline_map_start	GitaErr-ninitOkt18.vim	/^                let cmdline_map_start          = '<LocalLeader>s'$/;"	v
cmdline_map_send	GitaErr-ninitOkt18.vim	/^                let cmdline_map_send           = '<Space>'$/;"	v
cmdline_map_send_and_stay	GitaErr-ninitOkt18.vim	/^                let cmdline_map_send_and_stay  = '<LocalLeader><Space>'$/;"	v
cmdline_map_source_fun	GitaErr-ninitOkt18.vim	/^                let cmdline_map_source_fun     = '<LocalLeader>f'$/;"	v
cmdline_map_send_paragraph	GitaErr-ninitOkt18.vim	/^                let cmdline_map_send_paragraph = '<LocalLeader>p'$/;"	v
cmdline_map_send_block	GitaErr-ninitOkt18.vim	/^                let cmdline_map_send_block     = '<LocalLeader>b'$/;"	v
cmdline_map_quit	GitaErr-ninitOkt18.vim	/^                let cmdline_map_quit           = '<LocalLeader>q'$/;"	v
cmdline_vsplit	GitaErr-ninitOkt18.vim	/^                let cmdline_vsplit      = 1      " Split the window vertically$/;"	v
cmdline_esc_term	GitaErr-ninitOkt18.vim	/^                let cmdline_esc_term    = 1      " Remap <Esc> to :stopinsert in Neovim's terminal$/;"	v
cmdline_in_buffer	GitaErr-ninitOkt18.vim	/^                let cmdline_in_buffer   = 1      " Start the interpreter in a Neovim's terminal$/;"	v
cmdline_term_height	GitaErr-ninitOkt18.vim	/^                let cmdline_term_height = 15     " Initial height of interpreter window or pane$/;"	v
cmdline_term_width	GitaErr-ninitOkt18.vim	/^                let cmdline_term_width  = 80     " Initial width of interpreter window or pane$/;"	v
cmdline_tmp_dir	GitaErr-ninitOkt18.vim	/^                let cmdline_tmp_dir     = '\/tmp' " Temporary directory to save files$/;"	v
cmdline_outhl	GitaErr-ninitOkt18.vim	/^                let cmdline_outhl       = 1      " Syntax highlight the output$/;"	v
cmdline_auto_scroll	GitaErr-ninitOkt18.vim	/^                let cmdline_auto_scroll = 1      " Keep the cursor at the end of terminal (nvim)$/;"	v
cmdline_app	GitaErr-ninitOkt18.vim	/^                let cmdline_app         = {}$/;"	v
cmdline_color_input	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_input    = '#9e9e9e'$/;"	v
cmdline_color_normal	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_normal   = '#00afff'$/;"	v
cmdline_color_number	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_number   = '#00ffff'$/;"	v
cmdline_color_integer	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_integer  = '#00ffff'$/;"	v
cmdline_color_float	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_float    = '#00ffff'$/;"	v
cmdline_color_input	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_input    = 247$/;"	v
cmdline_color_normal	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_normal   =  39$/;"	v
cmdline_color_number	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_number   =  51$/;"	v
cmdline_color_integer	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_integer  =  51$/;"	v
cmdline_color_float	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_float    =  51$/;"	v
cmdline_color_complex	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_complex  =  51$/;"	v
cmdline_color_negnum	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_negnum   = 183$/;"	v
cmdline_color_negfloat	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_negfloat = 183$/;"	v
cmdline_color_date	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_date     =  43$/;"	v
cmdline_color_true	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_true     =  78$/;"	v
cmdline_color_false	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_false    = 203$/;"	v
cmdline_color_inf	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_inf      =  39$/;"	v
cmdline_color_constant	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_constant =  75$/;"	v
cmdline_color_string	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_string   =  79$/;"	v
cmdline_color_stderr	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_stderr   =  33$/;"	v
cmdline_color_error	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_error    =  15$/;"	v
cmdline_color_warn	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_warn     =   1$/;"	v
cmdline_color_index	GitaErr-ninitOkt18.vim	/^                    let cmdline_color_index    = 186$/;"	v
g:side_search_prg	GitaErr-ninitOkt18.vim	/^        let g:side_search_prg = 'ag --word-regexp'$/;"	v
g:side_search_splitter	GitaErr-ninitOkt18.vim	/^        let g:side_search_splitter = 'vnew'$/;"	v
g:side_search_split_pct	GitaErr-ninitOkt18.vim	/^        let g:side_search_split_pct = 0.4$/;"	v
<Leader>ss	GitaErr-ninitOkt18.vim	/^        nnoremap <Leader>ss :SideSearch <C-r><C-w><CR> | wincmd p$/;"	m
SS	GitaErr-ninitOkt18.vim	/^        command! -complete=file -nargs=+ SS execute 'SideSearch <args>'$/;"	c
g:nv_search_paths	GitaErr-ninitOkt18.vim	/^        let g:nv_search_paths = ['~\/git\/aTest\/dotFiles\/nVim', '~\/git\/aTest\/pyLabGitPdbPythonMode27' ]$/;"	v
g:table_mode_corner_corner	GitaErr-ninitOkt18.vim	/^                let g:table_mode_corner_corner='+'$/;"	v
g:table_mode_header_fillchar	GitaErr-ninitOkt18.vim	/^                let g:table_mode_header_fillchar='='$/;"	v
g:pydoc_cmd	GitaErr-ninitOkt18.vim	/^                let g:pydoc_cmd = 'python -m pydoc'$/;"	v
g:pydoc_open_cmd	GitaErr-ninitOkt18.vim	/^                let g:pydoc_open_cmd = 'vsplit'$/;"	v
g:pydoc_use_drop	GitaErr-ninitOkt18.vim	/^                let g:pydoc_use_drop=1$/;"	v
g:pydoc_window_lines	GitaErr-ninitOkt18.vim	/^                let g:pydoc_window_lines=15$/;"	v
<F3>	GitaErr-ninitOkt18.vim	/^                imap <F3> <Plug>(JavaComplete-Imports-RemoveUnused)$/;"	m
g:user_emmet_settings	GitaErr-ninitOkt18.vim	/^        let g:user_emmet_settings = {$/;"	v
g:user_emmet_expandabbr_key	GitaErr-ninitOkt18.vim	/^        let g:user_emmet_expandabbr_key = '<c-\\>'$/;"	v
g:use_emmet_complete_tag	GitaErr-ninitOkt18.vim	/^        let g:use_emmet_complete_tag = 1$/;"	v
filetype_settings	GitaErr-ninitOkt18.vim	/^        augroup filetype_settings$/;"	a
SynStack	GitaErr-ninitOkt18.vim	/^        function! <SID>SynStack()$/;"	f
ShowFunc	GitaErr-ninitOkt18.vim	/^        function! ShowFunc()$/;"	f
sf	GitaErr-ninitOkt18.vim	/^        nmap sf :call ShowFunc()<CR>$/;"	m
ShowFuncKeys	GitaErr-ninitOkt18.vim	/^        function! ShowFuncKeys(bang)$/;"	f
ShowFuncKeys	GitaErr-ninitOkt18.vim	/^        com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)$/;"	c
ShowMaps	GitaErr-ninitOkt18.vim	/^        function! s:ShowMaps()$/;"	f
ShowMaps	GitaErr-ninitOkt18.vim	/^        com! ShowMaps call s:ShowMaps()      " Enable :ShowMaps to call the function$/;"	c
sm	GitaErr-ninitOkt18.vim	/^        nnoremap sm :ShowMaps<CR>            " Map keys to call the function$/;"	m
g:SuperTabCompletionContexts	GitaErr-ninitOkt18.vim	/^        let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']$/;"	v
g:SuperTabContextTextOmniPrecedence	GitaErr-ninitOkt18.vim	/^        let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
g:SuperTabContextDiscoverDiscovery	GitaErr-ninitOkt18.vim	/^        let g:SuperTabContextDiscoverDiscovery =$/;"	v
g:SuperTabContextDefaultCompletionType	GitaErr-ninitOkt18.vim	/^        let g:SuperTabContextDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabDefaultCompletionType	GitaErr-ninitOkt18.vim	/^        let g:SuperTabDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabLongestHighlight	GitaErr-ninitOkt18.vim	/^        let g:SuperTabLongestHighlight = 1$/;"	v
g:SuperTabCrMapping	GitaErr-ninitOkt18.vim	/^        let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabClosePreviewOnPopupClose	GitaErr-ninitOkt18.vim	/^        let g:SuperTabClosePreviewOnPopupClose = 1$/;"	v
JumpToCSS	GitaErr-ninitOkt18.vim	/^        function! JumpToCSS()$/;"	f
<leader>e	GitaErr-ninitOkt18.vim	/^        nnoremap <leader>e :call JumpToCSS()<CR>zz$/;"	m
<c-z>	GitaErr-ninitOkt18.vim	/^        imap <expr> <c-z> TabComplete()$/;"	m
TabComplete	GitaErr-ninitOkt18.vim	/^        function! TabComplete()$/;"	f
IsEmmetExpandable	GitaErr-ninitOkt18.vim	/^        function! IsEmmetExpandable()$/;"	f
s:emmetElements	GitaErr-ninitOkt18.vim	/^        let s:emmetElements = ['a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noframes', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']$/;"	v
g:gitgutter_signs	GitaErr-ninitOkt18.vim	/^        let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	GitaErr-ninitOkt18.vim	/^        let g:gitgutter_max_signs = 2000$/;"	v
E	GitaErr-ninitOkt18.vim	/^        command! -bang E e<bang>$/;"	c
Q	GitaErr-ninitOkt18.vim	/^        command! -bang Q q<bang>$/;"	c
W	GitaErr-ninitOkt18.vim	/^        command! -bang W w<bang>$/;"	c
QA	GitaErr-ninitOkt18.vim	/^        command! -bang QA qa<bang>$/;"	c
Qa	GitaErr-ninitOkt18.vim	/^        command! -bang Qa qa<bang>$/;"	c
Wa	GitaErr-ninitOkt18.vim	/^        command! -bang Wa wa<bang>$/;"	c
WA	GitaErr-ninitOkt18.vim	/^        command! -bang WA wa<bang>$/;"	c
Wq	GitaErr-ninitOkt18.vim	/^        command! -bang Wq wq<bang>$/;"	c
WQ	GitaErr-ninitOkt18.vim	/^        command! -bang WQ wq<bang>$/;"	c
z1	GitaErr-ninitOkt18.vim	/^                nnoremap z1 :set foldlevel=1<cr>$/;"	m
zf	GitaErr-ninitOkt18.vim	/^                nnoremap zf :call FocusLine()<cr>$/;"	m
FocusLine	GitaErr-ninitOkt18.vim	/^                function! FocusLine()$/;"	f
JumpTo	GitaErr-ninitOkt18.vim	/^                function! JumpTo(jumpcommand)$/;"	f
JumpToInSplit	GitaErr-ninitOkt18.vim	/^                function! JumpToInSplit(jumpcommand)$/;"	f
JumpToTag	GitaErr-ninitOkt18.vim	/^                function! JumpToTag()$/;"	f
JumpToTagInSplit	GitaErr-ninitOkt18.vim	/^                function! JumpToTagInSplit()$/;"	f
<C-]>	GitaErr-ninitOkt18.vim	/^                nnoremap <C-]> :silent! call JumpToTag()<cr>$/;"	m
ErrorsToggle	GitaErr-ninitOkt18.vim	/^        command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	GitaErr-ninitOkt18.vim	/^        function! ErrorsToggle() $/;"	f
<Esc><Esc>	GitaErr-ninitOkt18.vim	/^        nnoremap <silent> <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>$/;"	m
n	GitaErr-ninitOkt18.vim	/^        nmap <silent> n nzz$/;"	m
N	GitaErr-ninitOkt18.vim	/^        nmap <silent> N Nzz$/;"	m
g*	GitaErr-ninitOkt18.vim	/^        nmap <silent> g* g*zz$/;"	m
g#	GitaErr-ninitOkt18.vim	/^        nmap <silent> g# g#zz$/;"	m
*	GitaErr-ninitOkt18.vim	/^        vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
#	GitaErr-ninitOkt18.vim	/^        vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
FindFiles	GitaErr-ninitOkt18.vim	/^        command! -nargs=1 FindFiles call FindFiles(<q-args>)$/;"	c
FindFiles	GitaErr-ninitOkt18.vim	/^        function! FindFiles(filename)$/;"	f
Wipeout	GitaErr-ninitOkt18.vim	/^        function! Wipeout()$/;"	f
DiffFoldLevel	GitaErr-ninitOkt18.vim	/^         function! DiffFoldLevel()$/;"	f
ft_diff	GitaErr-ninitOkt18.vim	/^        augroup ft_diff$/;"	a
DiffOrig	GitaErr-ninitOkt18.vim	/^        command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis \\ | wincmd p | diffthis$/;"	c
Diffoff	GitaErr-ninitOkt18.vim	/^        command! Diffoff        diffoff | setlocal nowrap$/;"	c
<leader>c	GitaErr-ninitOkt18.vim	/^        nnoremap <silent> <leader>c \/\\v^[<\\|=>]{7}([^=].+)?$<CR>$/;"	m
w:persistent_cursorline	GitaErr-ninitOkt18.vim	/^                let w:persistent_cursorline = 1$/;"	v
g:airline_theme	GitaErr-ninitOkt18.vim	/^        let g:airline_theme='light'$/;"	v
g:airline_section_c	GitaErr-ninitOkt18.vim	/^        let g:airline_section_c = '%{strftime("%Y %b %d %X")}'$/;"	v
g:airline#extensions#tabline#enabled	GitaErr-ninitOkt18.vim	/^        let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#buffer_min_count	GitaErr-ninitOkt18.vim	/^        let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline#extensions#syntastic#enabled	GitaErr-ninitOkt18.vim	/^        let g:airline#extensions#syntastic#enabled = 1$/;"	v
g:airline#extensions#branch#enabled	GitaErr-ninitOkt18.vim	/^        let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline_symbols	GitaErr-ninitOkt18.vim	/^                let g:airline_symbols = {}$/;"	v
late	GitaErr-ninitOkt18.vim	/^                augroup late-verbose$/;"	a
g:syntastic_always_populate_loc_list	GitaErr-ninitOkt18.vim	/^        let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_check_on_open	GitaErr-ninitOkt18.vim	/^        let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	GitaErr-ninitOkt18.vim	/^        let g:syntastic_check_on_wq = 0$/;"	v
g:systastic_python_checkers	GitaErr-ninitOkt18.vim	/^        let g:systastic_python_checkers = ['pylint', 'python']$/;"	v
g:syntastic_mode_map	GitaErr-ninitOkt18.vim	/^        let g:syntastic_mode_map = {'mode': 'active'}$/;"	v
g:syntastic_python_pylint_quiet_messages	GitaErr-ninitOkt18.vim	/^        let g:syntastic_python_pylint_quiet_messages = {}$/;"	v
g:syntastic_enable_signs	GitaErr-ninitOkt18.vim	/^        let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_enable_highlighting	GitaErr-ninitOkt18.vim	/^        let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_javascript_checkers	GitaErr-ninitOkt18.vim	/^        let g:syntastic_javascript_checkers=['jshint']$/;"	v
g:syntastic_php_checkers	GitaErr-ninitOkt18.vim	/^        let g:syntastic_php_checkers=['php']$/;"	v
g:syntastic_css_checkers	GitaErr-ninitOkt18.vim	/^        let g:syntastic_css_checkers=['csslint']$/;"	v
g:syntastic_python_checkers	GitaErr-ninitOkt18.vim	/^        let g:syntastic_python_checkers = ['flake8']$/;"	v
g:syntastic_error_symbol	GitaErr-ninitOkt18.vim	/^        let g:syntastic_error_symbol = '⚡'$/;"	v
g:syntastic_warning_symbol	GitaErr-ninitOkt18.vim	/^        let g:syntastic_warning_symbol = '⚠'$/;"	v
UsingPython3	GitaErr-ninitOkt18.vim	/^        function! s:UsingPython3()$/;"	f
s:using_python3	GitaErr-ninitOkt18.vim	/^        let s:using_python3 = s:UsingPython3()$/;"	v
s:python_until_eof	GitaErr-ninitOkt18.vim	/^        let s:python_until_eof = s:using_python3 ? "python3 << EOF" : "python << EOF"$/;"	v
s:python_command	GitaErr-ninitOkt18.vim	/^        let s:python_command = s:using_python3 ? "py3 " : "py "$/;"	v
python_files	GitaErr-ninitOkt18.vim	/^        augroup python_files $/;"	a
DetectPythonVariant	GitaErr-ninitOkt18.vim	/^                function! s:DetectPythonVariant()$/;"	f
g:jedi#use_splits_not_buffers	GitaErr-ninitOkt18.vim	/^                        let g:jedi#use_splits_not_buffers = "left"$/;"	v
g:jedi#popup_on_dot	GitaErr-ninitOkt18.vim	/^                        let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#goto_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#documentation_command = "M"$/;"	v
g:jedi#usages_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#rename_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#completions_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#completions_command = "<C-z>"$/;"	v
g:jedi#popup_on_dot	GitaErr-ninitOkt18.vim	/^                        let g:jedi#popup_on_dot = 1$/;"	v
g:jedi#completions_enabled	GitaErr-ninitOkt18.vim	/^                        let g:jedi#completions_enabled = 1$/;"	v
g:jedi#popup_select_first	GitaErr-ninitOkt18.vim	/^                        let g:jedi#popup_select_first = 1$/;"	v
g:jedi#show_call_signatures	GitaErr-ninitOkt18.vim	/^                        let g:jedi#show_call_signatures = "1"$/;"	v
g:jedi#goto_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#goto_command = "gt"$/;"	v
g:jedi#auto_close_doc	GitaErr-ninitOkt18.vim	/^                        let g:jedi#auto_close_doc = 0  " close preview window after completion$/;"	v
g:jedi#documentation_command	GitaErr-ninitOkt18.vim	/^                        let g:jedi#documentation_command = "gj"$/;"	v
g:pyref_mapping	GitaErr-ninitOkt18.vim	/^                        let g:pyref_mapping = 'gu'$/;"	v
g:pyref_python	GitaErr-ninitOkt18.vim	/^                        let g:pyref_python = 'file:\/\/\/usr\/share\/doc\/python2.7\/html\/index.html'$/;"	v
g:LanguageClient_serverCommands	GitaErr-ninitOkt18.vim	/^                let g:LanguageClient_serverCommands = {$/;"	v
jk	GitaErr-ninitOkt18.vim	/^        inoremap jk <esc>$/;"	m
fu	GitaErr-ninitOkt18.vim	/^        nnoremap fu :syntax sync fromstart<cr>:redraw!<cr>$/;"	m
zu	GitaErr-ninitOkt18.vim	/^        nnoremap zu :<c-u>update<cr>$/;"	m
;e	GitaErr-ninitOkt18.vim	/^        nnoremap ;e :ls<cr>:b<space>$/;"	m
;v	GitaErr-ninitOkt18.vim	/^        nnoremap ;v <c-w>v<c-w>l$/;"	m
;f	GitaErr-ninitOkt18.vim	/^        nnoremap ;f :set tw=70<cr>v<s-}>gq<end>$/;"	m
W	GitaErr-ninitOkt18.vim	/^        nnoremap W gwip$/;"	m
<LocalLeader>a	GitaErr-ninitOkt18.vim	/^        noremap <LocalLeader>a =ip$/;"	m
;;	GitaErr-ninitOkt18.vim	/^        imap            ;;              <ESC>$/;"	m
,R	GitaErr-ninitOkt18.vim	/^        map <expr>      ,R              ":e ".expand("%:r")."."$/;"	m
(	GitaErr-ninitOkt18.vim	/^        nnoremap ( <c-x>:y x\\|@x<cr>$/;"	m
)	GitaErr-ninitOkt18.vim	/^        nnoremap ) <c-a>:y x\\|@x<cr>$/;"	m
Q	GitaErr-ninitOkt18.vim	/^        nnoremap Q @q$/;"	m
Q	GitaErr-ninitOkt18.vim	/^        vnoremap Q :norm @q<cr>$/;"	m
q	GitaErr-ninitOkt18.vim	/^        nmap q <nop>$/;"	m
q	GitaErr-ninitOkt18.vim	/^        nnoremap q q$/;"	m
ss	GitaErr-ninitOkt18.vim	/^        nnoremap ss :wa<cr>$/;"	m
qq	GitaErr-ninitOkt18.vim	/^        nnoremap qq :wa<cr> :bd<cr>$/;"	m
qs	GitaErr-ninitOkt18.vim	/^        nnoremap qs :wa<cr> :qa<cr>$/;"	m
qa	GitaErr-ninitOkt18.vim	/^        nnoremap qa :qa!<cr>$/;"	m
ge	GitaErr-ninitOkt18.vim	/^        nnoremap ge :w<cr>:e #<cr>$/;"	m
qw	GitaErr-ninitOkt18.vim	/^        nnoremap qw <C-w>q<CR>$/;"	m
qo	GitaErr-ninitOkt18.vim	/^        nnoremap qo <C-w>o<CR>$/;"	m
ZZ	GitaErr-ninitOkt18.vim	/^        nnoremap ZZ  <Nop> $/;"	m
ZZ	GitaErr-ninitOkt18.vim	/^        nnoremap ZZ mzzt3<c-u>`z$/;"	m
zs	GitaErr-ninitOkt18.vim	/^        nnoremap zs mzzt3<c-u>`z$/;"	m
zx	GitaErr-ninitOkt18.vim	/^        nnoremap zx mzzt35<c-u>`z$/;"	m
zh	GitaErr-ninitOkt18.vim	/^        nnoremap zh mzzt10<c-u>`z$/;"	m
EE	GitaErr-ninitOkt18.vim	/^        nnoremap EE :source $MYVIMRC<CR>$/;"	m
BB	GitaErr-ninitOkt18.vim	/^        nnoremap BB ggVG$/;"	m
<BS>	GitaErr-ninitOkt18.vim	/^        nnoremap <BS> X$/;"	m
j	GitaErr-ninitOkt18.vim	/^        noremap j gj$/;"	m
k	GitaErr-ninitOkt18.vim	/^        noremap k gk$/;"	m
gj	GitaErr-ninitOkt18.vim	/^        noremap gj j$/;"	m
gk	GitaErr-ninitOkt18.vim	/^        noremap gk k$/;"	m
<C-A>	GitaErr-ninitOkt18.vim	/^        cnoremap <C-A> <Home>$/;"	m
<C-E>	GitaErr-ninitOkt18.vim	/^        cnoremap <C-E> <End>$/;"	m
<C-d>	GitaErr-ninitOkt18.vim	/^        cnoremap <C-d> <Del>$/;"	m
<c-o>	GitaErr-ninitOkt18.vim	/^        nnoremap <c-o> <c-o>zz$/;"	m
<c-i>	GitaErr-ninitOkt18.vim	/^        nnoremap <c-i> <c-i>zz$/;"	m
Y	GitaErr-ninitOkt18.vim	/^        nnoremap Y y\$$/;"	m
H	GitaErr-ninitOkt18.vim	/^        nnoremap H mzJ`z$/;"	m
S	GitaErr-ninitOkt18.vim	/^        nnoremap S i<cr><esc>^mwgk:silent! s\/\\v +$\/\/<cr>:noh<cr>`w$/;"	m
gv	GitaErr-ninitOkt18.vim	/^        nnoremap gv `[v`]$/;"	m
\\	GitaErr-ninitOkt18.vim	/^        noremap \\\\ #*$/;"	m
<C-W>	GitaErr-ninitOkt18.vim	/^        inoremap <C-W> <C-G>u<C-W>$/;"	m
<C-U>	GitaErr-ninitOkt18.vim	/^        inoremap <C-U> <C-G>u<C-U>$/;"	m
dg	GitaErr-ninitOkt18.vim	/^        vmap     dg  :dffget<CR>$/;"	m
dp	GitaErr-ninitOkt18.vim	/^        vmap     dp  :diffput<CR>$/;"	m
do	GitaErr-ninitOkt18.vim	/^        nnoremap do  :diffoff!<cr>$/;"	m
<C-_>	GitaErr-ninitOkt18.vim	/^        inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
g:ag_working_path_mode	GitaErr-ninitOkt18.vim	/^                let g:ag_working_path_mode="r"$/;"	v
g:ctrlp_user_command	GitaErr-ninitOkt18.vim	/^                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_use_caching	GitaErr-ninitOkt18.vim	/^                let g:ctrlp_use_caching = 0$/;"	v
g:ackprg	GitaErr-ninitOkt18.vim	/^                let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
g:unite_source_grep_command	GitaErr-ninitOkt18.vim	/^                let g:unite_source_grep_command = 'ag'$/;"	v
g:unite_source_grep_default_opts	GitaErr-ninitOkt18.vim	/^                let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'$/;"	v
g:unite_source_grep_recursive_opt	GitaErr-ninitOkt18.vim	/^                let g:unite_source_grep_recursive_opt = ''$/;"	v
g:fzf_layout	GitaErr-ninitOkt18.vim	/^        let g:fzf_layout = { 'window': 'enew' }$/;"	v
g:fzf_layout	GitaErr-ninitOkt18.vim	/^        let g:fzf_layout = { 'window': '-tabnew' }$/;"	v
g:fzf_layout	GitaErr-ninitOkt18.vim	/^        let g:fzf_layout = { 'window': '10split enew' }$/;"	v
g:fzf_colors	GitaErr-ninitOkt18.vim	/^        let g:fzf_colors =$/;"	v
fzf_statusline	GitaErr-ninitOkt18.vim	/^        function! s:fzf_statusline()$/;"	f
g:fzf_command_prefix	GitaErr-ninitOkt18.vim	/^        let g:fzf_command_prefix = 'Fzf'$/;"	v
g:fzf_action	GitaErr-ninitOkt18.vim	/^        let g:fzf_action = {$/;"	v
<leader><tab>	GitaErr-ninitOkt18.vim	/^        nmap <leader><tab> <plug>(fzf-maps-n)$/;"	m
<leader><tab>	GitaErr-ninitOkt18.vim	/^        omap <leader><tab> <plug>(fzf-maps-o)$/;"	m
<C-j>	GitaErr-ninitOkt18.vim	/^        imap <expr><C-j> fzf#vim#complete#word({'left': '15%'})$/;"	m
<C-l>	GitaErr-ninitOkt18.vim	/^        imap <C-l> <plug>(fzf-complete-line)$/;"	m
FZFTag	GitaErr-ninitOkt18.vim	/^        command! FZFTag if !empty(tagfiles()) | call fzf#run({$/;"	c
tag_handler	GitaErr-ninitOkt18.vim	/^        function! s:tag_handler(tag)$/;"	f
<Leader>t	GitaErr-ninitOkt18.vim	/^        nnoremap <silent> <Leader>t :FZFTagA<cr>$/;"	m
g:fzf_buffers_jump	GitaErr-ninitOkt18.vim	/^        let g:fzf_buffers_jump = 1$/;"	v
g:fzf_commits_log_options	GitaErr-ninitOkt18.vim	/^        let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'$/;"	v
g:fzf_tags_command	GitaErr-ninitOkt18.vim	/^        let g:fzf_tags_command = 'ctags -R'$/;"	v
g:fzf_commands_expect	GitaErr-ninitOkt18.vim	/^        let g:fzf_commands_expect = 'alt-enter,ctrl-x'$/;"	v
generate_tags	GitaErr-ninitOkt18.vim	/^        let generate_tags=1$/;"	v
g:unite_source_history_yank_save_clipboard	GitaErr-ninitOkt18.vim	/^        let g:unite_source_history_yank_save_clipboard = 1$/;"	v
g:unite_source_mark_marks	GitaErr-ninitOkt18.vim	/^        let g:unite_source_mark_marks = "abcdefghijklmnopqrstuvwxyz"$/;"	v
g:unite_candidate_icon	GitaErr-ninitOkt18.vim	/^        let g:unite_candidate_icon = '∘'$/;"	v
g:unite_source_history_yank_enable	GitaErr-ninitOkt18.vim	/^        let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	GitaErr-ninitOkt18.vim	/^        let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	GitaErr-ninitOkt18.vim	/^        let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	GitaErr-ninitOkt18.vim	/^        let g:unite_force_overwrite_statusline = 1$/;"	v
g:unite_prompt	GitaErr-ninitOkt18.vim	/^        let g:unite_prompt = '::: '$/;"	v
g:unite_marked_icon	GitaErr-ninitOkt18.vim	/^        let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	GitaErr-ninitOkt18.vim	/^        let g:unite_winheight = 15$/;"	v
g:unite_winwidth	GitaErr-ninitOkt18.vim	/^        let g:unite_winwidth = 50$/;"	v
g:unite_update_time	GitaErr-ninitOkt18.vim	/^        let g:unite_update_time = 200$/;"	v
g:unite_split_rule	GitaErr-ninitOkt18.vim	/^        let g:unite_split_rule = 'botright'$/;"	v
g:unite_split_rule	GitaErr-ninitOkt18.vim	/^        let g:unite_split_rule = "topleft"$/;"	v
g:unite_data_directory	GitaErr-ninitOkt18.vim	/^        let g:unite_data_directory ='~\/.config\/nvim\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	GitaErr-ninitOkt18.vim	/^        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	GitaErr-ninitOkt18.vim	/^        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	GitaErr-ninitOkt18.vim	/^        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:ctrlp_cmd	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_cmd = 'CtrlPMRU'$/;"	v
g:ctrlp_extensions	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_match_window_bottom	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_match_window_bottom = 0$/;"	v
g:ctrlp_match_window_reversed	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_match_window_reversed = 0$/;"	v
g:ctrlp_custom_ignore	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_custom_ignore = '\\v\\~$|\\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
g:ctrlp_dotfiles	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_dotfiles = 0$/;"	v
g:ctrlp_switch_buffer	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_switch_buffer = 0$/;"	v
g:ctrlp_working_path_mode	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_map	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_map = '<leader>p'$/;"	v
g:ctrlp_open_new_file	GitaErr-ninitOkt18.vim	/^        let g:ctrlp_open_new_file = 'R'$/;"	v
g:CommandTMaxFiles	GitaErr-ninitOkt18.vim	/^        let g:CommandTMaxFiles = 10000 " maximum number of files scan.$/;"	v
g:CommandTMaxDepth	GitaErr-ninitOkt18.vim	/^        let g:CommandTMaxDepth = 15$/;"	v
g:CommandTMaxCacheDirectories	GitaErr-ninitOkt18.vim	/^        let g:CommandTMaxCacheDirectories = 1 " 0: no limit.$/;"	v
g:CommandTMaxHeight	GitaErr-ninitOkt18.vim	/^        let g:CommandTMaxHeight = 15 " 0: as much as available space.$/;"	v
g:CommandTMinHeight	GitaErr-ninitOkt18.vim	/^        let g:CommandTMinHeight = 0 " 0: single line.$/;"	v
g:CommandTAlwaysShowDotFiles	GitaErr-ninitOkt18.vim	/^        let g:CommandTAlwaysShowDotFiles = 0 " only if entered string contains a dot$/;"	v
g:CommandTNeverShowDotFiles	GitaErr-ninitOkt18.vim	/^        let g:CommandTNeverShowDotFiles = 0$/;"	v
g:CommandTScanDotDirectories	GitaErr-ninitOkt18.vim	/^        let g:CommandTScanDotDirectories = 0$/;"	v
g:CommandTMatchWindowAtTop	GitaErr-ninitOkt18.vim	/^        let g:CommandTMatchWindowAtTop = 0 " match window appear at bottom.$/;"	v
g:CommandTMatchWindowReverse	GitaErr-ninitOkt18.vim	/^        let g:CommandTMatchWindowReverse = 1 " let the best match at bottom.$/;"	v
g:CommandTTageIncludeFilenames	GitaErr-ninitOkt18.vim	/^        let g:CommandTTageIncludeFilenames = 1 " include filenames when matches$/;"	v
g:ycm_filetype_blacklist	GitaErr-ninitOkt18.vim	/^        let g:ycm_filetype_blacklist = {$/;"	v
g:ycm_confirm_extra_conf	GitaErr-ninitOkt18.vim	/^        let g:ycm_confirm_extra_conf=0$/;"	v
g:ycm_collect_identifiers_from_tags_files	GitaErr-ninitOkt18.vim	/^        let g:ycm_collect_identifiers_from_tags_files=1$/;"	v
g:ycm_min_num_of_chars_for_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_min_num_of_chars_for_completion=3$/;"	v
g:ycm_cache_omnifunc	GitaErr-ninitOkt18.vim	/^        let g:ycm_cache_omnifunc=0$/;"	v
g:ycm_seed_identifiers_with_syntax	GitaErr-ninitOkt18.vim	/^        let g:ycm_seed_identifiers_with_syntax=1$/;"	v
g:ycm_autoclose_preview_window_after_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_autoclose_preview_window_after_completion = 1$/;"	v
g:ycm_error_symbol	GitaErr-ninitOkt18.vim	/^        let g:ycm_error_symbol = 'x>'$/;"	v
g:ycm_warning_symbol	GitaErr-ninitOkt18.vim	/^        let g:ycm_warning_symbol = 'w>'$/;"	v
g:ycm_enable_diagnostic_signs	GitaErr-ninitOkt18.vim	/^        let g:ycm_enable_diagnostic_signs = 1$/;"	v
g:ycm_add_preview_to_completeopt	GitaErr-ninitOkt18.vim	/^        let g:ycm_add_preview_to_completeopt = 1$/;"	v
g:ycm_use_ultisnips_completer	GitaErr-ninitOkt18.vim	/^        let g:ycm_use_ultisnips_completer = 1$/;"	v
g:ycm_autoclose_preview_window_after_insertion	GitaErr-ninitOkt18.vim	/^        let g:ycm_autoclose_preview_window_after_insertion = 1$/;"	v
g:ycm_key_detailed_diagnostics	GitaErr-ninitOkt18.vim	/^        let g:ycm_key_detailed_diagnostics = '<leader>d'$/;"	v
g:ycm_key_invoke_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_key_invoke_completion = '<C-Space>'$/;"	v
g:ycm_key_list_select_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']$/;"	v
g:ycm_key_list_previous_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']$/;"	v
g:ycm_key_list_stop_completion	GitaErr-ninitOkt18.vim	/^        let g:ycm_key_list_stop_completion = ['<C-3>']$/;"	v
<C-;>	GitaErr-ninitOkt18.vim	/^        map <C-;> :YcmCompleter GoToImprecise<CR>$/;"	m
UltiSnipsCallUnite	GitaErr-ninitOkt18.vim	/^        function! UltiSnipsCallUnite()$/;"	f
<F3>	GitaErr-ninitOkt18.vim	/^                inoremap <F3> <C-R>=(pumvisible()? "\\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>$/;"	m
g:UltiSnipsExpandTrigger	GitaErr-ninitOkt18.vim	/^                let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	GitaErr-ninitOkt18.vim	/^                let g:UltiSnipsJumpForwardTrigger="<C-q>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	GitaErr-ninitOkt18.vim	/^                let g:UltiSnipsJumpBackwardTrigger="<S-tab>"$/;"	v
g:neosnippet#snippets_directory	GitaErr-ninitOkt18.vim	/^        let g:neosnippet#snippets_directory = "~\/.config\/nvim\/plugged\/neosnippet-snippets\/neosnippets\/"$/;"	v
<C-s>	GitaErr-ninitOkt18.vim	/^                imap <C-s>    <Plug>(neosnippet_start_unite_snippet)$/;"	m
<C-b>	GitaErr-ninitOkt18.vim	/^                imap <C-b>    <Plug>(neosnippet_expand_or_jump)$/;"	m
<Leader>y	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>y :<C-u>Unite -buffer-name=neosnippet neosnippet<CR>$/;"	m
<Leader>u	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>u :Unite help file_mru file buffer file_rec bookmark <CR>$/;"	m
<Leader>\	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>\\ :Unite -silent -vertical -winwidth=40  -direction=botright -toggle outline<CR>$/;"	m
<Leader>h	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>h :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>r	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>r :<C-u>Unite -buffer-name=register register<CR>$/;"	m
<Leader>c	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>c :<C-u>Unite -buffer-name=change change<CR>$/;"	m
<Leader>j	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>j :<C-u>Unite -buffer-name=jump jump<CR>$/;"	m
<Leader>'	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>' :Unite bookmark <CR>$/;"	m
<Leader>l	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>l :lgrep -R <cword> .<cr>$/;"	m
<Leader>g	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>g :execute "vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>a	GitaErr-ninitOkt18.vim	/^                nnoremap <Leader>a :Ack <cword> .<cr>$/;"	m
?	GitaErr-ninitOkt18.vim	/^                nnoremap ? :Ack$/;"	m
<Leader>6	GitaErr-ninitOkt18.vim	/^                nmap <Leader>6 :Rg <cword> .<cr>$/;"	m
<Leader>7	GitaErr-ninitOkt18.vim	/^                nmap <Leader>7 :Ag <cword> .<cr>$/;"	m
<Leader>8	GitaErr-ninitOkt18.vim	/^                nmap <Leader>8 <Plug>AgRawSearch <cword> .<cr>$/;"	m
<Leader>/	GitaErr-ninitOkt18.vim	/^                nmap <Leader>\/ <Plug>AgRawSearch$/;"	m
;p	GitaErr-ninitOkt18.vim	/^                nnoremap ;p :CtrlP<cr>$/;"	m
;m	GitaErr-ninitOkt18.vim	/^                nnoremap ;m :CtrlPMRU<cr>$/;"	m
;h	GitaErr-ninitOkt18.vim	/^                nnoremap ;h :CommandTHelp<cr>$/;"	m
;b	GitaErr-ninitOkt18.vim	/^                nnoremap ;b :CommandTBuffer<cr>$/;"	m
g:CommandTCancelMap	GitaErr-ninitOkt18.vim	/^                let g:CommandTCancelMap=['<C-x>', '<C-c>']$/;"	v
<C-o>	GitaErr-ninitOkt18.vim	/^        inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-d>	GitaErr-ninitOkt18.vim	/^        inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-l>	GitaErr-ninitOkt18.vim	/^        inoremap <silent> <C-l> <C-x><C-l>$/;"	m
;d	GitaErr-ninitOkt18.vim	/^        nnoremap ;d mayiw`a:exe "!dict -P - $(echo " . @" . "\\| recode latin1..utf-8)"<CR>$/;"	m
g:tq_language	GitaErr-ninitOkt18.vim	/^        let g:tq_language=['en', 'ru', 'de', 'cn']$/;"	v
<leader>1	GitaErr-ninitOkt18.vim	/^        nnoremap <leader>1 yypVr=$/;"	m
<leader>ft	GitaErr-ninitOkt18.vim	/^        nnoremap <leader>ft Vatzf$/;"	m
<leader>S	GitaErr-ninitOkt18.vim	/^        nnoremap <leader>S ?{<CR>jV\/^\\s*\\}?$<CR>k:sort<CR>:noh<CR>$/;"	m
;l	GitaErr-ninitOkt18.vim	/^        nnoremap ;l :execute "leftabove vsplit" bufname('#')<cr>$/;"	m
;r	GitaErr-ninitOkt18.vim	/^        nnoremap ;r :execute "rightbelow vsplit" bufname('#')<cr>$/;"	m
<C-j>	GitaErr-ninitOkt18.vim	/^        nnoremap <C-j> :bn<cr>$/;"	m
<C-k>	GitaErr-ninitOkt18.vim	/^        nnoremap <C-k> :bp<cr>$/;"	m
<m-right>	GitaErr-ninitOkt18.vim	/^        nnoremap <m-right> :vertical resize +3<cr>$/;"	m
<m-left>	GitaErr-ninitOkt18.vim	/^        nnoremap <m-left> :vertical resize -3<cr>$/;"	m
<m-up>	GitaErr-ninitOkt18.vim	/^        nnoremap <m-up> :resize +3<cr>$/;"	m
<m-down>	GitaErr-ninitOkt18.vim	/^        nnoremap <m-down> :resize -3<cr>$/;"	m
<S-j>	GitaErr-ninitOkt18.vim	/^        noremap <S-j> :PreviewScroll -1<cr>$/;"	m
<S-l>	GitaErr-ninitOkt18.vim	/^        noremap <S-l> :PreviewScroll +1<cr>$/;"	m
ScrollOtherWindow	GitaErr-ninitOkt18.vim	/^        fun! ScrollOtherWindow(dir)$/;"	f
<C-M-Down>	GitaErr-ninitOkt18.vim	/^        nmap <silent> <C-M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<C-M-Up>	GitaErr-ninitOkt18.vim	/^        nmap <silent> <C-M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
g:vim_action_ag_escape_chars	GitaErr-ninitOkt18.vim	/^        let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\\\|'$/;"	v
InsertCountry	GitaErr-ninitOkt18.vim	/^        function! InsertCountry()$/;"	f
InsertCountry	GitaErr-ninitOkt18.vim	/^        command! -nargs=0 InsertCountry call InsertCountry()$/;"	c
s:thesaurus_pat	inkVimRcOkt18.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	inkVimRcOkt18.vim	/^        let maplocalleader= ','$/;"	v
mapleader	inkVimRcOkt18.vim	/^        let mapleader=' '$/;"	v
g:indent_guides_auto_colors	inkVimRcOkt18.vim	/^        let g:indent_guides_auto_colors = 0$/;"	v
w:persistent_cursorline	inkVimRcOkt18.vim	/^        let w:persistent_cursorline = 1$/;"	v
g:indentLine_color_term	inkVimRcOkt18.vim	/^                                let g:indentLine_color_term = 133$/;"	v
<C-J>	inkVimRcOkt18.vim	/^        map <C-J> <C-W>j<C-W>_$/;"	m
<C-K>	inkVimRcOkt18.vim	/^        map <C-K> <C-W>k<C-W>_$/;"	m
<C-H>	inkVimRcOkt18.vim	/^        map <C-H> <C-W>h<C-W>|$/;"	m
<C-L>	inkVimRcOkt18.vim	/^        map <C-L> <C-W>l<C-W>|$/;"	m
<C-=>	inkVimRcOkt18.vim	/^        map <C-=> <C-W>=$/;"	m
<S-j>	inkVimRcOkt18.vim	/^        nnoremap <S-j> :bn<cr>$/;"	m
<S-k>	inkVimRcOkt18.vim	/^        nnoremap <S-k> :bp<cr>$/;"	m
<m-j>	inkVimRcOkt18.vim	/^        nnoremap <m-j> :bn<cr>$/;"	m
<m-k>	inkVimRcOkt18.vim	/^        nnoremap <m-k> :bp<cr>$/;"	m
g:ctags_statusline	inkVimRcOkt18.vim	/^        let g:ctags_statusline=1$/;"	v
generate_tags	inkVimRcOkt18.vim	/^        let generate_tags=1$/;"	v
g:airline#extensions#tabline#enabled	inkVimRcOkt18.vim	/^        let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#fnamemod	inkVimRcOkt18.vim	/^        let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#buffer_min_count	inkVimRcOkt18.vim	/^        let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline_section_c	inkVimRcOkt18.vim	/^        let g:airline_section_c = '%{strftime("%D - %H:%M")}'$/;"	v
g:airline_theme	inkVimRcOkt18.vim	/^        let g:airline_theme='light'$/;"	v
g:airline_powerline_fonts	inkVimRcOkt18.vim	/^        let g:airline_powerline_fonts=1$/;"	v
g:airline#extensions#branch#enabled	inkVimRcOkt18.vim	/^        let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#whitespace#enabled	inkVimRcOkt18.vim	/^        let g:airline#extensions#whitespace#enabled = 1$/;"	v
g:airline#extensions#hunks#non_zero_only	inkVimRcOkt18.vim	/^        let g:airline#extensions#hunks#non_zero_only = 1$/;"	v
g:TagHighlightSettings	inkVimRcOkt18.vim	/^                let g:TagHighlightSettings = {}$/;"	v
g:TagHighlightSettings	inkVimRcOkt18.vim	/^        let g:TagHighlightSettings['TagFileName'] = 'tags'$/;"	v
g:TagHighlightSettings	inkVimRcOkt18.vim	/^        let g:TagHighlightSettings = {'TagFileName': 'tags', 'CtagsExecutable': 'etags.exe'}$/;"	v
g:EasyMotion_smartcase	lego-nini.vim	/^                let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_do_mapping	lego-nini.vim	/^                let g:EasyMotion_do_mapping = 0 "-Disable default mappings$/;"	v
<LocalLeader><LocalLeader>	lego-nini.vim	/^                nmap <LocalLeader><LocalLeader> <Plug>(easymotion-overwin-w)$/;"	m
g:accordion_mode	lego-nini.vim	/^                let g:accordion_mode="v"$/;"	v
g:trans_directions_list	lego-nini.vim	/^                let g:trans_directions_list = [$/;"	v
g:trans_save_history	lego-nini.vim	/^                let g:trans_save_history = 1$/;"	v
b:vimpipe_command	lego-nini.vim	/^                let b:vimpipe_command="lynx -dump -stdin"$/;"	v
b:vimpipe_command	lego-nini.vim	/^                let b:vimpipe_command='jslint <(cat)'$/;"	v
b:vimpipe_command	lego-nini.vim	/^                let b:vimpipe_command="python -m json.tool"$/;"	v
b:vimpipe_command	lego-nini.vim	/^                let b:vimpipe_command="multimarkdown"$/;"	v
g:coveragepy_uncovered_sign	lego-nini.vim	/^                let g:coveragepy_uncovered_sign = '-'$/;"	v
g:brightest#highlight	lego-nini.vim	/^                let g:brightest#highlight = { "group" : "Define" }$/;"	v
]c	lego-nini.vim	/^                nmap ]c <Plug>GitGutterNextHunk$/;"	m
[c	lego-nini.vim	/^                nmap [c <Plug>GitGutterPrevHunk$/;"	m
hp	lego-nini.vim	/^                nmap hp <Plug>GitGutterPreviewHunk$/;"	m
hs	lego-nini.vim	/^                nmap hs <Plug>GitGutterStageHunk$/;"	m
hu	lego-nini.vim	/^                nmap hu <Plug>GitGutterUndoHunk$/;"	m
g:extradite_width	lego-nini.vim	/^                let g:extradite_width = 60$/;"	v
g:extradite_showhash	lego-nini.vim	/^                let g:extradite_showhash = 1 "show abbre commit hashes.$/;"	v
g:highlightedyank_highlight_duration	lego-nini.vim	/^                let g:highlightedyank_highlight_duration = -1$/;"	v
ih	lego-nini.vim	/^                vmap ih <Plug>(textobj-gitgutter-i)$/;"	m
g:expand_region_text_objects	lego-nini.vim	/^                 let g:expand_region_text_objects = {$/;"	v
<m-1>	lego-nini.vim	/^        nmap <m-1> <esc>viq<left> $/;"	m
<m-q>	lego-nini.vim	/^                nmap <m-q> <esc>vaq<left> $/;"	m
<m-0>	lego-nini.vim	/^                        nmap <m-0> <esc>vab<left> $/;"	m
<m-3>	lego-nini.vim	/^                                nmap <m-3> <esc>viB $/;"	m
<m-i>	lego-nini.vim	/^                                        nmap <m-i> <esc>vio $/;"	m
<m-9>	lego-nini.vim	/^                                        nmap <m-9> <esc>vif $/;"	m
<m-8>	lego-nini.vim	/^                        nmap <m-8> <esc>vaf $/;"	m
<m-7>	lego-nini.vim	/^                nmap <m-7> <esc>vip $/;"	m
<m-6>	lego-nini.vim	/^        nmap <m-6> <esc>vih $/;"	m
<F1>	lego-nini.vim	/^        inoremap <F1> <ESC>$/;"	m
<F1>	lego-nini.vim	/^        nnoremap <F1> <ESC>$/;"	m
<F1>	lego-nini.vim	/^        vnoremap <F1> <ESC>$/;"	m
<F2>	lego-nini.vim	/^        nnoremap <buffer> <F2> <Esc>:help <C-r><C-w><CR>$/;"	m
<C-F2>	lego-nini.vim	/^        nnoremap <buffer> <C-F2> <Esc>:helpgrep <C-r><C-w><CR>$/;"	m
,h	lego-nini.vim	/^        map       ,h          :call ToggleHeader()<CR>$/;"	m
<C-F6>	lego-nini.vim	/^        map       <C-F6>      ,h$/;"	m
<C-F6>	lego-nini.vim	/^        imap      <C-F6>      <C-O><C-F6>$/;"	m
LocationToggle	lego-nini.vim	/^        command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	lego-nini.vim	/^        function! LocationToggle()$/;"	f
<F8>	lego-nini.vim	/^        nnoremap <F8> :LocationToggle<cr>$/;"	m
<LocalLeader>n	lego-nini.vim	/^                nnoremap <LocalLeader>n :lnext<cr>zvzz$/;"	m
<LocalLeader>b	lego-nini.vim	/^                nnoremap <LocalLeader>b :lprev<cr>zvzz$/;"	m
ToggleQuickFix	lego-nini.vim	/^        function! ToggleQuickFix()$/;"	f
<F9>	lego-nini.vim	/^        nnoremap <F9> :call ToggleQuickFix()<CR>$/;"	m
<Leader>b	lego-nini.vim	/^                nnoremap <Leader>b :cprev<cr>zvzz$/;"	m
<Leader>n	lego-nini.vim	/^                nnoremap <Leader>n :cnext<cr>zvzz$/;"	m
s	lego-nini.vim	/^                nmap s <Nop>$/;"	m
g:textobj_sandwich_no_default_key_mappings	lego-nini.vim	/^                let g:textobj_sandwich_no_default_key_mappings = 1$/;"	v
ia	lego-nini.vim	/^                omap ia <Plug>(textobj-sandwich-auto-i)$/;"	m
aa	lego-nini.vim	/^                omap aa <Plug>(textobj-sandwich-auto-a)$/;"	m
sb	lego-nini.vim	/^                vmap sb "zdi sympy.pprint(<c-r>z)<esc>$/;"	m
sn	lego-nini.vim	/^                vmap sn "zdi print(<c-r>z)<esc> $/;"	m
g:qf_mapping_ack_style	lego-nini.vim	/^                let g:qf_mapping_ack_style = 1$/;"	v
g:qf_window_bottom	lego-nini.vim	/^                let g:qf_window_bottom = 0$/;"	v
g:qf_auto_open_loclist	lego-nini.vim	/^                let g:qf_auto_open_loclist = 0$/;"	v
g:qf_max_height	lego-nini.vim	/^                let g:qf_max_height = 8$/;"	v
g:qf_nowrap	lego-nini.vim	/^                let g:qf_nowrap = 1$/;"	v
g:AutoPairs	lego-nini.vim	/^                let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}$/;"	v
g:AutoPairsShortcutToggle	lego-nini.vim	/^                let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	lego-nini.vim	/^                let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	lego-nini.vim	/^                let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutBackInsert	lego-nini.vim	/^                let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcuts	lego-nini.vim	/^                let g:AutoPairsShortcuts = 1$/;"	v
g:AutoPairsMapBS	lego-nini.vim	/^                let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	lego-nini.vim	/^                let g:AutoPairsMapCR = 0 " insert a new indented line if cursor in pairs.$/;"	v
g:AutoPairsMapSpace	lego-nini.vim	/^                let g:AutoPairsMapSpace = 0$/;"	v
g:AutoPairsCenterLine	lego-nini.vim	/^                let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	lego-nini.vim	/^                let g:AutoPairsFlyMode = 1$/;"	v
g:AutoPairsMapCR	lego-nini.vim	/^                let g:AutoPairsMapCR=0$/;"	v
g:AutoPairsMapCh	lego-nini.vim	/^                let g:AutoPairsMapCh=1$/;"	v
g:AutoPairsDelete	lego-nini.vim	/^                let g:AutoPairsDelete = '<M-5>'$/;"	v
<C-W>r	lego-nini.vim	/^                nmap <C-W>r  <Plug>(Visual-Split-Resize)$/;"	m
<C-W>s	lego-nini.vim	/^                nmap <C-W>s <Plug>(Visual-Split-Split)$/;"	m
<F3>	lego-nini.vim	/^                imap <F3> <Plug>(JavaComplete-Imports-RemoveUnused)$/;"	m
g:python_support_python2_require	lego-nini.vim	/^                let g:python_support_python2_require = 0$/;"	v
g:python_support_python3_require	lego-nini.vim	/^                let g:python_support_python3_require = 0$/;"	v
DoRemote	lego-nini.vim	/^        function! DoRemote(arg)$/;"	f
filetype_settings	lego-nini.vim	/^        augroup filetype_settings$/;"	a
SynStack	lego-nini.vim	/^        function! <SID>SynStack()$/;"	f
ShowFunc	lego-nini.vim	/^        function! ShowFunc()$/;"	f
sf	lego-nini.vim	/^        nmap sf :call ShowFunc()<CR>$/;"	m
ShowFuncKeys	lego-nini.vim	/^        function! ShowFuncKeys(bang)$/;"	f
ShowFuncKeys	lego-nini.vim	/^        com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)$/;"	c
ShowMaps	lego-nini.vim	/^        function! s:ShowMaps()$/;"	f
ShowMaps	lego-nini.vim	/^        com! ShowMaps call s:ShowMaps()      " Enable :ShowMaps to call the function$/;"	c
sm	lego-nini.vim	/^        nnoremap sm :ShowMaps<CR>            " Map keys to call the function$/;"	m
g:SuperTabCompletionContexts	lego-nini.vim	/^        let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']$/;"	v
g:SuperTabContextTextOmniPrecedence	lego-nini.vim	/^        let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
g:SuperTabContextDiscoverDiscovery	lego-nini.vim	/^        let g:SuperTabContextDiscoverDiscovery =$/;"	v
g:SuperTabContextDefaultCompletionType	lego-nini.vim	/^        let g:SuperTabContextDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabDefaultCompletionType	lego-nini.vim	/^        let g:SuperTabDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabLongestHighlight	lego-nini.vim	/^        let g:SuperTabLongestHighlight = 1$/;"	v
g:SuperTabCrMapping	lego-nini.vim	/^        let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabClosePreviewOnPopupClose	lego-nini.vim	/^        let g:SuperTabClosePreviewOnPopupClose = 1$/;"	v
JumpToCSS	lego-nini.vim	/^        function! JumpToCSS()$/;"	f
<c-z>	lego-nini.vim	/^        imap <expr> <c-z> TabComplete()$/;"	m
TabComplete	lego-nini.vim	/^        function! TabComplete()$/;"	f
IsEmmetExpandable	lego-nini.vim	/^        function! IsEmmetExpandable()$/;"	f
s:emmetElements	lego-nini.vim	/^        let s:emmetElements = ['a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noframes', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']$/;"	v
g:gitgutter_signs	lego-nini.vim	/^        let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	lego-nini.vim	/^        let g:gitgutter_max_signs = 2000$/;"	v
E	lego-nini.vim	/^        command! -bang E e<bang>$/;"	c
Q	lego-nini.vim	/^        command! -bang Q q<bang>$/;"	c
W	lego-nini.vim	/^        command! -bang W w<bang>$/;"	c
QA	lego-nini.vim	/^        command! -bang QA qa<bang>$/;"	c
Qa	lego-nini.vim	/^        command! -bang Qa qa<bang>$/;"	c
Wa	lego-nini.vim	/^        command! -bang Wa wa<bang>$/;"	c
WA	lego-nini.vim	/^        command! -bang WA wa<bang>$/;"	c
Wq	lego-nini.vim	/^        command! -bang Wq wq<bang>$/;"	c
WQ	lego-nini.vim	/^        command! -bang WQ wq<bang>$/;"	c
z1	lego-nini.vim	/^                nnoremap z1 :set foldlevel=1<cr>$/;"	m
zf	lego-nini.vim	/^                nnoremap zf :call FocusLine()<cr>$/;"	m
FocusLine	lego-nini.vim	/^                function! FocusLine()$/;"	f
JumpTo	lego-nini.vim	/^                function! JumpTo(jumpcommand)$/;"	f
JumpToInSplit	lego-nini.vim	/^                function! JumpToInSplit(jumpcommand)$/;"	f
JumpToTag	lego-nini.vim	/^                function! JumpToTag()$/;"	f
JumpToTagInSplit	lego-nini.vim	/^                function! JumpToTagInSplit()$/;"	f
<C-]>	lego-nini.vim	/^                nnoremap <C-]> :silent! call JumpToTag()<cr>$/;"	m
ErrorsToggle	lego-nini.vim	/^        command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	lego-nini.vim	/^        function! ErrorsToggle() $/;"	f
<Esc><Esc>	lego-nini.vim	/^        nnoremap <silent> <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>$/;"	m
n	lego-nini.vim	/^        nmap <silent> n nzz$/;"	m
N	lego-nini.vim	/^        nmap <silent> N Nzz$/;"	m
g*	lego-nini.vim	/^        nmap <silent> g* g*zz$/;"	m
g#	lego-nini.vim	/^        nmap <silent> g# g#zz$/;"	m
*	lego-nini.vim	/^        vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
#	lego-nini.vim	/^        vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
FindFiles	lego-nini.vim	/^        command! -nargs=1 FindFiles call FindFiles(<q-args>)$/;"	c
FindFiles	lego-nini.vim	/^        function! FindFiles(filename)$/;"	f
Wipeout	lego-nini.vim	/^        function! Wipeout()$/;"	f
DiffFoldLevel	lego-nini.vim	/^         function! DiffFoldLevel()$/;"	f
ft_diff	lego-nini.vim	/^        augroup ft_diff$/;"	a
DiffOrig	lego-nini.vim	/^        command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis \\ | wincmd p | diffthis$/;"	c
Diffoff	lego-nini.vim	/^        command! Diffoff        diffoff | setlocal nowrap$/;"	c
late	lego-nini.vim	/^                augroup late-verbose$/;"	a
g:syntastic_always_populate_loc_list	lego-nini.vim	/^        let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_check_on_open	lego-nini.vim	/^        let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	lego-nini.vim	/^        let g:syntastic_check_on_wq = 0$/;"	v
g:systastic_python_checkers	lego-nini.vim	/^        let g:systastic_python_checkers = ['pylint', 'python']$/;"	v
g:syntastic_mode_map	lego-nini.vim	/^        let g:syntastic_mode_map = {'mode': 'active'}$/;"	v
g:syntastic_python_pylint_quiet_messages	lego-nini.vim	/^        let g:syntastic_python_pylint_quiet_messages = {}$/;"	v
g:syntastic_enable_signs	lego-nini.vim	/^        let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_enable_highlighting	lego-nini.vim	/^        let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_javascript_checkers	lego-nini.vim	/^        let g:syntastic_javascript_checkers=['jshint']$/;"	v
g:syntastic_php_checkers	lego-nini.vim	/^        let g:syntastic_php_checkers=['php']$/;"	v
g:syntastic_css_checkers	lego-nini.vim	/^        let g:syntastic_css_checkers=['csslint']$/;"	v
g:syntastic_python_checkers	lego-nini.vim	/^        let g:syntastic_python_checkers = ['flake8']$/;"	v
g:syntastic_error_symbol	lego-nini.vim	/^        let g:syntastic_error_symbol = '⚡'$/;"	v
g:syntastic_warning_symbol	lego-nini.vim	/^        let g:syntastic_warning_symbol = '⚠'$/;"	v
UsingPython3	lego-nini.vim	/^        function! s:UsingPython3()$/;"	f
s:using_python3	lego-nini.vim	/^        let s:using_python3 = s:UsingPython3()$/;"	v
s:python_until_eof	lego-nini.vim	/^        let s:python_until_eof = s:using_python3 ? "python3 << EOF" : "python << EOF"$/;"	v
s:python_command	lego-nini.vim	/^        let s:python_command = s:using_python3 ? "py3 " : "py "$/;"	v
<F4>	lego-nini.vim	/^        noremap <buffer> <F4> :w<CR>:!python %<CR>$/;"	m
<C-F4>	lego-nini.vim	/^        noremap <buffer> <C-F4> :w<CR>:!clear;python %<CR>$/;"	m
<S-F4>	lego-nini.vim	/^        noremap <buffer> <S-F4> :w<CR>:exec '!python' shellescape(@%, 1)<CR>$/;"	m
python_files	lego-nini.vim	/^        augroup python_files $/;"	a
DetectPythonVariant	lego-nini.vim	/^                function! s:DetectPythonVariant()$/;"	f
g:jedi#use_splits_not_buffers	lego-nini.vim	/^                        let g:jedi#use_splits_not_buffers = "left"$/;"	v
g:jedi#popup_on_dot	lego-nini.vim	/^                        let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#goto_command	lego-nini.vim	/^                        let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	lego-nini.vim	/^                        let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	lego-nini.vim	/^                        let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	lego-nini.vim	/^                        let g:jedi#documentation_command = "M"$/;"	v
g:jedi#usages_command	lego-nini.vim	/^                        let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#rename_command	lego-nini.vim	/^                        let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#completions_command	lego-nini.vim	/^                        let g:jedi#completions_command = "<C-z>"$/;"	v
g:jedi#popup_on_dot	lego-nini.vim	/^                        let g:jedi#popup_on_dot = 1$/;"	v
g:jedi#completions_enabled	lego-nini.vim	/^                        let g:jedi#completions_enabled = 1$/;"	v
g:jedi#popup_select_first	lego-nini.vim	/^                        let g:jedi#popup_select_first = 1$/;"	v
g:jedi#show_call_signatures	lego-nini.vim	/^                        let g:jedi#show_call_signatures = "1"$/;"	v
g:jedi#goto_command	lego-nini.vim	/^                        let g:jedi#goto_command = "gt"$/;"	v
g:jedi#auto_close_doc	lego-nini.vim	/^                        let g:jedi#auto_close_doc = 0  " close preview window after completion$/;"	v
g:jedi#documentation_command	lego-nini.vim	/^                        let g:jedi#documentation_command = "gj"$/;"	v
g:LanguageClient_serverCommands	lego-nini.vim	/^                let g:LanguageClient_serverCommands = {$/;"	v
g:ag_working_path_mode	lego-nini.vim	/^                let g:ag_working_path_mode="r"$/;"	v
g:ctrlp_user_command	lego-nini.vim	/^                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_use_caching	lego-nini.vim	/^                let g:ctrlp_use_caching = 0$/;"	v
g:ackprg	lego-nini.vim	/^                let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
g:unite_source_grep_command	lego-nini.vim	/^                let g:unite_source_grep_command = 'ag'$/;"	v
g:unite_source_grep_default_opts	lego-nini.vim	/^                let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'$/;"	v
g:unite_source_grep_recursive_opt	lego-nini.vim	/^                let g:unite_source_grep_recursive_opt = ''$/;"	v
g:fzf_layout	lego-nini.vim	/^        let g:fzf_layout = { 'window': 'enew' }$/;"	v
g:fzf_layout	lego-nini.vim	/^        let g:fzf_layout = { 'window': '-tabnew' }$/;"	v
g:fzf_layout	lego-nini.vim	/^        let g:fzf_layout = { 'window': '10split enew' }$/;"	v
g:fzf_colors	lego-nini.vim	/^        let g:fzf_colors =$/;"	v
fzf_statusline	lego-nini.vim	/^        function! s:fzf_statusline()$/;"	f
g:fzf_command_prefix	lego-nini.vim	/^        let g:fzf_command_prefix = 'Fzf'$/;"	v
g:fzf_action	lego-nini.vim	/^        let g:fzf_action = {$/;"	v
<leader><tab>	lego-nini.vim	/^        nmap <leader><tab> <plug>(fzf-maps-n)$/;"	m
<leader><tab>	lego-nini.vim	/^        omap <leader><tab> <plug>(fzf-maps-o)$/;"	m
<C-j>	lego-nini.vim	/^        imap <expr><C-j> fzf#vim#complete#word({'left': '15%'})$/;"	m
<C-l>	lego-nini.vim	/^        imap <C-l> <plug>(fzf-complete-line)$/;"	m
FZFTag	lego-nini.vim	/^        command! FZFTag if !empty(tagfiles()) | call fzf#run({$/;"	c
tag_handler	lego-nini.vim	/^        function! s:tag_handler(tag)$/;"	f
<Leader>t	lego-nini.vim	/^        nnoremap <silent> <Leader>t :FZFTagA<cr>$/;"	m
g:fzf_buffers_jump	lego-nini.vim	/^        let g:fzf_buffers_jump = 1$/;"	v
g:fzf_commits_log_options	lego-nini.vim	/^        let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'$/;"	v
g:fzf_tags_command	lego-nini.vim	/^        let g:fzf_tags_command = 'ctags -R'$/;"	v
g:fzf_commands_expect	lego-nini.vim	/^        let g:fzf_commands_expect = 'alt-enter,ctrl-x'$/;"	v
generate_tags	lego-nini.vim	/^        let generate_tags=1$/;"	v
g:ctrlp_cmd	lego-nini.vim	/^        let g:ctrlp_cmd = 'CtrlPMRU'$/;"	v
g:ctrlp_extensions	lego-nini.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_match_window_bottom	lego-nini.vim	/^        let g:ctrlp_match_window_bottom = 0$/;"	v
g:ctrlp_match_window_reversed	lego-nini.vim	/^        let g:ctrlp_match_window_reversed = 0$/;"	v
g:ctrlp_custom_ignore	lego-nini.vim	/^        let g:ctrlp_custom_ignore = '\\v\\~$|\\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
g:ctrlp_dotfiles	lego-nini.vim	/^        let g:ctrlp_dotfiles = 0$/;"	v
g:ctrlp_switch_buffer	lego-nini.vim	/^        let g:ctrlp_switch_buffer = 0$/;"	v
g:ctrlp_working_path_mode	lego-nini.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_map	lego-nini.vim	/^        let g:ctrlp_map = '<leader>p'$/;"	v
g:ctrlp_open_new_file	lego-nini.vim	/^        let g:ctrlp_open_new_file = 'R'$/;"	v
g:CommandTMaxFiles	lego-nini.vim	/^        let g:CommandTMaxFiles = 10000 " maximum number of files scan.$/;"	v
g:CommandTMaxDepth	lego-nini.vim	/^        let g:CommandTMaxDepth = 15$/;"	v
g:CommandTMaxCacheDirectories	lego-nini.vim	/^        let g:CommandTMaxCacheDirectories = 1 " 0: no limit.$/;"	v
g:CommandTMaxHeight	lego-nini.vim	/^        let g:CommandTMaxHeight = 15 " 0: as much as available space.$/;"	v
g:CommandTMinHeight	lego-nini.vim	/^        let g:CommandTMinHeight = 0 " 0: single line.$/;"	v
g:CommandTAlwaysShowDotFiles	lego-nini.vim	/^        let g:CommandTAlwaysShowDotFiles = 0 " only if entered string contains a dot$/;"	v
g:CommandTNeverShowDotFiles	lego-nini.vim	/^        let g:CommandTNeverShowDotFiles = 0$/;"	v
g:CommandTScanDotDirectories	lego-nini.vim	/^        let g:CommandTScanDotDirectories = 0$/;"	v
g:CommandTMatchWindowAtTop	lego-nini.vim	/^        let g:CommandTMatchWindowAtTop = 0 " match window appear at bottom.$/;"	v
g:CommandTMatchWindowReverse	lego-nini.vim	/^        let g:CommandTMatchWindowReverse = 1 " let the best match at bottom.$/;"	v
g:CommandTTageIncludeFilenames	lego-nini.vim	/^        let g:CommandTTageIncludeFilenames = 1 " include filenames when matches$/;"	v
g:ycm_filetype_blacklist	lego-nini.vim	/^        let g:ycm_filetype_blacklist = {$/;"	v
g:ycm_confirm_extra_conf	lego-nini.vim	/^        let g:ycm_confirm_extra_conf=0$/;"	v
g:ycm_collect_identifiers_from_tags_files	lego-nini.vim	/^        let g:ycm_collect_identifiers_from_tags_files=1$/;"	v
g:ycm_min_num_of_chars_for_completion	lego-nini.vim	/^        let g:ycm_min_num_of_chars_for_completion=3$/;"	v
g:ycm_cache_omnifunc	lego-nini.vim	/^        let g:ycm_cache_omnifunc=0$/;"	v
g:ycm_seed_identifiers_with_syntax	lego-nini.vim	/^        let g:ycm_seed_identifiers_with_syntax=1$/;"	v
g:ycm_autoclose_preview_window_after_completion	lego-nini.vim	/^        let g:ycm_autoclose_preview_window_after_completion = 1$/;"	v
g:ycm_error_symbol	lego-nini.vim	/^        let g:ycm_error_symbol = 'x>'$/;"	v
g:ycm_warning_symbol	lego-nini.vim	/^        let g:ycm_warning_symbol = 'w>'$/;"	v
g:ycm_enable_diagnostic_signs	lego-nini.vim	/^        let g:ycm_enable_diagnostic_signs = 1$/;"	v
g:ycm_add_preview_to_completeopt	lego-nini.vim	/^        let g:ycm_add_preview_to_completeopt = 1$/;"	v
g:ycm_use_ultisnips_completer	lego-nini.vim	/^        let g:ycm_use_ultisnips_completer = 1$/;"	v
g:ycm_autoclose_preview_window_after_insertion	lego-nini.vim	/^        let g:ycm_autoclose_preview_window_after_insertion = 1$/;"	v
g:ycm_key_detailed_diagnostics	lego-nini.vim	/^        let g:ycm_key_detailed_diagnostics = '<leader>d'$/;"	v
g:ycm_key_invoke_completion	lego-nini.vim	/^        let g:ycm_key_invoke_completion = '<C-Space>'$/;"	v
g:ycm_key_list_select_completion	lego-nini.vim	/^        let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']$/;"	v
g:ycm_key_list_previous_completion	lego-nini.vim	/^        let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']$/;"	v
g:ycm_key_list_stop_completion	lego-nini.vim	/^        let g:ycm_key_list_stop_completion = ['<C-3>']$/;"	v
<C-;>	lego-nini.vim	/^        map <C-;> :YcmCompleter GoToImprecise<CR>$/;"	m
UltiSnipsCallUnite	lego-nini.vim	/^        function! UltiSnipsCallUnite()$/;"	f
<F3>	lego-nini.vim	/^                inoremap <F3> <C-R>=(pumvisible()? "\\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>$/;"	m
g:UltiSnipsExpandTrigger	lego-nini.vim	/^                let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	lego-nini.vim	/^                let g:UltiSnipsJumpForwardTrigger="<C-q>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	lego-nini.vim	/^                let g:UltiSnipsJumpBackwardTrigger="<S-tab>"$/;"	v
g:neosnippet#snippets_directory	lego-nini.vim	/^        let g:neosnippet#snippets_directory = "~\/.config\/nvim\/plugged\/neosnippet-snippets\/neosnippets\/"$/;"	v
<C-s>	lego-nini.vim	/^                imap <C-s>    <Plug>(neosnippet_start_unite_snippet)$/;"	m
<C-b>	lego-nini.vim	/^                imap <C-b>    <Plug>(neosnippet_expand_or_jump)$/;"	m
<Leader>y	lego-nini.vim	/^                nnoremap <Leader>y :<C-u>Unite -buffer-name=neosnippet neosnippet<CR>$/;"	m
<Leader>l	lego-nini.vim	/^                nnoremap <Leader>l :lgrep -R <cword> .<cr>$/;"	m
<Leader>g	lego-nini.vim	/^                nnoremap <Leader>g :execute "vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>a	lego-nini.vim	/^                nnoremap <Leader>a :Ack <cword> .<cr>$/;"	m
?	lego-nini.vim	/^                nnoremap ? :Ack$/;"	m
<Leader>6	lego-nini.vim	/^                nmap <Leader>6 :Rg <cword> .<cr>$/;"	m
<Leader>7	lego-nini.vim	/^                nmap <Leader>7 :Ag <cword> .<cr>$/;"	m
<Leader>8	lego-nini.vim	/^                nmap <Leader>8 <Plug>AgRawSearch <cword> .<cr>$/;"	m
<Leader>/	lego-nini.vim	/^                nmap <Leader>\/ <Plug>AgRawSearch$/;"	m
;p	lego-nini.vim	/^                nnoremap ;p :CtrlP<cr>$/;"	m
;m	lego-nini.vim	/^                nnoremap ;m :CtrlPMRU<cr>$/;"	m
;h	lego-nini.vim	/^                nnoremap ;h :CommandTHelp<cr>$/;"	m
;b	lego-nini.vim	/^                nnoremap ;b :CommandTBuffer<cr>$/;"	m
g:CommandTCancelMap	lego-nini.vim	/^                let g:CommandTCancelMap=['<C-x>', '<C-c>']$/;"	v
<C-o>	lego-nini.vim	/^        inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-d>	lego-nini.vim	/^        inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-l>	lego-nini.vim	/^        inoremap <silent> <C-l> <C-x><C-l>$/;"	m
;d	lego-nini.vim	/^        nnoremap ;d mayiw`a:exe "!dict -P - $(echo " . @" . "\\| recode latin1..utf-8)"<CR>$/;"	m
g:tq_language	lego-nini.vim	/^        let g:tq_language=['en', 'ru', 'de', 'cn']$/;"	v
<leader>1	lego-nini.vim	/^        nnoremap <leader>1 yypVr=$/;"	m
<leader>ft	lego-nini.vim	/^        nnoremap <leader>ft Vatzf$/;"	m
<leader>S	lego-nini.vim	/^        nnoremap <leader>S ?{<CR>jV\/^\\s*\\}?$<CR>k:sort<CR>:noh<CR>$/;"	m
<S-j>	lego-nini.vim	/^        noremap <S-j> :PreviewScroll -1<cr>$/;"	m
<S-l>	lego-nini.vim	/^        noremap <S-l> :PreviewScroll +1<cr>$/;"	m
ScrollOtherWindow	lego-nini.vim	/^        fun! ScrollOtherWindow(dir)$/;"	f
<C-M-Down>	lego-nini.vim	/^        nmap <silent> <C-M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<C-M-Up>	lego-nini.vim	/^        nmap <silent> <C-M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
g:vim_action_ag_escape_chars	lego-nini.vim	/^        let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\\\|'$/;"	v
InsertCountry	lego-nini.vim	/^        function! InsertCountry()$/;"	f
InsertCountry	lego-nini.vim	/^        command! -nargs=0 InsertCountry call InsertCountry()$/;"	c
Reddit	lego-nini.vim	/^function! Reddit()$/;"	f
Reddit	lego-nini.vim	/^command! -nargs=0 Reddit call Reddit()$/;"	c
autoformat_settings	logo1.vim	/^                augroup autoformat_settings$/;"	a
g:myplugin_enablefeature	logo1.vim	/^                let g:myplugin_enablefeature = 1$/;"	v
g:myplugin_defaultdir	logo1.vim	/^                let g:myplugin_defaultdir = $HOME$/;"	v
g:myplugin_weirdmode	logo1.vim	/^                let g:myplugin_weirdmode = 'm'$/;"	v
g:switch_mapping	logo1.vim	/^                let g:switch_mapping = "-"$/;"	v
g:switch_custom_definitions	logo1.vim	/^                let g:switch_custom_definitions =$/;"	v
b:switch_custom_definitions	logo1.vim	/^                        let b:switch_custom_definitions = [$/;"	v
ff	logo1.vim	/^                nnoremap ff :call CscopeFindInteractive(expand('<cword>'))<CR>$/;"	m
qs_colors	logo1.vim	/^                augroup qs_colors$/;"	a
g:bookmark_no_default_key_mappings	logo1.vim	/^                let g:bookmark_no_default_key_mappings = 1$/;"	v
BookmarkMapKeys	logo1.vim	/^                function! BookmarkMapKeys()$/;"	f
g:bookmark_auto_close	logo1.vim	/^                let g:bookmark_auto_close = 1$/;"	v
g:bookmark_highlight_lines	logo1.vim	/^                let g:bookmark_highlight_lines = 1          $/;"	v
g:bookmark_show_warning	logo1.vim	/^                let g:bookmark_show_warning = 0           $/;"	v
g:bookmark_show_toggle_warning	logo1.vim	/^                let g:bookmark_show_toggle_warning = 0      $/;"	v
g:bookmark_sign	logo1.vim	/^                let g:bookmark_sign = '♥'$/;"	v
g:bookmark_highlight_lines	logo1.vim	/^                let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_save_per_working_dir	logo1.vim	/^                let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_auto_save	logo1.vim	/^                let g:bookmark_auto_save = 1$/;"	v
g:bookmark_save_per_working_dir	logo1.vim	/^                let g:bookmark_save_per_working_dir = 1  $/;"	v
cmdline_map_start	logo1.vim	/^                let cmdline_map_start          = '<LocalLeader>s'$/;"	v
cmdline_map_send	logo1.vim	/^                let cmdline_map_send           = '<Space>'$/;"	v
cmdline_map_send_and_stay	logo1.vim	/^                let cmdline_map_send_and_stay  = '<LocalLeader><Space>'$/;"	v
cmdline_map_source_fun	logo1.vim	/^                let cmdline_map_source_fun     = '<LocalLeader>f'$/;"	v
cmdline_map_send_paragraph	logo1.vim	/^                let cmdline_map_send_paragraph = '<LocalLeader>p'$/;"	v
cmdline_map_send_block	logo1.vim	/^                let cmdline_map_send_block     = '<LocalLeader>b'$/;"	v
cmdline_map_quit	logo1.vim	/^                let cmdline_map_quit           = '<LocalLeader>q'$/;"	v
cmdline_vsplit	logo1.vim	/^                let cmdline_vsplit      = 1      " Split the window vertically$/;"	v
cmdline_esc_term	logo1.vim	/^                let cmdline_esc_term    = 1      " Remap <Esc> to :stopinsert in Neovim's terminal$/;"	v
cmdline_in_buffer	logo1.vim	/^                let cmdline_in_buffer   = 1      " Start the interpreter in a Neovim's terminal$/;"	v
cmdline_term_height	logo1.vim	/^                let cmdline_term_height = 15     " Initial height of interpreter window or pane$/;"	v
cmdline_term_width	logo1.vim	/^                let cmdline_term_width  = 80     " Initial width of interpreter window or pane$/;"	v
cmdline_tmp_dir	logo1.vim	/^                let cmdline_tmp_dir     = '\/tmp' " Temporary directory to save files$/;"	v
cmdline_outhl	logo1.vim	/^                let cmdline_outhl       = 1      " Syntax highlight the output$/;"	v
cmdline_auto_scroll	logo1.vim	/^                let cmdline_auto_scroll = 1      " Keep the cursor at the end of terminal (nvim)$/;"	v
cmdline_app	logo1.vim	/^                let cmdline_app         = {}$/;"	v
cmdline_color_input	logo1.vim	/^                    let cmdline_color_input    = '#9e9e9e'$/;"	v
cmdline_color_normal	logo1.vim	/^                    let cmdline_color_normal   = '#00afff'$/;"	v
cmdline_color_number	logo1.vim	/^                    let cmdline_color_number   = '#00ffff'$/;"	v
cmdline_color_integer	logo1.vim	/^                    let cmdline_color_integer  = '#00ffff'$/;"	v
cmdline_color_float	logo1.vim	/^                    let cmdline_color_float    = '#00ffff'$/;"	v
cmdline_color_input	logo1.vim	/^                    let cmdline_color_input    = 247$/;"	v
cmdline_color_normal	logo1.vim	/^                    let cmdline_color_normal   =  39$/;"	v
cmdline_color_number	logo1.vim	/^                    let cmdline_color_number   =  51$/;"	v
cmdline_color_integer	logo1.vim	/^                    let cmdline_color_integer  =  51$/;"	v
cmdline_color_float	logo1.vim	/^                    let cmdline_color_float    =  51$/;"	v
cmdline_color_complex	logo1.vim	/^                    let cmdline_color_complex  =  51$/;"	v
cmdline_color_negnum	logo1.vim	/^                    let cmdline_color_negnum   = 183$/;"	v
cmdline_color_negfloat	logo1.vim	/^                    let cmdline_color_negfloat = 183$/;"	v
cmdline_color_date	logo1.vim	/^                    let cmdline_color_date     =  43$/;"	v
cmdline_color_true	logo1.vim	/^                    let cmdline_color_true     =  78$/;"	v
cmdline_color_false	logo1.vim	/^                    let cmdline_color_false    = 203$/;"	v
cmdline_color_inf	logo1.vim	/^                    let cmdline_color_inf      =  39$/;"	v
cmdline_color_constant	logo1.vim	/^                    let cmdline_color_constant =  75$/;"	v
cmdline_color_string	logo1.vim	/^                    let cmdline_color_string   =  79$/;"	v
cmdline_color_stderr	logo1.vim	/^                    let cmdline_color_stderr   =  33$/;"	v
cmdline_color_error	logo1.vim	/^                    let cmdline_color_error    =  15$/;"	v
cmdline_color_warn	logo1.vim	/^                    let cmdline_color_warn     =   1$/;"	v
cmdline_color_index	logo1.vim	/^                    let cmdline_color_index    = 186$/;"	v
<Leader>a&	logo1.vim	/^                nmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a&	logo1.vim	/^                vmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a=	logo1.vim	/^                nmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=	logo1.vim	/^                vmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=>	logo1.vim	/^                nmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>a=>	logo1.vim	/^                vmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>a:	logo1.vim	/^                nmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a:	logo1.vim	/^                vmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a::	logo1.vim	/^                nmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a::	logo1.vim	/^                vmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a,	logo1.vim	/^                nmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,	logo1.vim	/^                vmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,,	logo1.vim	/^                nmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a,,	logo1.vim	/^                vmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a<Bar>	logo1.vim	/^                nmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a<Bar>	logo1.vim	/^                vmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
g:table_mode_corner_corner	logo1.vim	/^                let g:table_mode_corner_corner='+'$/;"	v
g:table_mode_header_fillchar	logo1.vim	/^                let g:table_mode_header_fillchar='='$/;"	v
<leader>r	logo1.vim	/^                 noremap <leader>r :Ranger<CR>$/;"	m
g:pyref_mapping	logo1.vim	/^                let g:pyref_mapping = 'gu'$/;"	v
g:pyref_python	logo1.vim	/^                let g:pyref_python = 'file:\/\/\/usr\/share\/doc\/python2.7\/html\/index.html'$/;"	v
g:pydoc_cmd	logo1.vim	/^                let g:pydoc_cmd = 'python -m pydoc'$/;"	v
g:pydoc_open_cmd	logo1.vim	/^                let g:pydoc_open_cmd = 'vsplit'$/;"	v
g:pydoc_use_drop	logo1.vim	/^                let g:pydoc_use_drop=1$/;"	v
g:pydoc_window_lines	logo1.vim	/^                let g:pydoc_window_lines=15$/;"	v
g:user_emmet_settings	logoHtml.vim	/^        let g:user_emmet_settings = {$/;"	v
g:user_emmet_expandabbr_key	logoHtml.vim	/^        let g:user_emmet_expandabbr_key = '<c-\\>'$/;"	v
g:use_emmet_complete_tag	logoHtml.vim	/^        let g:use_emmet_complete_tag = 1$/;"	v
doSomething	mDarkSameln.vim	/^function! s:doSomething()$/;"	f
DoSomething	mDarkSameln.vim	/^command DoSomething :call <SID>doSomething()$/;"	c
k	mDarkSameln.vim	/^nmap k :DoSomething$/;"	m
$MYVIMRC	minit.vim	/^        let $MYVIMRC='~\/.config\/nvim\/init.vim'$/;"	v
s:thesaurus_pat	minit.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	minit.vim	/^        let maplocalleader=','$/;"	v
mapleader	minit.vim	/^        let mapleader=' '$/;"	v
vimrc	minit.vim	/^        augroup vimrc$/;"	a
g:pymode_python	minit.vim	/^        let g:pymode_python = 'python3'$/;"	v
;l	minit.vim	/^        nnoremap ;l :execute "leftabove vsplit" bufname('#')<cr>$/;"	m
;r	minit.vim	/^        nnoremap ;r :execute "rightbelow vsplit" bufname('#')<cr>$/;"	m
<C-j>	minit.vim	/^        nnoremap <C-j> :bn<cr>$/;"	m
<C-k>	minit.vim	/^        nnoremap <C-k> :bp<cr>$/;"	m
<m-right>	minit.vim	/^        nnoremap <m-right> :vertical resize +3<cr>$/;"	m
<m-left>	minit.vim	/^        nnoremap <m-left> :vertical resize -3<cr>$/;"	m
<m-up>	minit.vim	/^        nnoremap <m-up> :resize +3<cr>$/;"	m
<m-down>	minit.vim	/^        nnoremap <m-down> :resize -3<cr>$/;"	m
<cr>	minit.vim	/^        nnoremap <cr> o<esc>$/;"	m
<CR>	minit.vim	/^        inoremap <silent><expr> <CR> (pumvisible() && bufname('%') !=# '[Command Line]' ? "\\<C-e>\\<CR>" : "\\<C-g>u\\<CR>")$/;"	m
}	minit.vim	/^        noremap } }^$/;"	m
>	minit.vim	/^        nnoremap > v>$/;"	m
<	minit.vim	/^        nnoremap < v<$/;"	m
<	minit.vim	/^        vnoremap < <gv$/;"	m
>	minit.vim	/^        vnoremap > >gv$/;"	m
.	minit.vim	/^        vnoremap . :normal .<CR>$/;"	m
w!!	minit.vim	/^        cmap w!! w !sudo tee % >\/dev\/null$/;"	m
cd	minit.vim	/^        map cd :cd %:p:h<cr>$/;"	m
s:thesaurus_pat	mix16ninitOkt18.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	mix16ninitOkt18.vim	/^        let maplocalleader=','$/;"	v
mapleader	mix16ninitOkt18.vim	/^        let mapleader=' '$/;"	v
$MYVIMRC	mix16ninitOkt18.vim	/^        let $MYVIMRC='~\/.config\/nvim\/init.vim'$/;"	v
ZZ	mix16ninitOkt18.vim	/^        nnoremap ZZ  <Nop> "-Disable-ZZ-$/;"	m
ZZ	mix16ninitOkt18.vim	/^        map ZZ :source $MYVIMRC<CR>$/;"	m
EE	mix16ninitOkt18.vim	/^        map EE :e $MYVIMRC<CR>$/;"	m
vimrc	mix16ninitOkt18.vim	/^        augroup vimrc$/;"	a
W	mix16ninitOkt18.vim	/^        vnoremap W gq$/;"	m
W	mix16ninitOkt18.vim	/^        nnoremap W gqip$/;"	m
gitroot	mix16ninitOkt18.vim	/^                let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\\n\\r]', '', 'g')$/;"	v
g:easytags_auto_highlight	mix16ninitOkt18.vim	/^        let g:easytags_auto_highlight = 1$/;"	v
g:easytags_syntax_keyword	mix16ninitOkt18.vim	/^        let g:easytags_syntax_keyword = 'always'$/;"	v
g:easytags_events	mix16ninitOkt18.vim	/^        let g:easytags_events = ['BufWritePost']$/;"	v
jj	mix16ninitOkt18.vim	/^        imap jj <Esc>$/;"	m
ss	mix16ninitOkt18.vim	/^        noremap ss :wa<cr>$/;"	m
qq	mix16ninitOkt18.vim	/^        noremap qq :wa<cr> :bd<cr>$/;"	m
sq	mix16ninitOkt18.vim	/^        noremap sq :wa<cr> :qa<cr>$/;"	m
qa	mix16ninitOkt18.vim	/^        noremap qa :qa!<cr>$/;"	m
ge	mix16ninitOkt18.vim	/^        nnoremap ge :w<CR>:e #<CR>$/;"	m
ee	mix16ninitOkt18.vim	/^        nnoremap ee :e#<CR>$/;"	m
j	mix16ninitOkt18.vim	/^        noremap j gj$/;"	m
k	mix16ninitOkt18.vim	/^        noremap k gk$/;"	m
gj	mix16ninitOkt18.vim	/^        noremap gj j$/;"	m
gk	mix16ninitOkt18.vim	/^        noremap gk k$/;"	m
<C-A>	mix16ninitOkt18.vim	/^        cnoremap <C-A> <Home>$/;"	m
<C-E>	mix16ninitOkt18.vim	/^        cnoremap <C-E> <End>$/;"	m
<C-d>	mix16ninitOkt18.vim	/^        cnoremap <C-d> <Del>$/;"	m
<C-P>	mix16ninitOkt18.vim	/^        nnoremap <C-P> <Up>$/;"	m
<C-N>	mix16ninitOkt18.vim	/^        nnoremap <C-N> <Down>$/;"	m
Q	mix16ninitOkt18.vim	/^        nnoremap Q q$/;"	m
<leader>-	mix16ninitOkt18.vim	/^        nmap <silent> <leader>- :t.<CR>Vr-$/;"	m
aa	mix16ninitOkt18.vim	/^        nnoremap aa ggVG$/;"	m
<c-o>	mix16ninitOkt18.vim	/^        nnoremap <c-o> <c-o>zz$/;"	m
<c-i>	mix16ninitOkt18.vim	/^        nnoremap <c-i> <c-i>zz$/;"	m
<Leader>u	mix16ninitOkt18.vim	/^        nnoremap <silent> <Leader>u :<C-u>update<CR>$/;"	m
Y	mix16ninitOkt18.vim	/^        nnoremap Y y\$$/;"	m
H	mix16ninitOkt18.vim	/^        nnoremap H mzJ`z$/;"	m
S	mix16ninitOkt18.vim	/^        nnoremap S i<cr><esc>^mwgk:silent! s\/\\v +$\/\/<cr>:noh<cr>`w$/;"	m
g:bling_time	mix16ninitOkt18.vim	/^        let g:bling_time = 42$/;"	v
g:bling_color_fg	mix16ninitOkt18.vim	/^        let g:bling_color_fg = 'green'$/;"	v
g:bling_color_cterm	mix16ninitOkt18.vim	/^        let g:bling_color_cterm = 'reverse'$/;"	v
z1	mix16ninitOkt18.vim	/^        nnoremap z1 :set foldlevel=1<cr>$/;"	m
z2	mix16ninitOkt18.vim	/^        nnoremap z2 :set foldlevel=2<cr>$/;"	m
z3	mix16ninitOkt18.vim	/^        nnoremap z3 :set foldlevel=3<cr>$/;"	m
zO	mix16ninitOkt18.vim	/^        nnoremap zO zczO$/;"	m
FocusLine	mix16ninitOkt18.vim	/^        function! FocusLine()$/;"	f
<c-z>	mix16ninitOkt18.vim	/^        nnoremap <c-z> :call FocusLine()<cr>$/;"	m
<cr>	mix16ninitOkt18.vim	/^        nnoremap <cr> o<esc>$/;"	m
<CR>	mix16ninitOkt18.vim	/^        inoremap <silent><expr> <CR> (pumvisible() && bufname('%') !=# '[Command Line]' ? "\\<C-e>\\<CR>" : "\\<C-g>u\\<CR>")$/;"	m
}	mix16ninitOkt18.vim	/^        noremap } }^$/;"	m
gp	mix16ninitOkt18.vim	/^        nnoremap <expr> gp '`['.strpart(getregtype(), 0, 1).'`]'$/;"	m
<	mix16ninitOkt18.vim	/^        vnoremap < <gv$/;"	m
>	mix16ninitOkt18.vim	/^        vnoremap > >gv$/;"	m
.	mix16ninitOkt18.vim	/^        vnoremap . :normal .<CR>$/;"	m
w!!	mix16ninitOkt18.vim	/^        cmap w!! w !sudo tee % >\/dev\/null$/;"	m
cd	mix16ninitOkt18.vim	/^        map cd :cd %:p:h<cr>$/;"	m
(	mix16ninitOkt18.vim	/^        nnoremap ( <c-x>:y x\\|@x<cr>$/;"	m
)	mix16ninitOkt18.vim	/^        nnoremap ) <c-a>:y x\\|@x<cr>$/;"	m
<F4>	mix16ninitOkt18.vim	/^        nmap <F4> :call <SID>SynStack()<CR>$/;"	m
SynStack	mix16ninitOkt18.vim	/^        function! <SID>SynStack()$/;"	f
ShowFunc	mix16ninitOkt18.vim	/^        function! ShowFunc()$/;"	f
ShowFuncKeys	mix16ninitOkt18.vim	/^        function! ShowFuncKeys(bang)$/;"	f
ShowFuncKeys	mix16ninitOkt18.vim	/^        com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)$/;"	c
ShowMaps	mix16ninitOkt18.vim	/^        function! s:ShowMaps()$/;"	f
ShowMaps	mix16ninitOkt18.vim	/^        com! ShowMaps call s:ShowMaps()      " Enable :ShowMaps to call the function$/;"	c
\m	mix16ninitOkt18.vim	/^        nnoremap \\m :ShowMaps<CR>            " Map keys to call the function$/;"	m
ff	mix16ninitOkt18.vim	/^        nnoremap ff :call CscopeFindInteractive(expand('<cword>'))<CR>$/;"	m
<C-Space>	mix16ninitOkt18.vim	/^        map <silent> <C-Space> :let@m=expand("<cword>")<CR>$/;"	m
<m-F6>	mix16ninitOkt18.vim	/^        map <m-F6> :cscope find s <C-R>=@m<CR><CR>$/;"	m
<m-F5>	mix16ninitOkt18.vim	/^        map <m-F5> :cscope find c <C-R>=@m<CR><CR>$/;"	m
<m-F7>	mix16ninitOkt18.vim	/^        map <m-F7> :cscope find g <C-R>=@m<CR><CR>$/;"	m
g:deoplete#enable_ignore_case	mix16ninitOkt18.vim	/^        let g:deoplete#enable_ignore_case = 1$/;"	v
g:deoplete#enable_smart_case	mix16ninitOkt18.vim	/^        let g:deoplete#enable_smart_case = 1$/;"	v
g:deoplete#enable_camel_case	mix16ninitOkt18.vim	/^        let g:deoplete#enable_camel_case = 1$/;"	v
g:deoplete#enable_refresh_always	mix16ninitOkt18.vim	/^        let g:deoplete#enable_refresh_always = 1$/;"	v
g:deoplete#max_abbr_width	mix16ninitOkt18.vim	/^        let g:deoplete#max_abbr_width = 0$/;"	v
g:deoplete#max_menu_width	mix16ninitOkt18.vim	/^        let g:deoplete#max_menu_width = 0$/;"	v
<leader>q	mix16ninitOkt18.vim	/^        nnoremap <leader>q :CtrlP<cr>$/;"	m
g:ctrlp_cmd	mix16ninitOkt18.vim	/^        let g:ctrlp_cmd = 'CtrlPMRU'$/;"	v
g:ctrlp_extensions	mix16ninitOkt18.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_match_window_bottom	mix16ninitOkt18.vim	/^        let g:ctrlp_match_window_bottom = 0$/;"	v
g:ctrlp_match_window_reversed	mix16ninitOkt18.vim	/^        let g:ctrlp_match_window_reversed = 0$/;"	v
g:ctrlp_custom_ignore	mix16ninitOkt18.vim	/^        let g:ctrlp_custom_ignore = '\\v\\~$|\\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
g:ctrlp_dotfiles	mix16ninitOkt18.vim	/^        let g:ctrlp_dotfiles = 0$/;"	v
g:ctrlp_switch_buffer	mix16ninitOkt18.vim	/^        let g:ctrlp_switch_buffer = 0$/;"	v
g:ctrlp_working_path_mode	mix16ninitOkt18.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_working_path_mode	mix16ninitOkt18.vim	/^        let g:ctrlp_working_path_mode = 'ar'$/;"	v
<C-r>	mix16ninitOkt18.vim	/^        imap <C-r> <plug>(fzf-complete-word)$/;"	m
<C-\>	mix16ninitOkt18.vim	/^        imap <C-\\> <plug>(fzf-complete-line)$/;"	m
<Leader>u	mix16ninitOkt18.vim	/^        nnoremap <Leader>u :Unite history\/yank file_mru file buffer file_rec bookmark <CR>$/;"	m
<Leader>h	mix16ninitOkt18.vim	/^        nnoremap <Leader>h :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>i	mix16ninitOkt18.vim	/^        nnoremap <Leader>i :Unite -silent history\/yank<CR>$/;"	m
<Leader>v	mix16ninitOkt18.vim	/^        nnoremap <Leader>v :UniteWithCursorWord -silent -no-split -auto-preview line<CR>$/;"	m
<Leader>t	mix16ninitOkt18.vim	/^        nnoremap <Leader>t :Unite -silent -vertical -winwidth=40  -direction=topleft -toggle outline<CR>$/;"	m
g:unite_source_grep_command	mix16ninitOkt18.vim	/^                let g:unite_source_grep_command = 'ag'$/;"	v
g:unite_source_grep_default_opts	mix16ninitOkt18.vim	/^                let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'$/;"	v
g:unite_source_grep_recursive_opt	mix16ninitOkt18.vim	/^                let g:unite_source_grep_recursive_opt = ''$/;"	v
g:unite_source_history_yank_save_clipboard	mix16ninitOkt18.vim	/^        let g:unite_source_history_yank_save_clipboard = 1$/;"	v
g:unite_source_mark_marks	mix16ninitOkt18.vim	/^        let g:unite_source_mark_marks = "abcdefghijklmnopqrstuvwxyz"$/;"	v
g:unite_candidate_icon	mix16ninitOkt18.vim	/^        let g:unite_candidate_icon = '∘'$/;"	v
g:unite_source_history_yank_enable	mix16ninitOkt18.vim	/^        let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	mix16ninitOkt18.vim	/^        let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	mix16ninitOkt18.vim	/^        let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	mix16ninitOkt18.vim	/^        let g:unite_force_overwrite_statusline = 0$/;"	v
g:unite_prompt	mix16ninitOkt18.vim	/^        let g:unite_prompt = '>>> '$/;"	v
g:unite_marked_icon	mix16ninitOkt18.vim	/^        let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	mix16ninitOkt18.vim	/^        let g:unite_winheight = 15$/;"	v
g:unite_update_time	mix16ninitOkt18.vim	/^        let g:unite_update_time = 200$/;"	v
g:unite_split_rule	mix16ninitOkt18.vim	/^        let g:unite_split_rule = 'botright'$/;"	v
g:unite_data_directory	mix16ninitOkt18.vim	/^        let g:unite_data_directory ='~\/.vim\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	mix16ninitOkt18.vim	/^        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	mix16ninitOkt18.vim	/^        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	mix16ninitOkt18.vim	/^        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:ackprg	mix16ninitOkt18.vim	/^                let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
g:ag_working_path_mode	mix16ninitOkt18.vim	/^                let g:ag_working_path_mode="r"$/;"	v
g:ctrlp_user_command	mix16ninitOkt18.vim	/^                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_use_caching	mix16ninitOkt18.vim	/^                let g:ctrlp_use_caching = 0$/;"	v
g:gitgutter_signs	mix16ninitOkt18.vim	/^        let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	mix16ninitOkt18.vim	/^        let g:gitgutter_max_signs = 2000$/;"	v
]h	mix16ninitOkt18.vim	/^        nmap ]h <Plug>GitGutterNextHunk$/;"	m
[h	mix16ninitOkt18.vim	/^        nmap [h <Plug>GitGutterPrevHunk$/;"	m
;c	mix16ninitOkt18.vim	/^        nmap ;c <Plug>GitGutterStageHunk$/;"	m
;u	mix16ninitOkt18.vim	/^        nmap ;u <Plug>GitGutterUndoHunk$/;"	m
;p	mix16ninitOkt18.vim	/^        nmap ;p <Plug>GitGutterPreviewHunk$/;"	m
g:gitgutter_highlight_lines	mix16ninitOkt18.vim	/^        let g:gitgutter_highlight_lines = 0$/;"	v
g:gitgutter_override_sign_column_highlight	mix16ninitOkt18.vim	/^        let g:gitgutter_override_sign_column_highlight = 0$/;"	v
ih	mix16ninitOkt18.vim	/^        omap ih <Plug>GitGutterTextObjectInnerPending$/;"	m
ah	mix16ninitOkt18.vim	/^        omap ah <Plug>GitGutterTextObjectOuterPending$/;"	m
g:gitgutter_sign_added	mix16ninitOkt18.vim	/^        let g:gitgutter_sign_added = '++'$/;"	v
g:gitgutter_sign_modified	mix16ninitOkt18.vim	/^        let g:gitgutter_sign_modified = 'MO'$/;"	v
g:gitgutter_sign_removed	mix16ninitOkt18.vim	/^        let g:gitgutter_sign_removed = '--'$/;"	v
g:gitgutter_sign_removed_first_line	mix16ninitOkt18.vim	/^        let g:gitgutter_sign_removed_first_line = '^^'$/;"	v
g:gitgutter_sign_modified_removed	mix16ninitOkt18.vim	/^        let g:gitgutter_sign_modified_removed = 'mr'$/;"	v
g:indent_guides_enable_on_vim_startup	mix16ninitOkt18.vim	/^        let g:indent_guides_enable_on_vim_startup = 1$/;"	v
$h	mix16ninitOkt18.vim	/^        cno $h e ~\/$/;"	m
$d	mix16ninitOkt18.vim	/^        cno $d e ~\/Desktop\/$/;"	m
$j	mix16ninitOkt18.vim	/^        cno $j e .\/$/;"	m
$c	mix16ninitOkt18.vim	/^        cno $c e <C-\\>eCurrentFileDir("e")<cr>$/;"	m
E	mix16ninitOkt18.vim	/^        command! -bang E e<bang>$/;"	c
Q	mix16ninitOkt18.vim	/^        command! -bang Q q<bang>$/;"	c
W	mix16ninitOkt18.vim	/^        command! -bang W w<bang>$/;"	c
QA	mix16ninitOkt18.vim	/^        command! -bang QA qa<bang>$/;"	c
Qa	mix16ninitOkt18.vim	/^        command! -bang Qa qa<bang>$/;"	c
Wa	mix16ninitOkt18.vim	/^        command! -bang Wa wa<bang>$/;"	c
WA	mix16ninitOkt18.vim	/^        command! -bang WA wa<bang>$/;"	c
Wq	mix16ninitOkt18.vim	/^        command! -bang Wq wq<bang>$/;"	c
WQ	mix16ninitOkt18.vim	/^        command! -bang WQ wq<bang>$/;"	c
U	mix16ninitOkt18.vim	/^        nnoremap U :syntax sync fromstart<cr>:redraw!<cr>$/;"	m
<m-right>	mix16ninitOkt18.vim	/^        nnoremap <m-right> :vertical resize +3<cr>$/;"	m
<m-left>	mix16ninitOkt18.vim	/^        nnoremap <m-left> :vertical resize -3<cr>$/;"	m
<m-up>	mix16ninitOkt18.vim	/^        nnoremap <m-up> :resize +3<cr>$/;"	m
<m-down>	mix16ninitOkt18.vim	/^        nnoremap <m-down> :resize -3<cr>$/;"	m
JumpTo	mix16ninitOkt18.vim	/^                function! JumpTo(jumpcommand)$/;"	f
JumpToInSplit	mix16ninitOkt18.vim	/^                function! JumpToInSplit(jumpcommand)$/;"	f
JumpToTag	mix16ninitOkt18.vim	/^                function! JumpToTag()$/;"	f
JumpToTagInSplit	mix16ninitOkt18.vim	/^                function! JumpToTagInSplit()$/;"	f
<C-]>	mix16ninitOkt18.vim	/^                nnoremap <C-]> :silent! call JumpToTag()<cr>$/;"	m
<C-s>	mix16ninitOkt18.vim	/^                nnoremap <C-s> :silent! call JumpToTagInSplit()<cr>$/;"	m
PreviewTag3	mix16ninitOkt18.vim	/^                function! PreviewTag3(top)$/;"	f
g:bookmark_auto_close	mix16ninitOkt18.vim	/^        let g:bookmark_auto_close = 1$/;"	v
g:bookmark_highlight_lines	mix16ninitOkt18.vim	/^        let g:bookmark_highlight_lines = 1          $/;"	v
g:bookmark_show_warning	mix16ninitOkt18.vim	/^        let g:bookmark_show_warning = 0           $/;"	v
g:bookmark_show_toggle_warning	mix16ninitOkt18.vim	/^        let g:bookmark_show_toggle_warning = 0      $/;"	v
g:bookmark_sign	mix16ninitOkt18.vim	/^        let g:bookmark_sign = '♥'$/;"	v
g:bookmark_highlight_lines	mix16ninitOkt18.vim	/^        let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_save_per_working_dir	mix16ninitOkt18.vim	/^        let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_auto_save	mix16ninitOkt18.vim	/^        let g:bookmark_auto_save = 1$/;"	v
<Leader>m	mix16ninitOkt18.vim	/^        nmap <Leader>m <Plug>BookmarkShowAll$/;"	m
g:bookmark_no_default_key_mappings	mix16ninitOkt18.vim	/^        let g:bookmark_no_default_key_mappings = 1$/;"	v
BookmarkMapKeys	mix16ninitOkt18.vim	/^        function! BookmarkMapKeys()$/;"	f
BookmarkUnmapKeys	mix16ninitOkt18.vim	/^        function! BookmarkUnmapKeys()$/;"	f
ErrorsToggle	mix16ninitOkt18.vim	/^        command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	mix16ninitOkt18.vim	/^        function! ErrorsToggle() $/;"	f
LocationToggle	mix16ninitOkt18.vim	/^        command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	mix16ninitOkt18.vim	/^        function! LocationToggle()$/;"	f
QFixToggle	mix16ninitOkt18.vim	/^        command! -bang -nargs=? QFixToggle call QFixToggle(<bang>0)$/;"	c
QFixToggle	mix16ninitOkt18.vim	/^        function! QFixToggle(forced)$/;"	f
<F7>	mix16ninitOkt18.vim	/^        map          <F7>       :FirstOrNextInList<CR>$/;"	m
<F7>	mix16ninitOkt18.vim	/^        imap         <F7>       <C-O><F7>$/;"	m
<S-F7>	mix16ninitOkt18.vim	/^        map          <S-F7>      :PrevInList<CR>$/;"	m
<S-F7>	mix16ninitOkt18.vim	/^        imap         <S-F7>      <C-O><S-F7>$/;"	m
<C-F7>	mix16ninitOkt18.vim	/^        map          <C-F7>      :CurInList<CR>$/;"	m
<C-F7>	mix16ninitOkt18.vim	/^        imap         <C-F7>      <C-O><C-F7>$/;"	m
<F9>	mix16ninitOkt18.vim	/^        nmap <silent> <F9> :QFixToggle<cr>$/;"	m
<S-F9>	mix16ninitOkt18.vim	/^        map         <S-F9>     :copen<CR>$/;"	m
<S-F9>	mix16ninitOkt18.vim	/^        imap        <S-F9>     <C-O><C-F9>$/;"	m
<C-F9>	mix16ninitOkt18.vim	/^        map         <C-F9>     :cclose<CR>$/;"	m
<C-F9>	mix16ninitOkt18.vim	/^        imap        <C-F9>     <C-O><C-F9>$/;"	m
<F5>	mix16ninitOkt18.vim	/^        nmap <F5> <Plug>(qf_qf_toggle)$/;"	m
<F6>	mix16ninitOkt18.vim	/^        nmap <F6> <Plug>(qf_loc_toggle)$/;"	m
<LocalLeader>b	mix16ninitOkt18.vim	/^        nnoremap <LocalLeader>b :cprev<cr>zvzz$/;"	m
<LocalLeader>n	mix16ninitOkt18.vim	/^        nnoremap <LocalLeader>n :cnext<cr>zvzz$/;"	m
<f8>	mix16ninitOkt18.vim	/^        nmap <silent> <f8> :LocationToggle<cr>$/;"	m
<S-F8>	mix16ninitOkt18.vim	/^        map         <S-F8>     :lopen<CR>$/;"	m
<S-F8>	mix16ninitOkt18.vim	/^        imap        <S-F8>     <C-O><C-F8>$/;"	m
<C-F8>	mix16ninitOkt18.vim	/^        map         <C-F8>     :lclose<CR>$/;"	m
<C-F8>	mix16ninitOkt18.vim	/^        imap        <C-F8>     <C-O><S-F8>$/;"	m
<Leader>n	mix16ninitOkt18.vim	/^        nnoremap <Leader>n :lnext<cr>zvzz$/;"	m
<Leader>b	mix16ninitOkt18.vim	/^        nnoremap <Leader>b :lprev<cr>zvzz$/;"	m
<LocalLeader>w	mix16ninitOkt18.vim	/^        nnoremap <LocalLeader>w :%s#\\<<C-r>=expand("<cword>")<CR>\\>#$/;"	m
<LocalLeader>z	mix16ninitOkt18.vim	/^        nnoremap <LocalLeader>z :%s#\\<<C-r>=getline(".")<CR>\\>#$/;"	m
<Esc><Esc>	mix16ninitOkt18.vim	/^        nnoremap <silent> <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>$/;"	m
n	mix16ninitOkt18.vim	/^        nmap <silent> n nzz$/;"	m
N	mix16ninitOkt18.vim	/^        nmap <silent> N Nzz$/;"	m
g*	mix16ninitOkt18.vim	/^        nmap <silent> g* g*zz$/;"	m
g#	mix16ninitOkt18.vim	/^        nmap <silent> g# g#zz$/;"	m
*	mix16ninitOkt18.vim	/^        vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
#	mix16ninitOkt18.vim	/^        vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
<Leader>l	mix16ninitOkt18.vim	/^        nnoremap <Leader>l :lgrep -R <cword> .<cr>$/;"	m
<Leader>g	mix16ninitOkt18.vim	/^        nnoremap <Leader>g :execute "vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>a	mix16ninitOkt18.vim	/^        nnoremap <Leader>a :Ack <cword> .<cr>$/;"	m
Find	mix16ninitOkt18.vim	/^        function! Find(name)$/;"	f
Find	mix16ninitOkt18.vim	/^        command! -nargs=1 Find :call Find("<args>")$/;"	c
<F3>	mix16ninitOkt18.vim	/^        noremap  <F3> :NERDTreeToggle<cr>$/;"	m
<F3>	mix16ninitOkt18.vim	/^        inoremap <F3> <esc>:NERDTreeToggle<cr>$/;"	m
ps_nerdtree	mix16ninitOkt18.vim	/^        augroup ps_nerdtree$/;"	a
NERDTreeHighlightCursorline	mix16ninitOkt18.vim	/^        let NERDTreeHighlightCursorline = 1$/;"	v
NERDTreeIgnore	mix16ninitOkt18.vim	/^        let NERDTreeIgnore = ['\\~$', '.*\\.pyc$', 'pip-log\\.txt$', 'whoosh_index',$/;"	v
NERDTreeMinimalUI	mix16ninitOkt18.vim	/^        let NERDTreeMinimalUI = 1$/;"	v
NERDTreeDirArrows	mix16ninitOkt18.vim	/^        let NERDTreeDirArrows = 1$/;"	v
NERDChristmasTree	mix16ninitOkt18.vim	/^        let NERDChristmasTree = 1$/;"	v
NERDTreeChDirMode	mix16ninitOkt18.vim	/^        let NERDTreeChDirMode = 2$/;"	v
NERDTreeMapJumpFirstChild	mix16ninitOkt18.vim	/^        let NERDTreeMapJumpFirstChild = 'gK'$/;"	v
ft_fugitive	mix16ninitOkt18.vim	/^        augroup ft_fugitive$/;"	a
<leader>gd	mix16ninitOkt18.vim	/^                nnoremap <leader>gd :Gdiff<cr>$/;"	m
<leader>gs	mix16ninitOkt18.vim	/^                nnoremap <leader>gs :Gstatus<cr>$/;"	m
<leader>gw	mix16ninitOkt18.vim	/^                nnoremap <leader>gw :Gwrite<cr>$/;"	m
<leader>ga	mix16ninitOkt18.vim	/^                nnoremap <leader>ga :Gadd<cr>$/;"	m
<leader>gb	mix16ninitOkt18.vim	/^                nnoremap <leader>gb :Gblame<cr>$/;"	m
<leader>gco	mix16ninitOkt18.vim	/^                nnoremap <leader>gco :Gcheckout<cr>$/;"	m
<leader>gci	mix16ninitOkt18.vim	/^                nnoremap <leader>gci :Gcommit<cr>$/;"	m
<leader>gm	mix16ninitOkt18.vim	/^                nnoremap <leader>gm :Gmove<cr>$/;"	m
<leader>gr	mix16ninitOkt18.vim	/^                nnoremap <leader>gr :Gremove<cr>$/;"	m
<leader>gl	mix16ninitOkt18.vim	/^                nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \\|<cr>$/;"	m
DiffFoldLevel	mix16ninitOkt18.vim	/^         function! DiffFoldLevel()$/;"	f
ft_diff	mix16ninitOkt18.vim	/^         augroup ft_diff$/;"	a
DiffOrig	mix16ninitOkt18.vim	/^                command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis \\ | wincmd p | diffthis$/;"	c
dg	mix16ninitOkt18.vim	/^                vmap            dg             :diffget<CR>$/;"	m
dp	mix16ninitOkt18.vim	/^                vmap            dp             :diffput<CR>$/;"	m
<leader>d	mix16ninitOkt18.vim	/^                nnoremap <silent> <expr> <leader>d ":\\<C-u>".(&diff?"diffoff":"diffthis")."\\<CR>"$/;"	m
do	mix16ninitOkt18.vim	/^                nnoremap do :diffoff!<cr>$/;"	m
Diffoff	mix16ninitOkt18.vim	/^                command! Diffoff        diffoff | setlocal nowrap$/;"	c
<C-F10>	mix16ninitOkt18.vim	/^        noremap <C-F10> :SyntasticCheck<CR>$/;"	m
g:syntastic_always_populate_loc_list	mix16ninitOkt18.vim	/^        let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	mix16ninitOkt18.vim	/^        let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	mix16ninitOkt18.vim	/^        let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	mix16ninitOkt18.vim	/^        let g:syntastic_check_on_wq = 0$/;"	v
g:systastic_python_checkers	mix16ninitOkt18.vim	/^        let g:systastic_python_checkers = ['pylint', 'python']$/;"	v
g:syntastic_mode_map	mix16ninitOkt18.vim	/^        let g:syntastic_mode_map = {'mode': 'active'}$/;"	v
g:syntastic_python_pylint_quiet_messages	mix16ninitOkt18.vim	/^        let g:syntastic_python_pylint_quiet_messages = {}$/;"	v
g:syntastic_enable_signs	mix16ninitOkt18.vim	/^        let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_auto_jump	mix16ninitOkt18.vim	/^        let g:syntastic_auto_jump = 1$/;"	v
g:syntastic_enable_highlighting	mix16ninitOkt18.vim	/^        let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_echo_current_error	mix16ninitOkt18.vim	/^        let g:syntastic_echo_current_error  = 1$/;"	v
g:syntastic_javascript_checkers	mix16ninitOkt18.vim	/^        let g:syntastic_javascript_checkers=['jshint']$/;"	v
g:syntastic_php_checkers	mix16ninitOkt18.vim	/^        let g:syntastic_php_checkers=['php']$/;"	v
g:syntastic_css_checkers	mix16ninitOkt18.vim	/^        let g:syntastic_css_checkers=['csslint']$/;"	v
g:syntastic_check_on_w	mix16ninitOkt18.vim	/^        let g:syntastic_check_on_w = 1$/;"	v
wordUnderCursor	mix16ninitOkt18.vim	/^        let wordUnderCursor = expand("<cword>")$/;"	v
currentLine	mix16ninitOkt18.vim	/^        let currentLine   = getline(".")$/;"	v
OnlineDoc8	mix16ninitOkt18.vim	/^        function! OnlineDoc8()$/;"	f
<F10>	mix16ninitOkt18.vim	/^        map <F10> :call OnlineDoc8()<CR>$/;"	m
OpenUrlUnderCursor	mix16ninitOkt18.vim	/^        function! OpenUrlUnderCursor()$/;"	f
<leader>o	mix16ninitOkt18.vim	/^        nmap <leader>o :call OpenUrlUnderCursor()<CR>$/;"	m
w:persistent_cursorline	mix16ninitOkt18.vim	/^        let w:persistent_cursorline = 1$/;"	v
g:indentLine_color_term	mix16ninitOkt18.vim	/^        let g:indentLine_color_term = 133$/;"	v
g:airline_theme	mix16ninitOkt18.vim	/^        let g:airline_theme='powerlineish'$/;"	v
g:ctags_statusline	mix16ninitOkt18.vim	/^        let g:ctags_statusline=1$/;"	v
generate_tags	mix16ninitOkt18.vim	/^        let generate_tags=1$/;"	v
g:airline#extensions#tabline#enabled	mix16ninitOkt18.vim	/^        let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#fnamemod	mix16ninitOkt18.vim	/^        let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#buffer_min_count	mix16ninitOkt18.vim	/^        let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline_section_c	mix16ninitOkt18.vim	/^        let g:airline_section_c = '%{strftime("%D - %H:%M")}'$/;"	v
g:airline_theme	mix16ninitOkt18.vim	/^        let g:airline_theme='light'$/;"	v
g:airline_powerline_fonts	mix16ninitOkt18.vim	/^        let g:airline_powerline_fonts=1$/;"	v
g:airline#extensions#branch#enabled	mix16ninitOkt18.vim	/^        let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#whitespace#enabled	mix16ninitOkt18.vim	/^        let g:airline#extensions#whitespace#enabled = 1$/;"	v
g:airline#extensions#hunks#non_zero_only	mix16ninitOkt18.vim	/^        let g:airline#extensions#hunks#non_zero_only = 1$/;"	v
<C-J>	mix16ninitOkt18.vim	/^        map <C-J> <C-W>j<C-W>_$/;"	m
<C-K>	mix16ninitOkt18.vim	/^        map <C-K> <C-W>k<C-W>_$/;"	m
<C-H>	mix16ninitOkt18.vim	/^        map <C-H> <C-W>h<C-W>|$/;"	m
<C-L>	mix16ninitOkt18.vim	/^        map <C-L> <C-W>l<C-W>|$/;"	m
<C-=>	mix16ninitOkt18.vim	/^        map <C-=> <C-W>=$/;"	m
<S-j>	mix16ninitOkt18.vim	/^        nnoremap <S-j> :bn<cr>$/;"	m
<S-k>	mix16ninitOkt18.vim	/^        nnoremap <S-k> :bp<cr>$/;"	m
<m-j>	mix16ninitOkt18.vim	/^        nnoremap <m-j> :bn<cr>$/;"	m
<m-k>	mix16ninitOkt18.vim	/^        nnoremap <m-k> :bp<cr>$/;"	m
<C-up>	mix16ninitOkt18.vim	/^        noremap <expr> <C-up> (line('w0') <= 1         ? 'k' : "\\<C-y>")$/;"	m
<C-down>	mix16ninitOkt18.vim	/^        noremap <expr> <C-down> (line('w$') >= line('$') ? 'j' : "\\<C-e>")$/;"	m
gv	mix16ninitOkt18.vim	/^        nnoremap gv `[v`]$/;"	m
zh	mix16ninitOkt18.vim	/^        nnoremap zh mzzt10<c-u>`z$/;"	m
<C-_>	mix16ninitOkt18.vim	/^        inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
g:closetag_shortcut	mix16ninitOkt18.vim	/^        let g:closetag_shortcut = '>'$/;"	v
g:closetag_filenames	mix16ninitOkt18.vim	/^        let g:closetag_filenames = '*.html,*.xhtml,*.phtml'$/;"	v
sc	mix16ninitOkt18.vim	/^        nnoremap sc :Scratch<CR>$/;"	m
s;	mix16ninitOkt18.vim	/^        nnoremap s; :ScratchPreview<CR>$/;"	m
<F12>	mix16ninitOkt18.vim	/^        nnoremap <F12> :TagbarToggle<CR>$/;"	m
<F2>	mix16ninitOkt18.vim	/^        nnoremap <buffer> <F2> <Esc>:help <C-r><C-w><CR>$/;"	m
<S-F11>	mix16ninitOkt18.vim	/^        map             <S-F11>         :ShowHighlightGroup<CR>$/;"	m
<C-F11>	mix16ninitOkt18.vim	/^        map             <C-F11>         :ShowSyntaxStack<CR>$/;"	m
<M-s>	mix16ninitOkt18.vim	/^        nmap <M-s> vas $/;"	m
<M-o>	mix16ninitOkt18.vim	/^             nmap <M-o> vio $/;"	m
<M-i>	mix16ninitOkt18.vim	/^             nmap <M-i> vao $/;"	m
<M-0>	mix16ninitOkt18.vim	/^        nmap <M-0> vib $/;"	m
<M-9>	mix16ninitOkt18.vim	/^        nmap <M-9> vab $/;"	m
<M-b>	mix16ninitOkt18.vim	/^             nmap <M-b> vaB $/;"	m
<M-8>	mix16ninitOkt18.vim	/^        nmap <M-8> vaf $/;"	m
<M-7>	mix16ninitOkt18.vim	/^        nmap <M-7> vif $/;"	m
<M-q>	mix16ninitOkt18.vim	/^             nmap <M-q> viq $/;"	m
<M-6>	mix16ninitOkt18.vim	/^        nmap <M-6> vip $/;"	m
;e	mix16ninitOkt18.vim	/^        nnoremap ;e :ls<CR>:b<Space>$/;"	m
$q	mix16ninitOkt18.vim	/^        inoremap $q ''<esc>i$/;"	m
$e	mix16ninitOkt18.vim	/^        inoremap $e ""<esc>i$/;"	m
<PageUp>	mix16ninitOkt18.vim	/^        map <PageUp> kzz$/;"	m
<PageDown>	mix16ninitOkt18.vim	/^        map <PageDown> jzz$/;"	m
j	mix16ninitOkt18.vim	/^        map j jzz$/;"	m
k	mix16ninitOkt18.vim	/^        map k kzz$/;"	m
<PageUp>	mix16ninitOkt18.vim	/^        imap <PageUp> kzz$/;"	m
<PageDown>	mix16ninitOkt18.vim	/^        imap <PageDown> jzz$/;"	m
st	mix16ninitOkt18.vim	/^        map st :set tw=70<cr>v<S-}>gq<End>$/;"	m
\\	mix16ninitOkt18.vim	/^        noremap \\\\ #*$/;"	m
S	mix16ninitOkt18.vim	/^        noremap S diw"0P$/;"	m
%%	mix16ninitOkt18.vim	/^        nmap %% $>io$/;"	m
$$	mix16ninitOkt18.vim	/^        nmap $$ $<io$/;"	m
vv	mix16ninitOkt18.vim	/^        map vv :let @\/=expand("<cword>") <BAR> split <BAR> execute 'normal n'<CR>$/;"	m
late	mix16ninitOkt18.vim	/^                augroup late-verbose$/;"	a
Git2GREP	mix16ninitOkt18.vim	/^        fun! Git2GREP(...)$/;"	f
GGR	mix16ninitOkt18.vim	/^        command! -nargs=? GGR call Git2GREP(<f-args>)$/;"	c
ScrollOtherWindow	mix16ninitOkt18.vim	/^        fun! ScrollOtherWindow(dir)$/;"	f
<C-M-Down>	mix16ninitOkt18.vim	/^        nmap <silent> <C-M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<C-M-Up>	mix16ninitOkt18.vim	/^        nmap <silent> <C-M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
g:AutoClosePairs	mix16ninitOkt18.vim	/^        let g:AutoClosePairs = " \\""$/;"	v
g:AutoClosePairs_del	mix16ninitOkt18.vim	/^        let g:AutoClosePairs_del = "'"$/;"	v
g:AutoCloseProtectedRegions	mix16ninitOkt18.vim	/^        let g:AutoCloseProtectedRegions = ["Comment", "String", "Character"]$/;"	v
Surround	mix16ninitOkt18.vim	/^        fun! Surround(s1, s2) range$/;"	f
;'	mix16ninitOkt18.vim	/^        vnoremap ;' :call Surround('"', '"')<CR>$/;"	m
;9	mix16ninitOkt18.vim	/^        vnoremap ;9 :call Surround('(', ')')<CR>$/;"	m
;[	mix16ninitOkt18.vim	/^        vnoremap ;[ :call Surround('[', ']')<CR>$/;"	m
;b	mix16ninitOkt18.vim	/^        vnoremap ;b :call Surround('{', '}')<CR>$/;"	m
g:switch_mapping	mix16ninitOkt18.vim	/^        let g:switch_mapping = "<leader>-"$/;"	v
<Leader>s	mix16ninitOkt18.vim	/^        nmap <Leader>s  <Plug>ReplaceWithRegisterOperator$/;"	m
<Leader>r	mix16ninitOkt18.vim	/^        nmap <Leader>r <Plug>ReplaceWithRegisterLine$/;"	m
;d	mix16ninitOkt18.vim	/^        nnoremap ;d mayiw`a:exe "!dict -P - $(echo " . @" . "\\| recode latin1..utf-8)"<CR>$/;"	m
;d	mix16ninitOkt18.vim	/^        nnoremap ;d mayiw`a:exe "!dict -P - $(echo " . @" . "\\| recode latin1..utf-8)"<CR>$/;"	m
g:qf_mapping_ack_style	mix16ninitOkt18.vim	/^        let g:qf_mapping_ack_style = 1$/;"	v
g:qf_window_bottom	mix16ninitOkt18.vim	/^        let g:qf_window_bottom = 0$/;"	v
g:qf_auto_open_loclist	mix16ninitOkt18.vim	/^        let g:qf_auto_open_loclist = 0$/;"	v
g:qf_max_height	mix16ninitOkt18.vim	/^        let g:qf_max_height = 8$/;"	v
g:qf_nowrap	mix16ninitOkt18.vim	/^        let g:qf_nowrap = 1$/;"	v
g:vim_action_ag_escape_chars	mix16ninitOkt18.vim	/^        let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\\\|'$/;"	v
<C-o>	mix16ninitOkt18.vim	/^        inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-k>	mix16ninitOkt18.vim	/^        inoremap <silent> <C-k> <C-x><C-k>$/;"	m
<C-d>	mix16ninitOkt18.vim	/^        inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-f>	mix16ninitOkt18.vim	/^        inoremap <silent> <C-f> <C-x><C-f>$/;"	m
<C-l>	mix16ninitOkt18.vim	/^        inoremap <silent> <C-l> <C-x><C-l>$/;"	m
<C-b>	mix16ninitOkt18.vim	/^        imap <C-b>    <Plug>(neosnippet_expand_or_jump)$/;"	m
<CR>	mix16ninitOkt18.vim	/^        inoremap <silent><CR> <C-r>=pumvisible()?"\\<lt>C-y>":"\\<lt>CR>"<CR>$/;"	m
g:UltiSnipsExpandTrigger	mix16ninitOkt18.vim	/^        let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"$/;"	v
g:UltiSnipsJumpForwardTrigger	mix16ninitOkt18.vim	/^        let g:UltiSnipsJumpForwardTrigger	= "<c-q>"$/;"	v
g:UltiSnipsRemoveSelectModeMappings	mix16ninitOkt18.vim	/^        let g:UltiSnipsRemoveSelectModeMappings = 0$/;"	v
<c-u>	mix16ninitOkt18.vim	/^        inoremap <silent> <c-u> <c-r>=cm#sources#ultisnips#trigger_or_popup("\\<Plug>(ultisnips_expand)")<cr>$/;"	m
<TAB>	mix16ninitOkt18.vim	/^        imap <expr><TAB>$/;"	m
g:neocomplete#enable_at_startup	mix16ninitOkt18.vim	/^        let g:neocomplete#enable_at_startup = 1$/;"	v
g:neosnippet#disable_runtime_snippets	mix16ninitOkt18.vim	/^        let g:neosnippet#disable_runtime_snippets = 1$/;"	v
g:neosnippet#enable_snipmate_compatibility	mix16ninitOkt18.vim	/^        let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
<C-b>	mix16ninitOkt18.vim	/^        imap <C-b>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<TAB>	mix16ninitOkt18.vim	/^        imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
;n	mix16ninitOkt18.vim	/^        nnoremap <silent> ;n i<c-r>=neosnippet#expand('test')<cr>$/;"	m
;m	mix16ninitOkt18.vim	/^        nnoremap <silent> ;m :call neosnippet#expand('test')<cr>$/;"	m
<C-q>	mix16ninitOkt18.vim	/^        imap <C-q>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<Leader>c	mix16ninitOkt18.vim	/^        vnoremap  <Leader>c "ky:ThesaurusQueryReplace <C-r>k<CR>$/;"	m
<Leader>c	mix16ninitOkt18.vim	/^        nnoremap  <Leader>c :ThesaurusQueryReplaceCurrentWord<CR>$/;"	m
<LocalLeader>c	mix16ninitOkt18.vim	/^        nnoremap <LocalLeader>c :ThesaurusQueryReplaceCurrentWord<CR>$/;"	m
<LocalLeader>c	mix16ninitOkt18.vim	/^        vnoremap <LocalLeader>c "ky:ThesaurusQueryReplace <C-r>k<CR>$/;"	m
g:clang_auto_select	n0Neo.vim	/^            let g:clang_auto_select = 0 " 0\/1\/2 auto select first entry in popup menu$/;"	v
g:clang_complete_auto	n0Neo.vim	/^            let g:clang_complete_auto = 1 " auto complete after -> . ::$/;"	v
g:clang_complete_copen	n0Neo.vim	/^            let g:clang_complete_copen = 1 " 1: open quickfix window on error$/;"	v
g:clang_hl_errors	n0Neo.vim	/^            let g:clang_hl_errors = 1 " highlight warnings and errors$/;"	v
g:clang_periodic_quickfix	n0Neo.vim	/^            let g:clang_periodic_quickfix = 0 " periodically update quickfix$/;"	v
g:clang_snippets	n0Neo.vim	/^            let g:clang_snippets = 1$/;"	v
g:clang_snippets_engine	n0Neo.vim	/^            let g:clang_snippets_engine = "ultisnips"$/;"	v
g:clang_conceal_snippets	n0Neo.vim	/^            let g:clang_conceal_snippets = 1$/;"	v
g:clang_trailing_placeholder	n0Neo.vim	/^            let g:clang_trailing_placeholder = 0 " for clang_complete snippet engine$/;"	v
g:clang_close_preview	n0Neo.vim	/^            let g:clang_close_preview = 0 " auto close preview window after completion$/;"	v
g:clang_exec	n0Neo.vim	/^            let g:clang_exec = "clang" " name or path of clang executable.$/;"	v
g:clang_user_options	n0Neo.vim	/^            let g:clang_user_options =$/;"	v
g:clang_auto_user_options	n0Neo.vim	/^            let g:clang_auto_user_options = "path, .clang_complete, clang"$/;"	v
g:clang_use_library	n0Neo.vim	/^            let g:clang_use_library = 1$/;"	v
g:clang_library_path	n0Neo.vim	/^            let g:clang_library_path = "\/usr\/lib\/"$/;"	v
g:clang_sort_algo	n0Neo.vim	/^            let g:clang_sort_algo = "priority"$/;"	v
g:clang_complete_macros	n0Neo.vim	/^            let g:clang_complete_macros = 1$/;"	v
g:clang_complete_patterns	n0Neo.vim	/^            let g:clang_complete_patterns = 1$/;"	v
g:neocomplcache_clang_use_library	n0Neo.vim	/^            let g:neocomplcache_clang_use_library = 1 " use clang library$/;"	v
g:neocomplcache_clang_library_path	n0Neo.vim	/^            let g:neocomplcache_clang_library_path = '\/usr\/lib\/'$/;"	v
g:neocomplcache_clang_executable_path	n0Neo.vim	/^            let g:neocomplcache_clang_executable_path = '\/usr\/bin\/clang'$/;"	v
g:neocomplcache_clang_macros	n0Neo.vim	/^            let g:neocomplcache_clang_macros = 1 " -code-completion-macros option$/;"	v
g:neocomplcache_clang_patterns	n0Neo.vim	/^            let g:neocomplcache_clang_patterns = 1 " -code-completion-patterns option$/;"	v
g:neocomplcache_clang_auto_options	n0Neo.vim	/^            let g:neocomplcache_clang_auto_options = "path, .clang_complete, clang"$/;"	v
g:neocomplcache_clang_user_options	n0Neo.vim	/^            let g:neocomplcache_clang_user_options = '-std=gnu99 -stdlib=libc'$/;"	v
g:neocomplcache_clang_debug	n0Neo.vim	/^            let g:neocomplcache_clang_debug = 0 " enable debug message.$/;"	v
g:acp_enableAtStartup	n0Neo.vim	/^        let g:acp_enableAtStartup = "pumvisible() ? "\\" : "\\0"pumvisible() ? "\\" : "\\$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	n0Neo.vim	/^        let g:neocomplete#sources#syntax#min_keyword_length = 3"$/;"	v
g:neocomplete#sources#dictionary#dictionaries	n0Neo.vim	/^        let g:neocomplete#sources#dictionary#dictionaries = {$/;"	v
g:neocomplete#keyword_patterns	n0Neo.vim	/^                let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	n0Neo.vim	/^        let g:neocomplete#keyword_patterns['default'] = '\\h\\w*'$/;"	v
<C-g>	n0Neo.vim	/^        inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-l>	n0Neo.vim	/^        inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
<CR>	n0Neo.vim	/^        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
my_cr_function	n0Neo.vim	/^        function! s:my_cr_function()$/;"	f
<TAB>	n0Neo.vim	/^        inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<C-h>	n0Neo.vim	/^        inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<BS>	n0Neo.vim	/^        inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
g:neocomplete#enable_at_startup	n1Neo.vim	/^    let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_smart_case	n1Neo.vim	/^    let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	n1Neo.vim	/^    let g:neocomplete#sources#syntax#min_keyword_length = 3$/;"	v
g:neocomplete#lock_buffer_name_pattern	n1Neo.vim	/^    let g:neocomplete#lock_buffer_name_pattern = '\\*ku\\*'$/;"	v
g:neocomplete#sources#dictionary#dictionaries	n1Neo.vim	/^    let g:neocomplete#sources#dictionary#dictionaries = {$/;"	v
g:neocomplete#keyword_patterns	n1Neo.vim	/^        let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	n1Neo.vim	/^    let g:neocomplete#keyword_patterns['default'] = '\\h\\w*'$/;"	v
<CR>	n1Neo.vim	/^    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
my_cr_function	n1Neo.vim	/^    function! s:my_cr_function()$/;"	f
g:neocomplete#enable_auto_select	n1Neo.vim	/^    let g:neocomplete#enable_auto_select = 1$/;"	v
g:neocomplete#enable_refresh_always	n1Neo.vim	/^    let g:neocomplete#enable_refresh_always = 1$/;"	v
g:neocomplete#sources#omni#input_patterns	n1Neo.vim	/^      let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#force_omni_input_patterns	n1Neo.vim	/^      let g:neocomplete#force_omni_input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	n1Neo.vim	/^    let g:neocomplete#sources#omni#input_patterns.perl =$/;"	v
<TAB>	n1Neo.vim	/^    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?$/;"	m
g:neosnippet#enable_snipmate_compatibility	n1Neo.vim	/^    let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosnippet#snippets_directory	n1Neo.vim	/^    let g:neosnippet#snippets_directory = '$HOME\/vimfiles\/bundle\/vim-snippets\/snippets, $HOME\/snippets'$/;"	v
neocomplete_mode	n2Neo.vim	/^ let neocomplete_mode = 1$/;"	v
g:acp_enableAtStartup	n2Neo.vim	/^  let g:acp_enableAtStartup = 0$/;"	v
g:neocomplete#data_directory	n2Neo.vim	/^  let g:neocomplete#data_directory = "~\/.vim\/tmp\/swap"$/;"	v
g:neocomplete#enable_at_startup	n2Neo.vim	/^  let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_smart_case	n2Neo.vim	/^  let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	n2Neo.vim	/^  let g:neocomplete#sources#syntax#min_keyword_length = 2$/;"	v
g:neocomplete#lock_buffer_name_pattern	n2Neo.vim	/^  let g:neocomplete#lock_buffer_name_pattern = '\\*ku\\*'$/;"	v
g:neocomplete#sources#dictionary#dictionaries	n2Neo.vim	/^  let g:neocomplete#sources#dictionary#dictionaries = {$/;"	v
g:neocomplete#keyword_patterns	n2Neo.vim	/^      let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	n2Neo.vim	/^  let g:neocomplete#keyword_patterns['default'] = '\\h\\w*'$/;"	v
<C-g>	n2Neo.vim	/^  inoremap <expr><C-g>  neocomplete#undo_completion()$/;"	m
<C-l>	n2Neo.vim	/^  inoremap <expr><C-l>  neocomplete#complete_common_string()$/;"	m
<BS>	n2Neo.vim	/^  inoremap <expr><BS>   neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-y>	n2Neo.vim	/^  inoremap <expr><C-y>  neocomplete#close_popup()$/;"	m
<C-u>	n2Neo.vim	/^  inoremap <expr><C-u>  neocomplete#close_popup() . "\\<C-u>"$/;"	m
<C-h>	n2Neo.vim	/^  inoremap <expr><C-h>  neocomplete#smart_close_popup() . "\\<C-w>"$/;"	m
<C-i>	n2Neo.vim	/^  imap <C-i>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<CR>	n2Neo.vim	/^  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
my_cr_function	n2Neo.vim	/^  function! s:my_cr_function()$/;"	f
g:neocomplete#sources#omni#input_patterns	n2Neo.vim	/^    let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	n2Neo.vim	/^  let g:neocomplete#sources#omni#input_patterns.go = '[^.[:digit:] *\\t]\\.\\w*'$/;"	v
g:neosnippet#enable_snipmate_compatibility	n2Neo.vim	/^  let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosnippet#snippets_directory	n2Neo.vim	/^  let g:neosnippet#snippets_directory='~\/.vim\/bundle\/vim-snippets\/snippets'$/;"	v
g:neocomplete#force_overwrite_completefunc	n2Neo.vim	/^  let g:neocomplete#force_overwrite_completefunc = 1$/;"	v
RubyCompletion	n2Neo.vim	/^  augroup RubyCompletion$/;"	a
<D-p>	n3Neo.vim	/^nnoremap <silent> <D-p> :<C-u>Unite -start-insert file_rec\/async:!<CR>$/;"	m
<D-u>	n3Neo.vim	/^nnoremap <silent> <D-u> :<C-u>Unite -quick-match buffer<CR>$/;"	m
<C-t>	n3Neo.vim	/^nnoremap <silent> <C-t> :<C-u>Unite -quick-match buffer tab<CR>$/;"	m
g:unite_source_history_yank_enable	n3Neo.vim	/^let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_source_history_yank_save_clipboard	n3Neo.vim	/^let g:unite_source_history_yank_save_clipboard = 1$/;"	v
<D-y>	n3Neo.vim	/^nnoremap <silent> <D-y> :<C-u>Unite history\/yank<CR>$/;"	m
<D-o>	n3Neo.vim	/^nnoremap <silent> <D-o> :<C-u>Unite file_mru<CR>$/;"	m
g:neocomplete#enable_at_startup	n3Neo.vim	/^  let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_ignore_case	n3Neo.vim	/^  let g:neocomplete#enable_ignore_case = 1$/;"	v
g:neocomplete#enable_smart_case	n3Neo.vim	/^  let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#keyword_patterns	n3Neo.vim	/^    let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	n3Neo.vim	/^  let g:neocomplete#keyword_patterns._ = '\\h\\w*'$/;"	v
g:neocomplcache_enable_at_startup	n3Neo.vim	/^  let g:neocomplcache_enable_at_startup = 1$/;"	v
g:neocomplcache_enable_ignore_case	n3Neo.vim	/^  let g:neocomplcache_enable_ignore_case = 1$/;"	v
g:neocomplcache_enable_smart_case	n3Neo.vim	/^  let g:neocomplcache_enable_smart_case = 1$/;"	v
g:neocomplcache_keyword_patterns	n3Neo.vim	/^    let g:neocomplcache_keyword_patterns = {}$/;"	v
g:neocomplcache_keyword_patterns	n3Neo.vim	/^  let g:neocomplcache_keyword_patterns._ = '\\h\\w*'$/;"	v
g:neocomplcache_enable_camel_case_completion	n3Neo.vim	/^  let g:neocomplcache_enable_camel_case_completion = 1$/;"	v
g:neocomplcache_enable_underbar_completion	n3Neo.vim	/^  let g:neocomplcache_enable_underbar_completion = 1$/;"	v
]c	nAlt.vim	/^    nmap ]c <Plug>GitGutterNextHunk$/;"	m
[c	nAlt.vim	/^    nmap [c <Plug>GitGutterPrevHunk$/;"	m
<Leader>hs	nAlt.vim	/^    nmap <Leader>hs <Plug>GitGutterStageHunk$/;"	m
<Leader>hu	nAlt.vim	/^    nmap <Leader>hu <Plug>GitGutterUndoHunk$/;"	m
g:ycm_semantic_triggers	nAlt.vim	/^      let g:ycm_semantic_triggers = {}$/;"	v
g:EclimCompletionMethod	nAlt.vim	/^    let g:EclimCompletionMethod = 'omnifunc'$/;"	v
g:ycm_key_list_select_completion	nAlt.vim	/^    let g:ycm_key_list_select_completion=[]$/;"	v
g:ycm_key_list_previous_completion	nAlt.vim	/^    let g:ycm_key_list_previous_completion=[]$/;"	v
g:ycm_key_invoke_completion	nAlt.vim	/^    let g:ycm_key_invoke_completion = '<C-b>'$/;"	v
g:UltiSnipsExpandTrigger	nAlt.vim	/^    let g:UltiSnipsExpandTrigger="<c-l>"$/;"	v
g:UltiSnipsJumpForwardTrigger	nAlt.vim	/^    let g:UltiSnipsJumpForwardTrigger="<c-l>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	nAlt.vim	/^    let g:UltiSnipsJumpBackwardTrigger="<c-m>"$/;"	v
<C-J>	nAlt.vim	/^    map <C-J> <C-W>j<C-W>_$/;"	m
<C-K>	nAlt.vim	/^    map <C-K> <C-W>k<C-W>_$/;"	m
<C-H>	nAlt.vim	/^    map <C-H> <C-W>h<C-W>|$/;"	m
<C-L>	nAlt.vim	/^    map <C-L> <C-W>l<C-W>|$/;"	m
<C-=>	nAlt.vim	/^    map <C-=> <C-W>=$/;"	m
<TAB>	nAlt.vim	/^inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" :$/;"	m
<S-TAB>	nAlt.vim	/^inoremap <S-TAB> <C-p>$/;"	m
<C-]>	nAlt.vim	/^inoremap <silent> <C-]> <C-x><C-]>$/;"	m
<C-o>	nAlt.vim	/^inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-k>	nAlt.vim	/^inoremap <silent> <C-k> <C-x><C-k>$/;"	m
<C-d>	nAlt.vim	/^inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-u>	nAlt.vim	/^inoremap <silent> <C-u> <C-x><C-u>$/;"	m
<C-f>	nAlt.vim	/^inoremap <silent> <C-f> <C-x><C-f>$/;"	m
<C-l>	nAlt.vim	/^inoremap <silent> <C-l> <C-x><C-l>$/;"	m
g:neocomplete#sources#omni#input_patterns	nAlt.vim	/^    let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#force_omni_input_patterns	nAlt.vim	/^    let g:neocomplete#force_omni_input_patterns = {}$/;"	v
g:tq_mthesaur_file	nAlt.vim	/^let g:tq_mthesaur_file="~\/git\/aTest\/redVim\/dikt\/mthesaur.txt"$/;"	v
s:thesaurus_pat	nAlt.vim	/^let s:thesaurus_pat = "~\/git\/aTest\/redVim\/dikt\/.txt"$/;"	v
async	nAsync.vim	/^normalize async job control api for vim and neovim$/;"	m
handler	nAsync.vim	/^function! s:handler(job_id, data, event_type)$/;"	f
argv	nAsync.vim	/^    let argv = ['cmd', '\/c', 'dir c:\\ \/b']$/;"	v
argv	nAsync.vim	/^    let argv = ['bash', '-c', 'ls']$/;"	v
jobid	nAsync.vim	/^let jobid = async#job#start(argv, {$/;"	v
pid	nAsync.vim	/^let pid = async#job#pid(jobid)$/;"	v
yourplugin#job#start	nAsync.vim	/^function! yourplugin#job#start(cmd, opts) abort$/;"	f
yourplugin#job#stop	nAsync.vim	/^function! yourplugin#job#stop(jobid) abort$/;"	f
yourplugin#job#send	nAsync.vim	/^function! yourplugin#job#send(jobid, data) abort$/;"	f
yourplugin#job#wait	nAsync.vim	/^function! yourplugin#job#wait(jobids, ...) abort$/;"	f
LastMod	nAutoCmd.vim	/^        function! LastMod()$/;"	f
Shebang	nAutoCmd.vim	/^        augroup Shebang$/;"	a
<Leader>x	nCheetMap.vim	/^nnoremap <Leader>x :w | !% python -m json.tools$/;"	m
<Leader>x	nCheetMap.vim	/^nnoremap <Leader>x :w will be created then$/;"	m
<Leader>x	nCheetMap.vim	/^nnoremap <Leader>x :w <bar> !% python -m json.tools$/;"	m
>	nCheetMap.vim	/^nnoremap > dd$/;"	m
-	nCheetMap.vim	/^nnoremap - >$/;"	m
Myfunc	nCheetMap.vim	/^function! Myfunc() range$/;"	f
that	nCheetMap.vim	/^command that follows it for every matched pattern. In the following command,$/;"	c
ChangeToLocalDir	nCheetMap.vim	/^function! ChangeToLocalDir()$/;"	f
_c	nCheetMap.vim	/^nnoremap <expr> _c ChangeToLocalDir()$/;"	m
attribute:	nCheetMap.vim	/^map attribute:$/;"	m
<c-d>	nCheetScrap.vim	/^        imap <c-d> <esc>dd$/;"	m
<c-d>	nCheetScrap.vim	/^        imap <c-d> <esc>ddi$/;"	m
<space>	nCheetScrap.vim	/^        map <space> viw$/;"	m
<c-d>	nCheetScrap.vim	/^        map <c-d> dd$/;"	m
<space>	nCheetScrap.vim	/^        map <space> viw " Select word$/;"	m
-d	nCheetScrap.vim	/^        nnoremap -d dd$/;"	m
-c	nCheetScrap.vim	/^        nnoremap -c ddO$/;"	m
mapleader	nCheetScrap.vim	/^        let mapleader = ","$/;"	v
maplocalleader	nCheetScrap.vim	/^        let maplocalleader = "\\\\"$/;"	v
<leader>ev	nCheetScrap.vim	/^        nnoremap <leader>ev :splitMYVIMRC<cr>$/;"	m
<leader>e	nCheetScrap.vim	/^        nnoremap <leader>e :splitMYVIMRC<cr>$/;"	m
<leader>m	nCheetScrap.vim	/^        nnoremap <leader>m viw<esc>a"<esc>bi"<esc>lel$/;"	m
jj	nCheetScrap.vim	/^        inoremap jj <esc>$/;"	m
testgroup	nCheetScrap.vim	/^            augroup testgroup$/;"	a
testgroup	nCheetScrap.vim	/^            augroup testgroup$/;"	a
p	nCheetScrap.vim	/^            onoremap p i($/;"	m
p	nCheetScrap.vim	/^            onoremap p i($/;"	m
<leader>m	nCheetScrap.vim	/^            nnoremap <leader>m viw<esc>a"<esc>bi"<esc>lel$/;"	m
b	nCheetScrap.vim	/^            onoremap b \/return<cr>$/;"	m
gg/a<cr>	nCheetScrap.vim	/^        normal! gg\/a<cr>$/;"	m
/^==\+$<cr>:hlsearch<cr>kvg_	nCheetScrap.vim	/^        normal! \/^==\\+$<cr>:hlsearch<cr>kvg_$/;"	m
filetype_vim	nCheetScrap.vim	/^        augroup filetype_vim$/;"	a
b:hello	nCheetScrap.vim	/^        let b:hello = "world"$/;"	v
testgroup	nCheetScrap.vim	/^        augroup testgroup$/;"	a
Meow	nCheetScrap.vim	/^        function Meow()$/;"	f
GetMeow	nCheetScrap.vim	/^        function GetMeow()$/;"	f
TextwidthIsTooWide	nCheetScrap.vim	/^        function TextwidthIsTooWide()$/;"	f
DisplayName	nCheetScrap.vim	/^        function DisplayName(name)$/;"	f
UnscopedDisplayName	nCheetScrap.vim	/^        function UnscopedDisplayName(name)$/;"	f
Varg	nCheetScrap.vim	/^        function Varg(...)$/;"	f
Varg2	nCheetScrap.vim	/^        function Varg2(foo, ...)$/;"	f
Assign	nCheetScrap.vim	/^        function Assign(foo)$/;"	f
AssignGood	nCheetScrap.vim	/^        function AssignGood(foo)$/;"	f
ggdd	nCheetScrap.vim	/^        normal ggdd$/;"	m
G	nCheetScrap.vim	/^        normal! G$/;"	m
leader	nCheetScrap.vim	/^        let leader = "<space>"$/;"	v
leader	nCheetScrap.vim	/^        let leader = ","$/;"	v
nar	nCheetVimL.vim	/^        let nar = "hello"$/;"	v
name	nCheetVimL.vim	/^        let name = "John"$/;"	v
w:foo	nCheetVimL.vim	/^        let w:foo = 'bar'    " w: window$/;"	v
b:state	nCheetVimL.vim	/^        let b:state = 'on'   " b: buffer$/;"	v
t:state	nCheetVimL.vim	/^        let t:state = 'off'  " t: tab$/;"	v
var	nCheetVimL.vim	/^        let var = 4$/;"	v
var	nCheetVimL.vim	/^        let var -= 2$/;"	v
var	nCheetVimL.vim	/^        let var += 5$/;"	v
var	nCheetVimL.vim	/^        let var .= 'string'   " concat$/;"	v
str	nCheetVimL.vim	/^        let str = "String"$/;"	v
str	nCheetVimL.vim	/^        let str = "String with \\n newline"$/;"	v
literal	nCheetVimL.vim	/^        let literal = 'literal, no \\ escaping'$/;"	v
literal	nCheetVimL.vim	/^        let literal = 'that''s enough' $/;"	v
re	nCheetVimL.vim	/^        let re ='Alf'$/;"	v
Initialize	nCheetVimL.vim	/^        function! s:Initialize(cmd, args)$/;"	f
myplugin#hello	nCheetVimL.vim	/^        function! myplugin#hello()$/;"	f
x	nCheetVimL.vim	/^        let x =0$/;"	v
g:ack_options	nCheetVimL.vim	/^        let g:ack_options = '-s -H'    " g: global$/;"	v
s:ack_program	nCheetVimL.vim	/^        let s:ack_program = 'ack'      " s: local (to script)$/;"	v
l:foo	nCheetVimL.vim	/^        let l:foo = 'bar'              " l: local (to function)$/;"	v
mylist	nCheetVimL.vim	/^        let mylist = [1, 5, 3, 0]$/;"	v
mylist	nCheetVimL.vim	/^        let mylist = [1, 'two', 3, 'four']$/;"	v
shortlist	nCheetVimL.vim	/^        let shortlist = mylist[2:-1]$/;"	v
shortlist	nCheetVimL.vim	/^        let shortlist = mylist[2:]     " same$/;"	v
shortlist	nCheetVimL.vim	/^        let shortlist = mylist[2:2]    " one item$/;"	v
sortedlist	nCheetVimL.vim	/^        let sortedlist = sort(copy(mylist))$/;"	v
mylist	nCheetVimL.vim	/^        let mylist = split('hello there world', ' ')$/;"	v
longlist	nCheetVimL.vim	/^        let longlist = mylist + [5, 6]$/;"	v
mylist	nCheetVimL.vim	/^        let mylist += [7, 8]$/;"	v
alist	nCheetVimL.vim	/^        let alist = [1, 2, 3]$/;"	v
alist	nCheetVimL.vim	/^        let alist = add(alist, 4)$/;"	v
msg	nCheetVimL.vim	/^        let msg = 'NY'$/;"	v
var	nCheetVimL.vim	/^        let var = "hello"$/;"	v
filetypedetect	nCheetVimL.vim	/^        augroup filetypedetect$/;"	a
C	nCheetVimL.vim	/^        command C -nargs=* call F ( <f-args> )$/;"	c
C	nCheetVimL.vim	/^        command C source ~\/vimfiles\/s.vim$/;"	c
Saave	nCheetVimL.vim	/^        command! Saave :set fo=want tw=80 nowrap$/;"	c
Save	nCheetVimL.vim	/^        command! Save call <SID>foo()$/;"	c
foo	nCheetVimL.vim	/^        function! s:foo()$/;"	f
SuperTab	nCheetVimL.vim	/^        function! SuperTab()$/;"	f
<Tab>	nCheetVimL.vim	/^        imap <Tab> <C-R>=SuperTab()<CR>$/;"	m
G	nCheetVimL.vim	/^        normal G$/;"	m
G	nCheetVimL.vim	/^        normal! G   " skips key mappings$/;"	m
colors	nCheetVimL.vim	/^        let colors = {$/;"	v
strg	nCheetVimL.vim	/^        let strg = string(colors)$/;"	v
l	nCheetVimL.vim	/^        let l = len(colors)$/;"	v
strg	nCheetVimL.vim	/^            let strg = string(colors)$/;"	v
r	nCheetVimL.vim	/^        let r='red'$/;"	v
strg	nCheetVimL.vim	/^            let strg = string(colors)$/;"	v
strg	nCheetVimL.vim	/^            let strg = string(colors)$/;"	v
mylist	nCheetVimL.vim	/^        let mylist = [1, 'two', 3, 'four']$/;"	v
first	nCheetVimL.vim	/^        let first = mylist[0]$/;"	v
last	nCheetVimL.vim	/^        let last  = mylist[-1]$/;"	v
second	nCheetVimL.vim	/^        let second = get(mylist, 1)$/;"	v
second	nCheetVimL.vim	/^        let second = get(mylist, 1, "NONE")$/;"	v
ldot	nCheetVimL.vim	/^        let ldot = getline('.')          " current line as a string$/;"	v
l1	nCheetVimL.vim	/^        let l1 = getline(1)            " get line 1$/;"	v
l15	nCheetVimL.vim	/^        let l15 = getline(4, 6)         " get lines 1-5$/;"	v
p1	nCheetVimL.vim	/^        let p1 =getcurpos()           " [bufnum, lnum, col, off, curswant]$/;"	v
p2	nCheetVimL.vim	/^        let p2 =getpos('.')           " [bufnum, lnum, col, off]$/;"	v
m1	nCheetVimL.vim	/^        let m1 = getpos("'a")          " position of a mark$/;"	v
m2	nCheetVimL.vim	/^        let m2 = getpos("'<")          " position of selection start$/;"	v
ff	nCheetVimL.vim	/^        let ff = expand('%')            " current file$/;"	v
fs	nCheetVimL.vim	/^        let fs =getfsize('.\/nPlug.vim')$/;"	v
fc	nCheetVimL.vim	/^        let fc =getcwd()$/;"	v
gp	nCheetVimL.vim	/^        let gp = globpath(&rtp, "plugin\/commentary.vim")$/;"	v
s1	nCheetVimL.vim	/^        let s1 =strpart("abcdef", 3, 2)    " == "de" (substring)$/;"	v
str	nCheetVimL.vim	/^        let str = 'xabc'$/;"	v
name	nCheetVimL.vim	/^        let name ='john'$/;"	v
Dictionary_1	nCheetVimL.vim	/^        let Dictionary_1 = {$/;"	v
g:loaded_myplugin	nCheetVimL.vim	/^        let g:loaded_myplugin = 1$/;"	v
g:CommandTCursorEndMap	nCommandT.vim	/^                let g:CommandTCursorEndMap = ['<C-e>', '<End>']       " add End$/;"	v
g:CommandTCursorStartMap	nCommandT.vim	/^                let g:CommandTCursorStartMap = ['<C-a>', '<Home>']    " add Home$/;"	v
g:CommandTCursorLeftMap	nCommandT.vim	/^                let g:CommandTCursorLeftMap = ['<Left>']              " remove ^H$/;"	v
g:CommandTCursorRightMap	nCommandT.vim	/^                let g:CommandTCursorRightMap = ['<Right>']            " remove ^L$/;"	v
g:CommandTClearPrevWordMap	nCommandT.vim	/^                let g:CommandTClearPrevWordMap = ['<C-w>', '<C-h>']   " add ^H aka Ctrl-BS$/;"	v
g:CommandTCancelMap	nCommandT.vim	/^                let g:CommandTCancelMap = ['<C-c>', '<Esc>', '<C-g>'] " add ^G$/;"	v
g:CommandTMaxHeight	nCommandT.vim	/^                let g:CommandTMaxHeight = 20$/;"	v
g:CommandTTraverseSCM	nCommandT.vim	/^                let g:CommandTTraverseSCM = "pwd"$/;"	v
g:CommandTMaxFiles	nCommandT.vim	/^                let g:CommandTMaxFiles=800000  " firefox source tree is _big_$/;"	v
;t	nCommandT.vim	/^                nmap <silent> ;t <Plug>(CommandTJump)$/;"	m
;b	nCommandT.vim	/^                nmap <silent> ;b <Plug>(CommandTBuffer)$/;"	m
;h	nCommandT.vim	/^                nmap <silent> ;h <Plug>(CommandTHelp)$/;"	m
g:ctrlp_prompt_mappings	nCtrlP.vim	/^        let g:ctrlp_prompt_mappings = {$/;"	v
CtrlPDirMRU	nCtrlP.vim	/^        augroup CtrlPDirMRU$/;"	a
of	nCtrlP.vim	/^        none of the new patterns are working. What did I do wrong?$/;"	m
g:loaded_ctrlp	nCtrlP.vim	/^            let g:loaded_ctrlp = 0 " =1 to disable plug completely.$/;"	v
g:ctrl_map	nCtrlP.vim	/^            let g:ctrl_map = '<c-p>' " for normal mode press Ctrl-P.$/;"	v
g:ctrlp_cmd	nCtrlP.vim	/^            let g:ctrlp_cmd = 'CtrlP' " default command to use when pressing mapping.$/;"	v
g:ctrlp_by_filename	nCtrlP.vim	/^            let g:ctrlp_by_filename = 0 " 1: search by filename (not full path)$/;"	v
g:ctrlp_regexp	nCtrlP.vim	/^            let g:ctrlp_regexp = 1 " 1: to set full regexp search as default.$/;"	v
g:ctrlp_match_window_bottom	nCtrlP.vim	/^            let g:ctrlp_match_window_bottom = 1 " window position$/;"	v
g:ctrlp_match_window_reversed	nCtrlP.vim	/^            let g:ctrlp_match_window_reversed = 1 " show matching in reverse order$/;"	v
g:ctrlp_max_height	nCtrlP.vim	/^            let g:ctrlp_max_height = 10$/;"	v
g:ctrlp_switch_buffer	nCtrlP.vim	/^            let g:ctrlp_switch_buffer = 2 " when file opened, jump to (tag, buffer)$/;"	v
g:ctrlp_reuse_window	nCtrlP.vim	/^            let g:ctrlp_reuse_window = 'netrw\\|help\\|quickfix'$/;"	v
g:ctrlp_working_path_mode	nCtrlP.vim	/^            let g:ctrlp_working_path_mode = 'rc'$/;"	v
g:ctrlp_root_markers	nCtrlP.vim	/^            let g:ctrlp_root_markers = ['.git', '.hg', '.svn', '.bzr',]$/;"	v
g:ctrlp_use_caching	nCtrlP.vim	/^            let g:ctrlp_use_caching = 1 " 0: disable per-session caching.$/;"	v
g:ctrlp_clear_cache_on_exit	nCtrlP.vim	/^            let g:ctrlp_clear_cache_on_exit = 1$/;"	v
g:ctrlp_cache_dir	nCtrlP.vim	/^            let g:ctrlp_cache_dir = $HOME.'\/.cache\/ctrlp'$/;"	v
g:ctrlp_prompt_mappings	nCtrlP.vim	/^            let g:ctrlp_prompt_mappings = {$/;"	v
g:ctrlp_mruf_max	nCtrlP.vim	/^            let g:ctrlp_mruf_max = 250$/;"	v
g:ctrlp_mruf_exclude	nCtrlP.vim	/^            let g:ctrlp_mruf_exclude = '\/tmp\/.*\\|\/temp\/.*' " MacOSX\/Linux$/;"	v
g:ctrlp_mruf_relative	nCtrlP.vim	/^            let g:ctrlp_mruf_relative = 0 " 1: show only MRU files in current working dir$/;"	v
g:ctrlp_mruf_case_sensitive	nCtrlP.vim	/^            let g:ctrlp_mruf_case_sensitive = 1 " avoid duplicate MRU entries.$/;"	v
g:ctrlp_dotfiles	nCtrlP.vim	/^            let g:ctrlp_dotfiles = 1 " =0 to don't scan for dotfiles and dotdirs.$/;"	v
g:ctrlp_custom_ignore	nCtrlP.vim	/^            let g:ctrlp_custom_ignore = {$/;"	v
g:ctrlp_max_files	nCtrlP.vim	/^            let g:ctrlp_max_files = 10000 " maximum number of files to scan, 0: no limit.$/;"	v
g:ctrlp_max_depth	nCtrlP.vim	/^            let g:ctrlp_max_depth = 40 " maximum depth of a dir tree to recurse into.$/;"	v
g:ctrlp_max_history	nCtrlP.vim	/^            let g:ctrlp_max_history = &history " max of input strings CtrlP remember$/;"	v
g:ctrlp_open_new_file	nCtrlP.vim	/^            let g:ctrlp_open_new_file = 'v' " specify how newly file be opened when <c-y>$/;"	v
g:ctrlp_open_multiple_files	nCtrlP.vim	/^            let g:ctrlp_open_multiple_files = 'v' " open multiple files with <c-z>, <c-o>$/;"	v
g:ctrlp_arg_map	nCtrlP.vim	/^            let g:ctrlp_arg_map = 0$/;"	v
g:ctrlp_follow_symlinks	nCtrlP.vim	/^            let g:ctrlp_follow_symlinks = 0 " 1: follow all symlinks indiscriminately.$/;"	v
g:ctrlp_lazy_update	nCtrlP.vim	/^            let g:ctrlp_lazy_update = 0 " only update match window after typing stopped$/;"	v
g:ctrlp_use_migemo	nCtrlP.vim	/^            let g:ctrlp_use_migemo = 0 " 1: use Migemo Pattern for Japanese filenames.$/;"	v
g:ctrlp_buftag_systemenc	nCtrlP.vim	/^            let g:ctrlp_buftag_systemenc = &encoding$/;"	v
g:ctrlp_default_input	nCtrlP.vim	/^            let g:ctrlp_default_input = 0 " seed the prompt with cur file's relat-path$/;"	v
g:ctrlp_match_func	nCtrlP.vim	/^            let g:ctrlp_match_func = {} " an external fuzzy matching function.$/;"	v
g:ctrlp_buffer_func	nCtrlP.vim	/^            let g:ctrlp_buffer_func = {} " after entering and before exiting buffer$/;"	v
g:ctrlp_mruf_default_order	nCtrlP.vim	/^            let g:ctrlp_mruf_default_order = 0 " show only MRU files in pwd$/;"	v
g:ctrlp_tabpage_position	nCtrlP.vim	/^            let g:ctrlp_tabpage_position = 'ac'$/;"	v
g:ctrlp_status_func	nCtrlP.vim	/^            let g:ctrlp_status_func = {$/;"	v
g:ctrlp_extensions	nCtrlP.vim	/^            let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir',$/;"	v
g:ctrlp_open_func	nCtrlP.vim	/^            let g:ctrlp_open_func = {$/;"	v
CtrlPHTMLOpenFunc	nCtrlP.vim	/^            fun! CtrlPHTMLOpenFunc(action, line)$/;"	f
g:CommandTMaxFiles	nCtrlP.vim	/^            let g:CommandTMaxFiles = 10000 " maximum number of files scan.$/;"	v
g:CommandTMaxDepth	nCtrlP.vim	/^            let g:CommandTMaxDepth = 15$/;"	v
g:CommandTMaxCacheDirectories	nCtrlP.vim	/^            let g:CommandTMaxCacheDirectories = 1 " 0: no limit.$/;"	v
g:CommandTMaxHeight	nCtrlP.vim	/^            let g:CommandTMaxHeight = 15 " 0: as much as available space.$/;"	v
g:CommandTMinHeight	nCtrlP.vim	/^            let g:CommandTMinHeight = 0 " 0: single line.$/;"	v
g:CommandTAlwaysShowDotFiles	nCtrlP.vim	/^            let g:CommandTAlwaysShowDotFiles = 0 " only if entered string contains a dot$/;"	v
g:CommandTNeverShowDotFiles	nCtrlP.vim	/^            let g:CommandTNeverShowDotFiles = 0$/;"	v
g:CommandTScanDotDirectories	nCtrlP.vim	/^            let g:CommandTScanDotDirectories = 0$/;"	v
g:CommandTMatchWindowAtTop	nCtrlP.vim	/^            let g:CommandTMatchWindowAtTop = 0 " match window appear at bottom.$/;"	v
g:CommandTMatchWindowReverse	nCtrlP.vim	/^            let g:CommandTMatchWindowReverse = 1 " let the best match at bottom.$/;"	v
g:CommandTTageIncludeFilenames	nCtrlP.vim	/^            let g:CommandTTageIncludeFilenames = 1 " include filenames when matches$/;"	v
g:asyncfinder_ignore_dirs	nCtrlP.vim	/^            let g:asyncfinder_ignore_dirs = "['*.AppleDouble*','*.git*','*.hg*','*.bzr*',]"$/;"	v
g:asyncfinder_ignore_files	nCtrlP.vim	/^            let g:asyncfinder_ignore_files = "['*.swp', '*~',]"$/;"	v
g:asyncfinder_initial_mode	nCtrlP.vim	/^            let g:asyncfinder_initial_mode = "a" " a: all, b: buffer, f: files, m: mru.$/;"	v
g:asyncfinder_initial_pattern	nCtrlP.vim	/^            let g:asyncfinder_initial_pattern = "*"$/;"	v
g:asyncfinder_include_buffers	nCtrlP.vim	/^            let g:asyncfinder_include_buffers = 1$/;"	v
g:asyncfinder_include_mru_files	nCtrlP.vim	/^            let g:asyncfinder_include_mru_files = 1$/;"	v
g:asyncfinder_edit_file_on_single_result	nCtrlP.vim	/^            let g:asyncfinder_edit_file_on_single_result = 1$/;"	v
g:EasyGrepMode	nCtrlP.vim	/^            let g:EasyGrepMode = 2 " 0 all file 1 opened buffer 2 track current extension$/;"	v
g:EasyGrepCommand	nCtrlP.vim	/^            let g:EasyGrepCommand = 0 " 0: vimgrep, 1: grep (follows grepprg).$/;"	v
g:EasyGrepRecursive	nCtrlP.vim	/^            let g:EasyGrepRecursive = 1$/;"	v
g:EasyGrepIgnoreCase	nCtrlP.vim	/^            let g:EasyGrepIgnoreCase = 1$/;"	v
g:EasyGrepHidden	nCtrlP.vim	/^            let g:EasyGrepHidden = 0 " search hidden files$/;"	v
g:EasyGrepAllOptionsInExplorer	nCtrlP.vim	/^            let g:EasyGrepAllOptionsInExplorer = 1$/;"	v
g:EasyGrepWindow	nCtrlP.vim	/^            let g:EasyGrepWindow = 1 " 0: quickfix, 1: location list.$/;"	v
g:EasyGrepWindowPosition	nCtrlP.vim	/^            let g:EasyGrepWindowPosition = "botright" " such as topleft, botright.$/;"	v
g:EasyGrepOpenWindowOnMatch	nCtrlP.vim	/^            let g:EasyGrepOpenWindowOnMatch = 1 " open window when has matches.$/;"	v
g:EasyGrepEveryMatch	nCtrlP.vim	/^            let g:EasyGrepEveryMatch = 1 " multiple matches on same line as different$/;"	v
g:EasyGrepJumpToMatch	nCtrlP.vim	/^            let g:EasyGrepJumpToMatch = 1 " jump to first match.$/;"	v
g:EasyGrepSearchCurrentBufferDir	nCtrlP.vim	/^            let g:EasyGrepSearchCurrentBufferDir = 1 " search current buffer's dir.$/;"	v
g:EasyGrepFileAssociationsInExplorer	nCtrlP.vim	/^            let g:EasyGrepFileAssociationsInExplorer = 1 " show file associations list.$/;"	v
g:EasyGrepOptionPrefix	nCtrlP.vim	/^            let g:EasyGrepOptionPrefix='<leader>vy'$/;"	v
g:EasyGrepReplaceWindowMode	nCtrlP.vim	/^            let g:EasyGrepReplaceWindowMode = 0 " 0: new tab, 1: split, 2: autowriteall$/;"	v
g:EasyGrepReplaceAllPerFile	nCtrlP.vim	/^            let g:EasyGrepReplaceAllPerFile = 1 " whether use 'a' (for all).$/;"	v
g:EasyGrepExtraWarnings	nCtrlP.vim	/^            let g:EasyGrepExtraWarnings = 1$/;"	v
g:ackprg	nCtrlP.vim	/^                let g:ackprg="ack-grep -H --nocolor --nogroup --column"$/;"	v
g:vim_debug_disable_mappings	nDBG-vim-debug.vim	/^        let g:vim_debug_disable_mappings = 1$/;"	v
g:deoplete#enable_at_startup	nDeopletPopMin.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#enable_at_startup	nDeopletPopMin.vim	/^    let g:deoplete#enable_at_startup = 0$/;"	v
g:min_pattern_length	nDeopletPopMin.vim	/^    let g:min_pattern_length=2$/;"	v
g:deoplete#auto_complete_delay	nDeopletPopMin.vim	/^    let g:deoplete#auto_complete_delay=0$/;"	v
g:auto_refresh_delay	nDeopletPopMin.vim	/^    let g:auto_refresh_delay=0$/;"	v
refresh_always	nDeopletPopMin.vim	/^    let refresh_always=true$/;"	v
<C-g>	nDeopletPopMin.vim	/^    inoremap <expr><C-g>     deoplete#undo_completion()$/;"	m
<C-l>	nDeopletPopMin.vim	/^    inoremap <expr><C-l>     deoplete#refresh()$/;"	m
<C-h>	nDeopletPopMin.vim	/^    inoremap <expr><C-h> deoplete#smart_close_popup()."\\<C-h>"$/;"	m
H	nDoc18.vim	/^    cnoabbrev H helpgrep$/;"	m
i"	nDoc18.vim	/^omap i" :normal vT"ot"<CR>$/;"	m
a"	nDoc18.vim	/^omap a" :normal vF"of"<CR>$/;"	m
i'	nDoc18.vim	/^omap i' :normal vT'ot'<CR>$/;"	m
a'	nDoc18.vim	/^omap a' :normal vF'of'<CR>$/;"	m
<Space>w	nDoc18.vim	/^nnoremap <Space>w <C-w>$/;"	m
;	nDoc18.vim	/^noremap ; :$/;"	m
:	nDoc18.vim	/^noremap : ;$/;"	m
j	nDoc18.vim	/^noremap j gj$/;"	m
k	nDoc18.vim	/^noremap k gk$/;"	m
gj	nDoc18.vim	/^noremap gj j$/;"	m
gk	nDoc18.vim	/^noremap gk k$/;"	m
<C-t>	nDoc18.vim	/^nnoremap <C-t> <Nop>$/;"	m
<C-t>n	nDoc18.vim	/^nnoremap <C-t>n :<C-u>tabnew<CR>$/;"	m
<C-t>c	nDoc18.vim	/^nnoremap <C-t>c :<C-u>tabclose<CR>$/;"	m
<C-t>o	nDoc18.vim	/^nnoremap <C-t>o :<C-u>tabonly<CR>$/;"	m
<C-t>j	nDoc18.vim	/^nnoremap <C-t>j :<C-u>execute 'tabnext' 1 + (tabpagenr() + v:count1 -1) % tabpagenr('$')<CR>$/;"	m
<C-t>k	nDoc18.vim	/^nnoremap <C-t>k gT$/;"	m
,(	nDoc18.vim	/^        nmap ,( csw($/;"	m
,)	nDoc18.vim	/^        nmap ,) csw)$/;"	m
,{	nDoc18.vim	/^        nmap ,{ csw{$/;"	m
,}	nDoc18.vim	/^        nmap ,} csw}$/;"	m
,[	nDoc18.vim	/^        nmap ,[ csw[$/;"	m
,]	nDoc18.vim	/^        nmap ,] csw]$/;"	m
,'	nDoc18.vim	/^        nmap ,' csw'$/;"	m
,"	nDoc18.vim	/^        nmap ," csw"$/;"	m
<Space>gd	nDoc18.vim	/^nmap <Space>gd :GitDiff<CR>$/;"	m
<Space>gB	nDoc18.vim	/^nmap <Space>gB :GitBlame<CR>$/;"	m
<Space>gb	nDoc18.vim	/^nmap <Space>gb :Gitblanch<CR>$/;"	m
<Space>gp	nDoc18.vim	/^nmap <Space>gp :GitPush<CR>$/;"	m
<Space>gD	nDoc18.vim	/^nmap <Space>gD :GitDiff --cached<CR>$/;"	m
<Space>gs	nDoc18.vim	/^nmap <Space>gs :GitStatus<CR>$/;"	m
<Space>gl	nDoc18.vim	/^nmap <Space>gl :GitLog<CR>$/;"	m
<Space>ga	nDoc18.vim	/^nmap <Space>ga :GitAdd$/;"	m
<Space>gA	nDoc18.vim	/^nmap <Space>gA :GitAdd -A<CR>$/;"	m
<Space>gm	nDoc18.vim	/^nmap <Space>gm :GitCommit<CR>$/;"	m
<Space>gM	nDoc18.vim	/^nmap <Space>gM :GitCommit --amend<CR>$/;"	m
,r	nDoc61.vim	/^cmap ,r  :Nread ftp:\/\/209.51.134.122\/public_html\/index.html $/;"	m
,w	nDoc61.vim	/^cmap ,w  :Nwrite ftp:\/\/209.51.134.122\/public_html\/index.html$/;"	m
alter	nEasyTags.vim	/^not alter the tags file), but there are no warnings or errors that I can see.$/;"	m
g:easytags_languages	nEasyTags.vim	/^let g:easytags_languages = {'ruby': {'cmd': 'ripper-tags'}}$/;"	v
g:AutoPairsMapCR	nExpanDer.vim	/^let g:AutoPairsMapCR=0$/;"	v
g:deoplete#auto_complete_start_length	nExpanDer.vim	/^let g:deoplete#auto_complete_start_length = 1$/;"	v
g:deoplete#enable_at_startup	nExpanDer.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#enable_smart_case	nExpanDer.vim	/^let g:deoplete#enable_smart_case = 1$/;"	v
<TAB>	nExpanDer.vim	/^imap <expr><TAB> pumvisible() ? "\\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\\<Plug>(neosnippet_expand_or_jump)" : "\\<TAB>")$/;"	m
<S-TAB>	nExpanDer.vim	/^imap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<S-TAB>"$/;"	m
<CR>	nExpanDer.vim	/^imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\\<CR>\\<Plug>AutoPairsReturn"$/;"	m
<C-k>	nExpanDer.vim	/^imap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
g:neosnippet#enable_snipmate_compatibility	nExpanDer.vim	/^let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosnippet#snippets_directory	nExpanDer.vim	/^let g:neosnippet#snippets_directory='~\/.vim\/bundle\/vim-snippets\/snippets'$/;"	v
g:deoplete#sources	nExpanDer.vim	/^        let g:deoplete#sources = {}$/;"	v
g:deoplete#omni#functions	nExpanDer.vim	/^        let g:deoplete#omni#functions = {}$/;"	v
g:UltiSnipsJumpForwardTrigger	nExpanDer.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	nExpanDer.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsSnippetsDir	nExpanDer.vim	/^let g:UltiSnipsSnippetsDir = $HOME.'\/vimfiles\/bundle\/vim-snippets\/UltiSnips'$/;"	v
FormatPerlObj	nFormatX.vim	/^function! FormatPerlObj()$/;"	f
FormatJson	nFormatX.vim	/^function! FormatJson()$/;"	f
FormatVarList	nFormatX.vim	/^function! FormatVarList()$/;"	f
FormatAdiumLogs	nFormatX.vim	/^function! FormatAdiumLogs()$/;"	f
FormatHtml	nFormatX.vim	/^function! FormatHtml()$/;"	f
fg	nFZF2.vim	/^                nnoremap fg :Files<Cr>$/;"	m
fG	nFZF2.vim	/^                nnoremap fG :GFiles<Cr>$/;"	m
fb	nFZF2.vim	/^                nnoremap fb :Buffers<cr>$/;"	m
fk	nFZF2.vim	/^                nnoremap fk :Commands<Cr>$/;"	m
fc	nFZF2.vim	/^                nnoremap fc :BCommits<Cr>$/;"	m
fh	nFZF2.vim	/^                nnoremap fh :Helptags<Cr>$/;"	m
fy	nFZF2.vim	/^                nnoremap fy :History<cr>$/;"	m
fl	nFZF2.vim	/^                nnoremap fl :BLines<cr>$/;"	m
fs	nFZF2.vim	/^                nnoremap fs :Snippets<cr>$/;"	m
f'	nFZF2.vim	/^                nnoremap f' :Marks<cr>$/;"	m
ft	nFZF2.vim	/^                nnoremap ft :BTags<cr>$/;"	m
ZZ	nFZF2.vim	/^                nnoremap ZZ mzzt3<c-u>`z$/;"	m
ZZ	nFZF2.vim	/^                        nnoremap ZZ mzzt3<c-u>`z$/;"	m
BB	nFZF2.vim	/^                                                nnoremap BB ggVG$/;"	m
g:fzf_launcher	nFZF2.vim	/^        let g:fzf_launcher = 'urxvt -geometry 120x30 -e sh -c %s'$/;"	v
<C-\>	nFZF2.vim	/^        imap <expr><C-\\> fzf#vim#complete#word({'left': '15%'})$/;"	m
<C-l>	nFZF2.vim	/^        imap <C-l> <plug>(fzf-complete-line)$/;"	m
<c-j>	nFZF2.vim	/^        imap <expr> <c-j> fzf#vim#complete(fzf#wrap({$/;"	m
GGrep	nFZF2.vim	/^        command! -bang -nargs=* GGrep$/;"	c
Ag	nFZF2.vim	/^        command! -bang -nargs=* Ag$/;"	c
Rg	nFZF2.vim	/^        command! -bang -nargs=* Rg$/;"	c
Files	nFZF2.vim	/^        command! -bang -nargs=? -complete=dir Files$/;"	c
l:filelist	nFZF.vim	/^let l:filelist = split(system(find . -type f -printf '%T@ %p\\n' | $/;"	v
<C-f>	nFZF.vim	/^        imap <C-f> :call FuzzyCompleteFunc()<cr>$/;"	m
g:fuzzyfunc	nFZF.vim	/^let g:fuzzyfunc = 'completor#completefunc'$/;"	v
g:LanguageClient_serverCommands	nFZF.vim	/^        let g:LanguageClient_serverCommands.python = ['pyls']$/;"	v
=	nGit.vim	/^    cmd = icdiff --line-numbers $LOCAL $REMOTE$/;"	m
=	nGit.vim	/^    cmd = \/usr\/local\/bin\/charm merge "$LOCAL" "$REMOTE" "$BASE" "$MERGED"$/;"	m
g:langserver_executables	nGO.vim	/^let g:langserver_executables = {$/;"	v
$MYVIMRC	ninitOkt18.vim	/^        let $MYVIMRC='~\/.config\/nvim\/init.vim'$/;"	v
s:thesaurus_pat	ninitOkt18.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	ninitOkt18.vim	/^        let maplocalleader=','$/;"	v
mapleader	ninitOkt18.vim	/^        let mapleader=' '$/;"	v
vimrc	ninitOkt18.vim	/^        augroup vimrc$/;"	a
<LocalLeader>w	ninitOkt18.vim	/^        nnoremap <LocalLeader>w :<C-r>=expand("<cword>")<CR>$/;"	m
<LocaLeader>z	ninitOkt18.vim	/^        nnoremap <LocaLeader>z :<C-r>=getline(".")<CR>$/;"	m
ScriptExecute	ninitOkt18.vim	/^        function! ScriptExecute()$/;"	f
ScriptExecutePermission	ninitOkt18.vim	/^        augroup ScriptExecutePermission$/;"	a
SourceVimrc	ninitOkt18.vim	/^        augroup SourceVimrc$/;"	a
g:pymode_python	ninitOkt18.vim	/^        let g:pymode_python = 'python3'$/;"	v
FixVimSpellcheck	ninitOkt18.vim	/^        function! FixVimSpellcheck()$/;"	f
z=	ninitOkt18.vim	/^        nnoremap z= :call FixVimSpellcheck()<cr>$/;"	m
zg	ninitOkt18.vim	/^        nnoremap zg z=$/;"	m
wordUnderCursor	ninitOkt18.vim	/^        let wordUnderCursor = expand("<cword>")$/;"	v
currentLine	ninitOkt18.vim	/^        let currentLine   = getline(".")$/;"	v
gitroot	ninitOkt18.vim	/^        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\\n\\r]', '', 'g')$/;"	v
g:bling_time	ninitOkt18.vim	/^        let g:bling_time = 42$/;"	v
g:bling_color_fg	ninitOkt18.vim	/^        let g:bling_color_fg = 'green'$/;"	v
g:bling_color_cterm	ninitOkt18.vim	/^        let g:bling_color_cterm = 'reverse'$/;"	v
<cr>	ninitOkt18.vim	/^        nnoremap <cr> o<esc>$/;"	m
<CR>	ninitOkt18.vim	/^        inoremap <silent><expr> <CR> (pumvisible() && bufname('%') !=# '[Command Line]' ? "\\<C-e>\\<CR>" : "\\<C-g>u\\<CR>")$/;"	m
}	ninitOkt18.vim	/^        noremap } }^$/;"	m
>	ninitOkt18.vim	/^        nnoremap > v>$/;"	m
<	ninitOkt18.vim	/^        nnoremap < v<$/;"	m
<	ninitOkt18.vim	/^        vnoremap < <gv$/;"	m
>	ninitOkt18.vim	/^        vnoremap > >gv$/;"	m
.	ninitOkt18.vim	/^        vnoremap . :normal .<CR>$/;"	m
w!!	ninitOkt18.vim	/^        cmap w!! w !sudo tee % >\/dev\/null$/;"	m
cd	ninitOkt18.vim	/^        map cd :cd %:p:h<cr>$/;"	m
g:myplugin_enablefeature	ninitOkt18.vim	/^                let g:myplugin_enablefeature = 1$/;"	v
g:myplugin_defaultdir	ninitOkt18.vim	/^                let g:myplugin_defaultdir = $HOME$/;"	v
g:myplugin_weirdmode	ninitOkt18.vim	/^                let g:myplugin_weirdmode = 'm'$/;"	v
autoformat_settings	ninitOkt18.vim	/^                augroup autoformat_settings$/;"	a
g:undoquit_mapping	ninitOkt18.vim	/^                let g:undoquit_mapping = ';q' $/;"	v
g:switch_mapping	ninitOkt18.vim	/^                let g:switch_mapping = "-"$/;"	v
g:switch_custom_definitions	ninitOkt18.vim	/^                let g:switch_custom_definitions =$/;"	v
b:switch_custom_definitions	ninitOkt18.vim	/^                        let b:switch_custom_definitions = [$/;"	v
ff	ninitOkt18.vim	/^                nnoremap ff :call CscopeFindInteractive(expand('<cword>'))<CR>$/;"	m
qs_colors	ninitOkt18.vim	/^                augroup qs_colors$/;"	a
g:bookmark_no_default_key_mappings	ninitOkt18.vim	/^                let g:bookmark_no_default_key_mappings = 1$/;"	v
BookmarkMapKeys	ninitOkt18.vim	/^                function! BookmarkMapKeys()$/;"	f
g:bookmark_auto_close	ninitOkt18.vim	/^                let g:bookmark_auto_close = 1$/;"	v
g:bookmark_highlight_lines	ninitOkt18.vim	/^                let g:bookmark_highlight_lines = 1          $/;"	v
g:bookmark_show_warning	ninitOkt18.vim	/^                let g:bookmark_show_warning = 0           $/;"	v
g:bookmark_show_toggle_warning	ninitOkt18.vim	/^                let g:bookmark_show_toggle_warning = 0      $/;"	v
g:bookmark_sign	ninitOkt18.vim	/^                let g:bookmark_sign = '♥'$/;"	v
g:bookmark_highlight_lines	ninitOkt18.vim	/^                let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_save_per_working_dir	ninitOkt18.vim	/^                let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_auto_save	ninitOkt18.vim	/^                let g:bookmark_auto_save = 1$/;"	v
g:bookmark_save_per_working_dir	ninitOkt18.vim	/^                let g:bookmark_save_per_working_dir = 1  $/;"	v
g:indentLine_enabled	ninitOkt18.vim	/^                let g:indentLine_enabled = 1$/;"	v
g:indentLine_noConcealCursor	ninitOkt18.vim	/^                let g:indentLine_noConcealCursor='nc'$/;"	v
g:indentLine_color_term	ninitOkt18.vim	/^                let g:indentLine_color_term = 9$/;"	v
g:EasyMotion_smartcase	ninitOkt18.vim	/^                let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_do_mapping	ninitOkt18.vim	/^                let g:EasyMotion_do_mapping = 0 "-Disable default mappings$/;"	v
<LocalLeader><LocalLeader>	ninitOkt18.vim	/^                nmap <LocalLeader><LocalLeader> <Plug>(easymotion-overwin-w)$/;"	m
g:accordion_mode	ninitOkt18.vim	/^                let g:accordion_mode="v"$/;"	v
g:trans_directions_list	ninitOkt18.vim	/^                let g:trans_directions_list = [$/;"	v
g:trans_save_history	ninitOkt18.vim	/^                let g:trans_save_history = 1$/;"	v
b:vimpipe_command	ninitOkt18.vim	/^                let b:vimpipe_command="lynx -dump -stdin"$/;"	v
b:vimpipe_command	ninitOkt18.vim	/^                let b:vimpipe_command='jslint <(cat)'$/;"	v
b:vimpipe_command	ninitOkt18.vim	/^                let b:vimpipe_command="python -m json.tool"$/;"	v
b:vimpipe_command	ninitOkt18.vim	/^                let b:vimpipe_command="multimarkdown"$/;"	v
g:coveragepy_uncovered_sign	ninitOkt18.vim	/^                let g:coveragepy_uncovered_sign = '-'$/;"	v
g:brightest#highlight	ninitOkt18.vim	/^                let g:brightest#highlight = { "group" : "Define" }$/;"	v
]c	ninitOkt18.vim	/^                nmap ]c <Plug>GitGutterNextHunk$/;"	m
[c	ninitOkt18.vim	/^                nmap [c <Plug>GitGutterPrevHunk$/;"	m
hp	ninitOkt18.vim	/^                nmap hp <Plug>GitGutterPreviewHunk$/;"	m
hs	ninitOkt18.vim	/^                nmap hs <Plug>GitGutterStageHunk$/;"	m
hu	ninitOkt18.vim	/^                nmap hu <Plug>GitGutterUndoHunk$/;"	m
g:extradite_width	ninitOkt18.vim	/^                let g:extradite_width = 60$/;"	v
g:extradite_showhash	ninitOkt18.vim	/^                let g:extradite_showhash = 1 "show abbre commit hashes.$/;"	v
g:highlightedyank_highlight_duration	ninitOkt18.vim	/^                let g:highlightedyank_highlight_duration = -1$/;"	v
ih	ninitOkt18.vim	/^                vmap ih <Plug>(textobj-gitgutter-i)$/;"	m
g:expand_region_text_objects	ninitOkt18.vim	/^                 let g:expand_region_text_objects = {$/;"	v
<m-1>	ninitOkt18.vim	/^        nmap <m-1> <esc>viq<left> $/;"	m
<m-q>	ninitOkt18.vim	/^                nmap <m-q> <esc>vaq<left> $/;"	m
<m-0>	ninitOkt18.vim	/^                        nmap <m-0> <esc>vab<left> $/;"	m
<m-3>	ninitOkt18.vim	/^                                nmap <m-3> <esc>viB $/;"	m
<m-i>	ninitOkt18.vim	/^                                        nmap <m-i> <esc>vio $/;"	m
<m-9>	ninitOkt18.vim	/^                                        nmap <m-9> <esc>vif $/;"	m
<m-8>	ninitOkt18.vim	/^                        nmap <m-8> <esc>vaf $/;"	m
<m-7>	ninitOkt18.vim	/^                nmap <m-7> <esc>vip $/;"	m
<m-6>	ninitOkt18.vim	/^        nmap <m-6> <esc>vih $/;"	m
<F1>	ninitOkt18.vim	/^        inoremap <F1> <ESC>$/;"	m
<F1>	ninitOkt18.vim	/^        nnoremap <F1> <ESC>$/;"	m
<F1>	ninitOkt18.vim	/^        vnoremap <F1> <ESC>$/;"	m
<F2>	ninitOkt18.vim	/^        nnoremap <buffer> <F2> <Esc>:help <C-r><C-w><CR>$/;"	m
<C-F2>	ninitOkt18.vim	/^        nnoremap <buffer> <C-F2> <Esc>:helpgrep <C-r><C-w><CR>$/;"	m
,h	ninitOkt18.vim	/^        map       ,h          :call ToggleHeader()<CR>$/;"	m
<C-F6>	ninitOkt18.vim	/^        map       <C-F6>      ,h$/;"	m
<C-F6>	ninitOkt18.vim	/^        imap      <C-F6>      <C-O><C-F6>$/;"	m
<C-F7>	ninitOkt18.vim	/^        nnoremap <C-F7> :Scratch<CR>$/;"	m
<F7>	ninitOkt18.vim	/^        nnoremap <F7> :ScratchPreview<CR>$/;"	m
LocationToggle	ninitOkt18.vim	/^        command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	ninitOkt18.vim	/^        function! LocationToggle()$/;"	f
<F8>	ninitOkt18.vim	/^        nnoremap <F8> :LocationToggle<cr>$/;"	m
<LocalLeader>n	ninitOkt18.vim	/^                nnoremap <LocalLeader>n :lnext<cr>zvzz$/;"	m
<LocalLeader>b	ninitOkt18.vim	/^                nnoremap <LocalLeader>b :lprev<cr>zvzz$/;"	m
ToggleQuickFix	ninitOkt18.vim	/^        function! ToggleQuickFix()$/;"	f
<F9>	ninitOkt18.vim	/^        nnoremap <F9> :call ToggleQuickFix()<CR>$/;"	m
<Leader>b	ninitOkt18.vim	/^                nnoremap <Leader>b :cprev<cr>zvzz$/;"	m
<Leader>n	ninitOkt18.vim	/^                nnoremap <Leader>n :cnext<cr>zvzz$/;"	m
<F12>	ninitOkt18.vim	/^                nnoremap <F12> :TagbarToggle<CR>$/;"	m
s	ninitOkt18.vim	/^                nmap s <Nop>$/;"	m
g:textobj_sandwich_no_default_key_mappings	ninitOkt18.vim	/^                let g:textobj_sandwich_no_default_key_mappings = 1$/;"	v
ia	ninitOkt18.vim	/^                omap ia <Plug>(textobj-sandwich-auto-i)$/;"	m
aa	ninitOkt18.vim	/^                omap aa <Plug>(textobj-sandwich-auto-a)$/;"	m
sb	ninitOkt18.vim	/^                vmap sb "zdi sympy.pprint(<c-r>z)<esc>$/;"	m
sn	ninitOkt18.vim	/^                vmap sn "zdi print(<c-r>z)<esc> $/;"	m
g:qf_mapping_ack_style	ninitOkt18.vim	/^                let g:qf_mapping_ack_style = 1$/;"	v
g:qf_window_bottom	ninitOkt18.vim	/^                let g:qf_window_bottom = 0$/;"	v
g:qf_auto_open_loclist	ninitOkt18.vim	/^                let g:qf_auto_open_loclist = 0$/;"	v
g:qf_max_height	ninitOkt18.vim	/^                let g:qf_max_height = 8$/;"	v
g:qf_nowrap	ninitOkt18.vim	/^                let g:qf_nowrap = 1$/;"	v
g:AutoPairs	ninitOkt18.vim	/^                let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}$/;"	v
g:AutoPairsShortcutToggle	ninitOkt18.vim	/^                let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	ninitOkt18.vim	/^                let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	ninitOkt18.vim	/^                let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutBackInsert	ninitOkt18.vim	/^                let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcuts	ninitOkt18.vim	/^                let g:AutoPairsShortcuts = 1$/;"	v
g:AutoPairsMapBS	ninitOkt18.vim	/^                let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	ninitOkt18.vim	/^                let g:AutoPairsMapCR = 0 " insert a new indented line if cursor in pairs.$/;"	v
g:AutoPairsMapSpace	ninitOkt18.vim	/^                let g:AutoPairsMapSpace = 0$/;"	v
g:AutoPairsCenterLine	ninitOkt18.vim	/^                let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	ninitOkt18.vim	/^                let g:AutoPairsFlyMode = 1$/;"	v
g:AutoPairsMapCR	ninitOkt18.vim	/^                let g:AutoPairsMapCR=0$/;"	v
g:AutoPairsMapCh	ninitOkt18.vim	/^                let g:AutoPairsMapCh=1$/;"	v
g:AutoPairsDelete	ninitOkt18.vim	/^                let g:AutoPairsDelete = '<M-5>'$/;"	v
<C-W>r	ninitOkt18.vim	/^                nmap <C-W>r  <Plug>(Visual-Split-Resize)$/;"	m
<C-W>s	ninitOkt18.vim	/^                nmap <C-W>s <Plug>(Visual-Split-Split)$/;"	m
zp	ninitOkt18.vim	/^                nmap zp <Plug>yankstack_substitute_older_paste$/;"	m
zn	ninitOkt18.vim	/^                nmap zn <Plug>yankstack_substitute_newer_paste$/;"	m
cmdline_map_start	ninitOkt18.vim	/^                let cmdline_map_start          = '<LocalLeader>s'$/;"	v
cmdline_map_send	ninitOkt18.vim	/^                let cmdline_map_send           = '<Space>'$/;"	v
cmdline_map_send_and_stay	ninitOkt18.vim	/^                let cmdline_map_send_and_stay  = '<LocalLeader><Space>'$/;"	v
cmdline_map_source_fun	ninitOkt18.vim	/^                let cmdline_map_source_fun     = '<LocalLeader>f'$/;"	v
cmdline_map_send_paragraph	ninitOkt18.vim	/^                let cmdline_map_send_paragraph = '<LocalLeader>p'$/;"	v
cmdline_map_send_block	ninitOkt18.vim	/^                let cmdline_map_send_block     = '<LocalLeader>b'$/;"	v
cmdline_map_quit	ninitOkt18.vim	/^                let cmdline_map_quit           = '<LocalLeader>q'$/;"	v
cmdline_vsplit	ninitOkt18.vim	/^                let cmdline_vsplit      = 1      " Split the window vertically$/;"	v
cmdline_esc_term	ninitOkt18.vim	/^                let cmdline_esc_term    = 1      " Remap <Esc> to :stopinsert in Neovim's terminal$/;"	v
cmdline_in_buffer	ninitOkt18.vim	/^                let cmdline_in_buffer   = 1      " Start the interpreter in a Neovim's terminal$/;"	v
cmdline_term_height	ninitOkt18.vim	/^                let cmdline_term_height = 15     " Initial height of interpreter window or pane$/;"	v
cmdline_term_width	ninitOkt18.vim	/^                let cmdline_term_width  = 80     " Initial width of interpreter window or pane$/;"	v
cmdline_tmp_dir	ninitOkt18.vim	/^                let cmdline_tmp_dir     = '\/tmp' " Temporary directory to save files$/;"	v
cmdline_outhl	ninitOkt18.vim	/^                let cmdline_outhl       = 1      " Syntax highlight the output$/;"	v
cmdline_auto_scroll	ninitOkt18.vim	/^                let cmdline_auto_scroll = 1      " Keep the cursor at the end of terminal (nvim)$/;"	v
cmdline_app	ninitOkt18.vim	/^                let cmdline_app         = {}$/;"	v
cmdline_color_input	ninitOkt18.vim	/^                    let cmdline_color_input    = '#9e9e9e'$/;"	v
cmdline_color_normal	ninitOkt18.vim	/^                    let cmdline_color_normal   = '#00afff'$/;"	v
cmdline_color_number	ninitOkt18.vim	/^                    let cmdline_color_number   = '#00ffff'$/;"	v
cmdline_color_integer	ninitOkt18.vim	/^                    let cmdline_color_integer  = '#00ffff'$/;"	v
cmdline_color_float	ninitOkt18.vim	/^                    let cmdline_color_float    = '#00ffff'$/;"	v
cmdline_color_input	ninitOkt18.vim	/^                    let cmdline_color_input    = 247$/;"	v
cmdline_color_normal	ninitOkt18.vim	/^                    let cmdline_color_normal   =  39$/;"	v
cmdline_color_number	ninitOkt18.vim	/^                    let cmdline_color_number   =  51$/;"	v
cmdline_color_integer	ninitOkt18.vim	/^                    let cmdline_color_integer  =  51$/;"	v
cmdline_color_float	ninitOkt18.vim	/^                    let cmdline_color_float    =  51$/;"	v
cmdline_color_complex	ninitOkt18.vim	/^                    let cmdline_color_complex  =  51$/;"	v
cmdline_color_negnum	ninitOkt18.vim	/^                    let cmdline_color_negnum   = 183$/;"	v
cmdline_color_negfloat	ninitOkt18.vim	/^                    let cmdline_color_negfloat = 183$/;"	v
cmdline_color_date	ninitOkt18.vim	/^                    let cmdline_color_date     =  43$/;"	v
cmdline_color_true	ninitOkt18.vim	/^                    let cmdline_color_true     =  78$/;"	v
cmdline_color_false	ninitOkt18.vim	/^                    let cmdline_color_false    = 203$/;"	v
cmdline_color_inf	ninitOkt18.vim	/^                    let cmdline_color_inf      =  39$/;"	v
cmdline_color_constant	ninitOkt18.vim	/^                    let cmdline_color_constant =  75$/;"	v
cmdline_color_string	ninitOkt18.vim	/^                    let cmdline_color_string   =  79$/;"	v
cmdline_color_stderr	ninitOkt18.vim	/^                    let cmdline_color_stderr   =  33$/;"	v
cmdline_color_error	ninitOkt18.vim	/^                    let cmdline_color_error    =  15$/;"	v
cmdline_color_warn	ninitOkt18.vim	/^                    let cmdline_color_warn     =   1$/;"	v
cmdline_color_index	ninitOkt18.vim	/^                    let cmdline_color_index    = 186$/;"	v
g:side_search_prg	ninitOkt18.vim	/^        let g:side_search_prg = 'ag --word-regexp'$/;"	v
g:side_search_splitter	ninitOkt18.vim	/^        let g:side_search_splitter = 'vnew'$/;"	v
g:side_search_split_pct	ninitOkt18.vim	/^        let g:side_search_split_pct = 0.4$/;"	v
<Leader>ss	ninitOkt18.vim	/^        nnoremap <Leader>ss :SideSearch <C-r><C-w><CR> | wincmd p$/;"	m
SS	ninitOkt18.vim	/^        command! -complete=file -nargs=+ SS execute 'SideSearch <args>'$/;"	c
g:nv_search_paths	ninitOkt18.vim	/^        let g:nv_search_paths = ['~\/git\/aTest\/dotFiles\/nVim', '~\/git\/aTest\/pyLabGitPdbPythonMode27' ]$/;"	v
<Leader>a&	ninitOkt18.vim	/^                nmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a&	ninitOkt18.vim	/^                vmap <Leader>a& :Tabularize \/&<CR>$/;"	m
<Leader>a=	ninitOkt18.vim	/^                nmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=	ninitOkt18.vim	/^                vmap <Leader>a= :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=>	ninitOkt18.vim	/^                nmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>a=>	ninitOkt18.vim	/^                vmap <Leader>a=> :Tabularize \/=><CR>$/;"	m
<Leader>a:	ninitOkt18.vim	/^                nmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a:	ninitOkt18.vim	/^                vmap <Leader>a: :Tabularize \/:<CR>$/;"	m
<Leader>a::	ninitOkt18.vim	/^                nmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a::	ninitOkt18.vim	/^                vmap <Leader>a:: :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a,	ninitOkt18.vim	/^                nmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,	ninitOkt18.vim	/^                vmap <Leader>a, :Tabularize \/,<CR>$/;"	m
<Leader>a,,	ninitOkt18.vim	/^                nmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a,,	ninitOkt18.vim	/^                vmap <Leader>a,, :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a<Bar>	ninitOkt18.vim	/^                nmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a<Bar>	ninitOkt18.vim	/^                vmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
g:table_mode_corner_corner	ninitOkt18.vim	/^                let g:table_mode_corner_corner='+'$/;"	v
g:table_mode_header_fillchar	ninitOkt18.vim	/^                let g:table_mode_header_fillchar='='$/;"	v
NERDTreeShowBookmarks	ninitOkt18.vim	/^         let NERDTreeShowBookmarks=1$/;"	v
NERDTreeIgnore	ninitOkt18.vim	/^         let NERDTreeIgnore=['\\.py[cd]$', '\\~$', '\\.swo$', '\\.swp$', '^\\.git$', '^\\.hg$', '^\\.svn$', '\\.bzr$']$/;"	v
NERDTreeChDirMode	ninitOkt18.vim	/^         let NERDTreeChDirMode=0$/;"	v
NERDTreeQuitOnOpen	ninitOkt18.vim	/^         let NERDTreeQuitOnOpen=1$/;"	v
NERDTreeMouseMode	ninitOkt18.vim	/^         let NERDTreeMouseMode=2$/;"	v
NERDTreeShowHidden	ninitOkt18.vim	/^         let NERDTreeShowHidden=1$/;"	v
NERDTreeKeepTreeInNewTab	ninitOkt18.vim	/^         let NERDTreeKeepTreeInNewTab=1$/;"	v
NERDTreeToggleInCurDir	ninitOkt18.vim	/^         function! NERDTreeToggleInCurDir()$/;"	f
<leader>e	ninitOkt18.vim	/^         map <leader>e :call NERDTreeToggleInCurDir()<CR>$/;"	m
<S-F2>	ninitOkt18.vim	/^         map <S-F2> :call NERDTreeToggleInCurDir()<CR>$/;"	m
<leader>nt	ninitOkt18.vim	/^         nmap <leader>nt :call NERDTreeToggleInCurDir()<CR>$/;"	m
g:NERDDefaultAlign	ninitOkt18.vim	/^         let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDCommentEmptyLines	ninitOkt18.vim	/^         let g:NERDCommentEmptyLines = 1$/;"	v
g:NERDTrimTrailingWhitespace	ninitOkt18.vim	/^         let g:NERDTrimTrailingWhitespace = 1$/;"	v
g:pydoc_cmd	ninitOkt18.vim	/^                let g:pydoc_cmd = 'python -m pydoc'$/;"	v
g:pydoc_open_cmd	ninitOkt18.vim	/^                let g:pydoc_open_cmd = 'vsplit'$/;"	v
g:pydoc_use_drop	ninitOkt18.vim	/^                let g:pydoc_use_drop=1$/;"	v
g:pydoc_window_lines	ninitOkt18.vim	/^                let g:pydoc_window_lines=15$/;"	v
<F3>	ninitOkt18.vim	/^                imap <F3> <Plug>(JavaComplete-Imports-RemoveUnused)$/;"	m
g:user_emmet_settings	ninitOkt18.vim	/^        let g:user_emmet_settings = {$/;"	v
g:user_emmet_expandabbr_key	ninitOkt18.vim	/^        let g:user_emmet_expandabbr_key = '<c-\\>'$/;"	v
g:use_emmet_complete_tag	ninitOkt18.vim	/^        let g:use_emmet_complete_tag = 1$/;"	v
g:python_support_python2_require	ninitOkt18.vim	/^                let g:python_support_python2_require = 0$/;"	v
g:python_support_python3_require	ninitOkt18.vim	/^                let g:python_support_python3_require = 0$/;"	v
DoRemote	ninitOkt18.vim	/^        function! DoRemote(arg)$/;"	f
filetype_settings	ninitOkt18.vim	/^        augroup filetype_settings$/;"	a
SynStack	ninitOkt18.vim	/^        function! <SID>SynStack()$/;"	f
ShowFunc	ninitOkt18.vim	/^        function! ShowFunc()$/;"	f
sf	ninitOkt18.vim	/^        nmap sf :call ShowFunc()<CR>$/;"	m
ShowFuncKeys	ninitOkt18.vim	/^        function! ShowFuncKeys(bang)$/;"	f
ShowFuncKeys	ninitOkt18.vim	/^        com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)$/;"	c
ShowMaps	ninitOkt18.vim	/^        function! s:ShowMaps()$/;"	f
ShowMaps	ninitOkt18.vim	/^        com! ShowMaps call s:ShowMaps()      " Enable :ShowMaps to call the function$/;"	c
sm	ninitOkt18.vim	/^        nnoremap sm :ShowMaps<CR>            " Map keys to call the function$/;"	m
g:SuperTabCompletionContexts	ninitOkt18.vim	/^        let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']$/;"	v
g:SuperTabContextTextOmniPrecedence	ninitOkt18.vim	/^        let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
g:SuperTabContextDiscoverDiscovery	ninitOkt18.vim	/^        let g:SuperTabContextDiscoverDiscovery =$/;"	v
g:SuperTabContextDefaultCompletionType	ninitOkt18.vim	/^        let g:SuperTabContextDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabDefaultCompletionType	ninitOkt18.vim	/^        let g:SuperTabDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabLongestHighlight	ninitOkt18.vim	/^        let g:SuperTabLongestHighlight = 1$/;"	v
g:SuperTabCrMapping	ninitOkt18.vim	/^        let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabClosePreviewOnPopupClose	ninitOkt18.vim	/^        let g:SuperTabClosePreviewOnPopupClose = 1$/;"	v
JumpToCSS	ninitOkt18.vim	/^        function! JumpToCSS()$/;"	f
<c-z>	ninitOkt18.vim	/^        imap <expr> <c-z> TabComplete()$/;"	m
TabComplete	ninitOkt18.vim	/^        function! TabComplete()$/;"	f
IsEmmetExpandable	ninitOkt18.vim	/^        function! IsEmmetExpandable()$/;"	f
s:emmetElements	ninitOkt18.vim	/^        let s:emmetElements = ['a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noframes', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']$/;"	v
g:gitgutter_signs	ninitOkt18.vim	/^        let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	ninitOkt18.vim	/^        let g:gitgutter_max_signs = 2000$/;"	v
E	ninitOkt18.vim	/^        command! -bang E e<bang>$/;"	c
Q	ninitOkt18.vim	/^        command! -bang Q q<bang>$/;"	c
W	ninitOkt18.vim	/^        command! -bang W w<bang>$/;"	c
QA	ninitOkt18.vim	/^        command! -bang QA qa<bang>$/;"	c
Qa	ninitOkt18.vim	/^        command! -bang Qa qa<bang>$/;"	c
Wa	ninitOkt18.vim	/^        command! -bang Wa wa<bang>$/;"	c
WA	ninitOkt18.vim	/^        command! -bang WA wa<bang>$/;"	c
Wq	ninitOkt18.vim	/^        command! -bang Wq wq<bang>$/;"	c
WQ	ninitOkt18.vim	/^        command! -bang WQ wq<bang>$/;"	c
z1	ninitOkt18.vim	/^                nnoremap z1 :set foldlevel=1<cr>$/;"	m
zf	ninitOkt18.vim	/^                nnoremap zf :call FocusLine()<cr>$/;"	m
FocusLine	ninitOkt18.vim	/^                function! FocusLine()$/;"	f
JumpTo	ninitOkt18.vim	/^                function! JumpTo(jumpcommand)$/;"	f
JumpToInSplit	ninitOkt18.vim	/^                function! JumpToInSplit(jumpcommand)$/;"	f
JumpToTag	ninitOkt18.vim	/^                function! JumpToTag()$/;"	f
JumpToTagInSplit	ninitOkt18.vim	/^                function! JumpToTagInSplit()$/;"	f
<C-]>	ninitOkt18.vim	/^                nnoremap <C-]> :silent! call JumpToTag()<cr>$/;"	m
ErrorsToggle	ninitOkt18.vim	/^        command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	ninitOkt18.vim	/^        function! ErrorsToggle() $/;"	f
<Esc><Esc>	ninitOkt18.vim	/^        nnoremap <silent> <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>$/;"	m
n	ninitOkt18.vim	/^        nmap <silent> n nzz$/;"	m
N	ninitOkt18.vim	/^        nmap <silent> N Nzz$/;"	m
g*	ninitOkt18.vim	/^        nmap <silent> g* g*zz$/;"	m
g#	ninitOkt18.vim	/^        nmap <silent> g# g#zz$/;"	m
*	ninitOkt18.vim	/^        vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
#	ninitOkt18.vim	/^        vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
FindFiles	ninitOkt18.vim	/^        command! -nargs=1 FindFiles call FindFiles(<q-args>)$/;"	c
FindFiles	ninitOkt18.vim	/^        function! FindFiles(filename)$/;"	f
Wipeout	ninitOkt18.vim	/^        function! Wipeout()$/;"	f
DiffFoldLevel	ninitOkt18.vim	/^         function! DiffFoldLevel()$/;"	f
ft_diff	ninitOkt18.vim	/^        augroup ft_diff$/;"	a
DiffOrig	ninitOkt18.vim	/^        command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis \\ | wincmd p | diffthis$/;"	c
Diffoff	ninitOkt18.vim	/^        command! Diffoff        diffoff | setlocal nowrap$/;"	c
<leader>c	ninitOkt18.vim	/^        nnoremap <silent> <leader>c \/\\v^[<\\|=>]{7}([^=].+)?$<CR>$/;"	m
w:persistent_cursorline	ninitOkt18.vim	/^                let w:persistent_cursorline = 1$/;"	v
g:airline_theme	ninitOkt18.vim	/^        let g:airline_theme='light'$/;"	v
g:airline_section_c	ninitOkt18.vim	/^        let g:airline_section_c = '%{strftime("%Y %b %d %X")}'$/;"	v
g:airline#extensions#tabline#enabled	ninitOkt18.vim	/^        let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#buffer_min_count	ninitOkt18.vim	/^        let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline#extensions#syntastic#enabled	ninitOkt18.vim	/^        let g:airline#extensions#syntastic#enabled = 1$/;"	v
g:airline#extensions#branch#enabled	ninitOkt18.vim	/^        let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline_symbols	ninitOkt18.vim	/^                let g:airline_symbols = {}$/;"	v
late	ninitOkt18.vim	/^                augroup late-verbose$/;"	a
g:syntastic_always_populate_loc_list	ninitOkt18.vim	/^        let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_check_on_open	ninitOkt18.vim	/^        let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	ninitOkt18.vim	/^        let g:syntastic_check_on_wq = 0$/;"	v
g:systastic_python_checkers	ninitOkt18.vim	/^        let g:systastic_python_checkers = ['pylint', 'python']$/;"	v
g:syntastic_mode_map	ninitOkt18.vim	/^        let g:syntastic_mode_map = {'mode': 'active'}$/;"	v
g:syntastic_python_pylint_quiet_messages	ninitOkt18.vim	/^        let g:syntastic_python_pylint_quiet_messages = {}$/;"	v
g:syntastic_enable_signs	ninitOkt18.vim	/^        let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_enable_highlighting	ninitOkt18.vim	/^        let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_javascript_checkers	ninitOkt18.vim	/^        let g:syntastic_javascript_checkers=['jshint']$/;"	v
g:syntastic_php_checkers	ninitOkt18.vim	/^        let g:syntastic_php_checkers=['php']$/;"	v
g:syntastic_css_checkers	ninitOkt18.vim	/^        let g:syntastic_css_checkers=['csslint']$/;"	v
g:syntastic_python_checkers	ninitOkt18.vim	/^        let g:syntastic_python_checkers = ['flake8']$/;"	v
g:syntastic_error_symbol	ninitOkt18.vim	/^        let g:syntastic_error_symbol = '⚡'$/;"	v
g:syntastic_warning_symbol	ninitOkt18.vim	/^        let g:syntastic_warning_symbol = '⚠'$/;"	v
UsingPython3	ninitOkt18.vim	/^        function! s:UsingPython3()$/;"	f
s:using_python3	ninitOkt18.vim	/^        let s:using_python3 = s:UsingPython3()$/;"	v
s:python_until_eof	ninitOkt18.vim	/^        let s:python_until_eof = s:using_python3 ? "python3 << EOF" : "python << EOF"$/;"	v
s:python_command	ninitOkt18.vim	/^        let s:python_command = s:using_python3 ? "py3 " : "py "$/;"	v
<F4>	ninitOkt18.vim	/^        noremap <buffer> <F4> :w<CR>:!python %<CR>$/;"	m
<C-F4>	ninitOkt18.vim	/^        noremap <buffer> <C-F4> :w<CR>:!clear;python %<CR>$/;"	m
<S-F4>	ninitOkt18.vim	/^        noremap <buffer> <S-F4> :w<CR>:exec '!python' shellescape(@%, 1)<CR>$/;"	m
python_files	ninitOkt18.vim	/^        augroup python_files $/;"	a
DetectPythonVariant	ninitOkt18.vim	/^                function! s:DetectPythonVariant()$/;"	f
g:jedi#use_splits_not_buffers	ninitOkt18.vim	/^                        let g:jedi#use_splits_not_buffers = "left"$/;"	v
g:jedi#popup_on_dot	ninitOkt18.vim	/^                        let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#goto_command	ninitOkt18.vim	/^                        let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	ninitOkt18.vim	/^                        let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	ninitOkt18.vim	/^                        let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	ninitOkt18.vim	/^                        let g:jedi#documentation_command = "M"$/;"	v
g:jedi#usages_command	ninitOkt18.vim	/^                        let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#rename_command	ninitOkt18.vim	/^                        let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#completions_command	ninitOkt18.vim	/^                        let g:jedi#completions_command = "<C-z>"$/;"	v
g:jedi#popup_on_dot	ninitOkt18.vim	/^                        let g:jedi#popup_on_dot = 1$/;"	v
g:jedi#completions_enabled	ninitOkt18.vim	/^                        let g:jedi#completions_enabled = 1$/;"	v
g:jedi#popup_select_first	ninitOkt18.vim	/^                        let g:jedi#popup_select_first = 1$/;"	v
g:jedi#show_call_signatures	ninitOkt18.vim	/^                        let g:jedi#show_call_signatures = "1"$/;"	v
g:jedi#goto_command	ninitOkt18.vim	/^                        let g:jedi#goto_command = "gt"$/;"	v
g:jedi#auto_close_doc	ninitOkt18.vim	/^                        let g:jedi#auto_close_doc = 0  " close preview window after completion$/;"	v
g:jedi#documentation_command	ninitOkt18.vim	/^                        let g:jedi#documentation_command = "gj"$/;"	v
g:pyref_mapping	ninitOkt18.vim	/^                        let g:pyref_mapping = 'gu'$/;"	v
g:pyref_python	ninitOkt18.vim	/^                        let g:pyref_python = 'file:\/\/\/usr\/share\/doc\/python2.7\/html\/index.html'$/;"	v
g:LanguageClient_serverCommands	ninitOkt18.vim	/^                let g:LanguageClient_serverCommands = {$/;"	v
jk	ninitOkt18.vim	/^        inoremap jk <esc>$/;"	m
fu	ninitOkt18.vim	/^        nnoremap fu :syntax sync fromstart<cr>:redraw!<cr>$/;"	m
zu	ninitOkt18.vim	/^        nnoremap zu :<c-u>update<cr>$/;"	m
;e	ninitOkt18.vim	/^        nnoremap ;e :ls<cr>:b<space>$/;"	m
;v	ninitOkt18.vim	/^        nnoremap ;v <c-w>v<c-w>l$/;"	m
;f	ninitOkt18.vim	/^        nnoremap ;f :set tw=70<cr>v<s-}>gq<end>$/;"	m
W	ninitOkt18.vim	/^        nnoremap W gwip$/;"	m
<LocalLeader>a	ninitOkt18.vim	/^        noremap <LocalLeader>a =ip$/;"	m
;;	ninitOkt18.vim	/^        imap            ;;              <ESC>$/;"	m
,R	ninitOkt18.vim	/^        map <expr>      ,R              ":e ".expand("%:r")."."$/;"	m
(	ninitOkt18.vim	/^        nnoremap ( <c-x>:y x\\|@x<cr>$/;"	m
)	ninitOkt18.vim	/^        nnoremap ) <c-a>:y x\\|@x<cr>$/;"	m
Q	ninitOkt18.vim	/^        nnoremap Q @q$/;"	m
Q	ninitOkt18.vim	/^        vnoremap Q :norm @q<cr>$/;"	m
q	ninitOkt18.vim	/^        nmap q <nop>$/;"	m
q	ninitOkt18.vim	/^        nnoremap q q$/;"	m
ss	ninitOkt18.vim	/^        nnoremap ss :wa<cr>$/;"	m
qq	ninitOkt18.vim	/^        nnoremap qq :wa<cr> :bd<cr>$/;"	m
qs	ninitOkt18.vim	/^        nnoremap qs :wa<cr> :qa<cr>$/;"	m
qa	ninitOkt18.vim	/^        nnoremap qa :qa!<cr>$/;"	m
ge	ninitOkt18.vim	/^        nnoremap ge :w<cr>:e #<cr>$/;"	m
qw	ninitOkt18.vim	/^        nnoremap qw <C-w>q<CR>$/;"	m
qo	ninitOkt18.vim	/^        nnoremap qo <C-w>o<CR>$/;"	m
ZZ	ninitOkt18.vim	/^        nnoremap ZZ  <Nop> $/;"	m
ZZ	ninitOkt18.vim	/^        nnoremap ZZ mzzt3<c-u>`z$/;"	m
zs	ninitOkt18.vim	/^        nnoremap zs mzzt3<c-u>`z$/;"	m
zx	ninitOkt18.vim	/^        nnoremap zx mzzt35<c-u>`z$/;"	m
zh	ninitOkt18.vim	/^        nnoremap zh mzzt10<c-u>`z$/;"	m
EE	ninitOkt18.vim	/^        nnoremap EE :source $MYVIMRC<CR>$/;"	m
BB	ninitOkt18.vim	/^        nnoremap BB ggVG$/;"	m
<BS>	ninitOkt18.vim	/^        nnoremap <BS> X$/;"	m
j	ninitOkt18.vim	/^        noremap j gj$/;"	m
k	ninitOkt18.vim	/^        noremap k gk$/;"	m
gj	ninitOkt18.vim	/^        noremap gj j$/;"	m
gk	ninitOkt18.vim	/^        noremap gk k$/;"	m
<C-A>	ninitOkt18.vim	/^        cnoremap <C-A> <Home>$/;"	m
<C-E>	ninitOkt18.vim	/^        cnoremap <C-E> <End>$/;"	m
<C-d>	ninitOkt18.vim	/^        cnoremap <C-d> <Del>$/;"	m
<c-o>	ninitOkt18.vim	/^        nnoremap <c-o> <c-o>zz$/;"	m
<c-i>	ninitOkt18.vim	/^        nnoremap <c-i> <c-i>zz$/;"	m
Y	ninitOkt18.vim	/^        nnoremap Y y\$$/;"	m
H	ninitOkt18.vim	/^        nnoremap H mzJ`z$/;"	m
S	ninitOkt18.vim	/^        nnoremap S i<cr><esc>^mwgk:silent! s\/\\v +$\/\/<cr>:noh<cr>`w$/;"	m
gv	ninitOkt18.vim	/^        nnoremap gv `[v`]$/;"	m
\\	ninitOkt18.vim	/^        noremap \\\\ #*$/;"	m
<C-W>	ninitOkt18.vim	/^        inoremap <C-W> <C-G>u<C-W>$/;"	m
<C-U>	ninitOkt18.vim	/^        inoremap <C-U> <C-G>u<C-U>$/;"	m
dg	ninitOkt18.vim	/^        vmap     dg  :dffget<CR>$/;"	m
dp	ninitOkt18.vim	/^        vmap     dp  :diffput<CR>$/;"	m
do	ninitOkt18.vim	/^        nnoremap do  :diffoff!<cr>$/;"	m
<C-_>	ninitOkt18.vim	/^        inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
g:ag_working_path_mode	ninitOkt18.vim	/^                let g:ag_working_path_mode="r"$/;"	v
g:ctrlp_user_command	ninitOkt18.vim	/^                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_use_caching	ninitOkt18.vim	/^                let g:ctrlp_use_caching = 0$/;"	v
g:ackprg	ninitOkt18.vim	/^                let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
g:unite_source_grep_command	ninitOkt18.vim	/^                let g:unite_source_grep_command = 'ag'$/;"	v
g:unite_source_grep_default_opts	ninitOkt18.vim	/^                let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'$/;"	v
g:unite_source_grep_recursive_opt	ninitOkt18.vim	/^                let g:unite_source_grep_recursive_opt = ''$/;"	v
g:fzf_layout	ninitOkt18.vim	/^        let g:fzf_layout = { 'window': 'enew' }$/;"	v
g:fzf_layout	ninitOkt18.vim	/^        let g:fzf_layout = { 'window': '-tabnew' }$/;"	v
g:fzf_layout	ninitOkt18.vim	/^        let g:fzf_layout = { 'window': '10split enew' }$/;"	v
g:fzf_colors	ninitOkt18.vim	/^        let g:fzf_colors =$/;"	v
fzf_statusline	ninitOkt18.vim	/^        function! s:fzf_statusline()$/;"	f
g:fzf_command_prefix	ninitOkt18.vim	/^        let g:fzf_command_prefix = 'Fzf'$/;"	v
g:fzf_action	ninitOkt18.vim	/^        let g:fzf_action = {$/;"	v
<leader><tab>	ninitOkt18.vim	/^        nmap <leader><tab> <plug>(fzf-maps-n)$/;"	m
<leader><tab>	ninitOkt18.vim	/^        omap <leader><tab> <plug>(fzf-maps-o)$/;"	m
<C-j>	ninitOkt18.vim	/^        imap <expr><C-j> fzf#vim#complete#word({'left': '15%'})$/;"	m
<C-l>	ninitOkt18.vim	/^        imap <C-l> <plug>(fzf-complete-line)$/;"	m
FZFTag	ninitOkt18.vim	/^        command! FZFTag if !empty(tagfiles()) | call fzf#run({$/;"	c
tag_handler	ninitOkt18.vim	/^        function! s:tag_handler(tag)$/;"	f
<Leader>t	ninitOkt18.vim	/^        nnoremap <silent> <Leader>t :FZFTagA<cr>$/;"	m
g:fzf_buffers_jump	ninitOkt18.vim	/^        let g:fzf_buffers_jump = 1$/;"	v
g:fzf_commits_log_options	ninitOkt18.vim	/^        let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'$/;"	v
g:fzf_tags_command	ninitOkt18.vim	/^        let g:fzf_tags_command = 'ctags -R'$/;"	v
g:fzf_commands_expect	ninitOkt18.vim	/^        let g:fzf_commands_expect = 'alt-enter,ctrl-x'$/;"	v
generate_tags	ninitOkt18.vim	/^        let generate_tags=1$/;"	v
g:unite_source_history_yank_save_clipboard	ninitOkt18.vim	/^        let g:unite_source_history_yank_save_clipboard = 1$/;"	v
g:unite_source_mark_marks	ninitOkt18.vim	/^        let g:unite_source_mark_marks = "abcdefghijklmnopqrstuvwxyz"$/;"	v
g:unite_candidate_icon	ninitOkt18.vim	/^        let g:unite_candidate_icon = '∘'$/;"	v
g:unite_source_history_yank_enable	ninitOkt18.vim	/^        let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	ninitOkt18.vim	/^        let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	ninitOkt18.vim	/^        let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	ninitOkt18.vim	/^        let g:unite_force_overwrite_statusline = 1$/;"	v
g:unite_prompt	ninitOkt18.vim	/^        let g:unite_prompt = '::: '$/;"	v
g:unite_marked_icon	ninitOkt18.vim	/^        let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	ninitOkt18.vim	/^        let g:unite_winheight = 15$/;"	v
g:unite_winwidth	ninitOkt18.vim	/^        let g:unite_winwidth = 50$/;"	v
g:unite_update_time	ninitOkt18.vim	/^        let g:unite_update_time = 200$/;"	v
g:unite_split_rule	ninitOkt18.vim	/^        let g:unite_split_rule = 'botright'$/;"	v
g:unite_split_rule	ninitOkt18.vim	/^        let g:unite_split_rule = "topleft"$/;"	v
g:unite_data_directory	ninitOkt18.vim	/^        let g:unite_data_directory ='~\/.config\/nvim\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	ninitOkt18.vim	/^        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	ninitOkt18.vim	/^        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	ninitOkt18.vim	/^        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:ctrlp_cmd	ninitOkt18.vim	/^        let g:ctrlp_cmd = 'CtrlPMRU'$/;"	v
g:ctrlp_extensions	ninitOkt18.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_match_window_bottom	ninitOkt18.vim	/^        let g:ctrlp_match_window_bottom = 0$/;"	v
g:ctrlp_match_window_reversed	ninitOkt18.vim	/^        let g:ctrlp_match_window_reversed = 0$/;"	v
g:ctrlp_custom_ignore	ninitOkt18.vim	/^        let g:ctrlp_custom_ignore = '\\v\\~$|\\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
g:ctrlp_dotfiles	ninitOkt18.vim	/^        let g:ctrlp_dotfiles = 0$/;"	v
g:ctrlp_switch_buffer	ninitOkt18.vim	/^        let g:ctrlp_switch_buffer = 0$/;"	v
g:ctrlp_working_path_mode	ninitOkt18.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_map	ninitOkt18.vim	/^        let g:ctrlp_map = '<leader>p'$/;"	v
g:ctrlp_open_new_file	ninitOkt18.vim	/^        let g:ctrlp_open_new_file = 'R'$/;"	v
g:CommandTMaxFiles	ninitOkt18.vim	/^        let g:CommandTMaxFiles = 10000 " maximum number of files scan.$/;"	v
g:CommandTMaxDepth	ninitOkt18.vim	/^        let g:CommandTMaxDepth = 15$/;"	v
g:CommandTMaxCacheDirectories	ninitOkt18.vim	/^        let g:CommandTMaxCacheDirectories = 1 " 0: no limit.$/;"	v
g:CommandTMaxHeight	ninitOkt18.vim	/^        let g:CommandTMaxHeight = 15 " 0: as much as available space.$/;"	v
g:CommandTMinHeight	ninitOkt18.vim	/^        let g:CommandTMinHeight = 0 " 0: single line.$/;"	v
g:CommandTAlwaysShowDotFiles	ninitOkt18.vim	/^        let g:CommandTAlwaysShowDotFiles = 0 " only if entered string contains a dot$/;"	v
g:CommandTNeverShowDotFiles	ninitOkt18.vim	/^        let g:CommandTNeverShowDotFiles = 0$/;"	v
g:CommandTScanDotDirectories	ninitOkt18.vim	/^        let g:CommandTScanDotDirectories = 0$/;"	v
g:CommandTMatchWindowAtTop	ninitOkt18.vim	/^        let g:CommandTMatchWindowAtTop = 0 " match window appear at bottom.$/;"	v
g:CommandTMatchWindowReverse	ninitOkt18.vim	/^        let g:CommandTMatchWindowReverse = 1 " let the best match at bottom.$/;"	v
g:CommandTTageIncludeFilenames	ninitOkt18.vim	/^        let g:CommandTTageIncludeFilenames = 1 " include filenames when matches$/;"	v
g:ycm_filetype_blacklist	ninitOkt18.vim	/^        let g:ycm_filetype_blacklist = {$/;"	v
g:ycm_confirm_extra_conf	ninitOkt18.vim	/^        let g:ycm_confirm_extra_conf=0$/;"	v
g:ycm_collect_identifiers_from_tags_files	ninitOkt18.vim	/^        let g:ycm_collect_identifiers_from_tags_files=1$/;"	v
g:ycm_min_num_of_chars_for_completion	ninitOkt18.vim	/^        let g:ycm_min_num_of_chars_for_completion=3$/;"	v
g:ycm_cache_omnifunc	ninitOkt18.vim	/^        let g:ycm_cache_omnifunc=0$/;"	v
g:ycm_seed_identifiers_with_syntax	ninitOkt18.vim	/^        let g:ycm_seed_identifiers_with_syntax=1$/;"	v
g:ycm_autoclose_preview_window_after_completion	ninitOkt18.vim	/^        let g:ycm_autoclose_preview_window_after_completion = 1$/;"	v
g:ycm_error_symbol	ninitOkt18.vim	/^        let g:ycm_error_symbol = 'x>'$/;"	v
g:ycm_warning_symbol	ninitOkt18.vim	/^        let g:ycm_warning_symbol = 'w>'$/;"	v
g:ycm_enable_diagnostic_signs	ninitOkt18.vim	/^        let g:ycm_enable_diagnostic_signs = 1$/;"	v
g:ycm_add_preview_to_completeopt	ninitOkt18.vim	/^        let g:ycm_add_preview_to_completeopt = 1$/;"	v
g:ycm_use_ultisnips_completer	ninitOkt18.vim	/^        let g:ycm_use_ultisnips_completer = 1$/;"	v
g:ycm_autoclose_preview_window_after_insertion	ninitOkt18.vim	/^        let g:ycm_autoclose_preview_window_after_insertion = 1$/;"	v
g:ycm_key_detailed_diagnostics	ninitOkt18.vim	/^        let g:ycm_key_detailed_diagnostics = '<leader>d'$/;"	v
g:ycm_key_invoke_completion	ninitOkt18.vim	/^        let g:ycm_key_invoke_completion = '<C-Space>'$/;"	v
g:ycm_key_list_select_completion	ninitOkt18.vim	/^        let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']$/;"	v
g:ycm_key_list_previous_completion	ninitOkt18.vim	/^        let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']$/;"	v
g:ycm_key_list_stop_completion	ninitOkt18.vim	/^        let g:ycm_key_list_stop_completion = ['<C-3>']$/;"	v
<C-;>	ninitOkt18.vim	/^        map <C-;> :YcmCompleter GoToImprecise<CR>$/;"	m
UltiSnipsCallUnite	ninitOkt18.vim	/^        function! UltiSnipsCallUnite()$/;"	f
<F3>	ninitOkt18.vim	/^                inoremap <F3> <C-R>=(pumvisible()? "\\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>$/;"	m
g:UltiSnipsExpandTrigger	ninitOkt18.vim	/^                let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	ninitOkt18.vim	/^                let g:UltiSnipsJumpForwardTrigger="<C-q>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	ninitOkt18.vim	/^                let g:UltiSnipsJumpBackwardTrigger="<S-tab>"$/;"	v
g:neosnippet#snippets_directory	ninitOkt18.vim	/^        let g:neosnippet#snippets_directory = "~\/.config\/nvim\/plugged\/neosnippet-snippets\/neosnippets\/"$/;"	v
<C-s>	ninitOkt18.vim	/^                imap <C-s>    <Plug>(neosnippet_start_unite_snippet)$/;"	m
<C-b>	ninitOkt18.vim	/^                imap <C-b>    <Plug>(neosnippet_expand_or_jump)$/;"	m
<Leader>y	ninitOkt18.vim	/^                nnoremap <Leader>y :<C-u>Unite -buffer-name=neosnippet neosnippet<CR>$/;"	m
<Leader>u	ninitOkt18.vim	/^                nnoremap <Leader>u :Unite help file_mru file buffer file_rec bookmark <CR>$/;"	m
<Leader>\	ninitOkt18.vim	/^                nnoremap <Leader>\\ :Unite -silent -vertical -winwidth=40  -direction=botright -toggle outline<CR>$/;"	m
<Leader>h	ninitOkt18.vim	/^                nnoremap <Leader>h :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>r	ninitOkt18.vim	/^                nnoremap <Leader>r :<C-u>Unite -buffer-name=register register<CR>$/;"	m
<Leader>c	ninitOkt18.vim	/^                nnoremap <Leader>c :<C-u>Unite -buffer-name=change change<CR>$/;"	m
<Leader>j	ninitOkt18.vim	/^                nnoremap <Leader>j :<C-u>Unite -buffer-name=jump jump<CR>$/;"	m
<Leader>'	ninitOkt18.vim	/^                nnoremap <Leader>' :Unite bookmark <CR>$/;"	m
<Leader>l	ninitOkt18.vim	/^                nnoremap <Leader>l :lgrep -R <cword> .<cr>$/;"	m
<Leader>g	ninitOkt18.vim	/^                nnoremap <Leader>g :execute "vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>a	ninitOkt18.vim	/^                nnoremap <Leader>a :Ack <cword> .<cr>$/;"	m
?	ninitOkt18.vim	/^                nnoremap ? :Ack$/;"	m
<Leader>6	ninitOkt18.vim	/^                nmap <Leader>6 :Rg <cword> .<cr>$/;"	m
<Leader>7	ninitOkt18.vim	/^                nmap <Leader>7 :Ag <cword> .<cr>$/;"	m
<Leader>8	ninitOkt18.vim	/^                nmap <Leader>8 <Plug>AgRawSearch <cword> .<cr>$/;"	m
<Leader>/	ninitOkt18.vim	/^                nmap <Leader>\/ <Plug>AgRawSearch$/;"	m
;p	ninitOkt18.vim	/^                nnoremap ;p :CtrlP<cr>$/;"	m
;m	ninitOkt18.vim	/^                nnoremap ;m :CtrlPMRU<cr>$/;"	m
;h	ninitOkt18.vim	/^                nnoremap ;h :CommandTHelp<cr>$/;"	m
;b	ninitOkt18.vim	/^                nnoremap ;b :CommandTBuffer<cr>$/;"	m
g:CommandTCancelMap	ninitOkt18.vim	/^                let g:CommandTCancelMap=['<C-x>', '<C-c>']$/;"	v
<C-o>	ninitOkt18.vim	/^        inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-d>	ninitOkt18.vim	/^        inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-l>	ninitOkt18.vim	/^        inoremap <silent> <C-l> <C-x><C-l>$/;"	m
;d	ninitOkt18.vim	/^        nnoremap ;d mayiw`a:exe "!dict -P - $(echo " . @" . "\\| recode latin1..utf-8)"<CR>$/;"	m
g:tq_language	ninitOkt18.vim	/^        let g:tq_language=['en', 'ru', 'de', 'cn']$/;"	v
<leader>1	ninitOkt18.vim	/^        nnoremap <leader>1 yypVr=$/;"	m
<leader>ft	ninitOkt18.vim	/^        nnoremap <leader>ft Vatzf$/;"	m
<leader>S	ninitOkt18.vim	/^        nnoremap <leader>S ?{<CR>jV\/^\\s*\\}?$<CR>k:sort<CR>:noh<CR>$/;"	m
;l	ninitOkt18.vim	/^        nnoremap ;l :execute "leftabove vsplit" bufname('#')<cr>$/;"	m
;r	ninitOkt18.vim	/^        nnoremap ;r :execute "rightbelow vsplit" bufname('#')<cr>$/;"	m
<C-j>	ninitOkt18.vim	/^        nnoremap <C-j> :bn<cr>$/;"	m
<C-k>	ninitOkt18.vim	/^        nnoremap <C-k> :bp<cr>$/;"	m
<m-right>	ninitOkt18.vim	/^        nnoremap <m-right> :vertical resize +3<cr>$/;"	m
<m-left>	ninitOkt18.vim	/^        nnoremap <m-left> :vertical resize -3<cr>$/;"	m
<m-up>	ninitOkt18.vim	/^        nnoremap <m-up> :resize +3<cr>$/;"	m
<m-down>	ninitOkt18.vim	/^        nnoremap <m-down> :resize -3<cr>$/;"	m
<S-j>	ninitOkt18.vim	/^        noremap <S-j> :PreviewScroll -1<cr>$/;"	m
<S-l>	ninitOkt18.vim	/^        noremap <S-l> :PreviewScroll +1<cr>$/;"	m
ScrollOtherWindow	ninitOkt18.vim	/^        fun! ScrollOtherWindow(dir)$/;"	f
<C-M-Down>	ninitOkt18.vim	/^        nmap <silent> <C-M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<C-M-Up>	ninitOkt18.vim	/^        nmap <silent> <C-M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
g:vim_action_ag_escape_chars	ninitOkt18.vim	/^        let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\\\|'$/;"	v
InsertCountry	ninitOkt18.vim	/^        function! InsertCountry()$/;"	f
InsertCountry	ninitOkt18.vim	/^        command! -nargs=0 InsertCountry call InsertCountry()$/;"	c
Reddit	ninitOkt18.vim	/^function! Reddit()$/;"	f
Reddit	ninitOkt18.vim	/^command! -nargs=0 Reddit call Reddit()$/;"	c
<leader>ac	nJava.vim	/^nnoremap <leader>ac :cd %:p:h <CR> :! javac %:t<CR> :! java %:t:r<CR>$/;"	m
F5	nJava.vim	/^map F5 in the .vimrc file to automate the build$/;"	m
<F5>	nJava.vim	/^map <F5> :call CompileRunGcc()<CR>$/;"	m
CompileRunGcc	nJava.vim	/^func! CompileRunGcc()$/;"	f
g:ycm_global_ycm_extra_conf	nJedi.vim	/^let g:ycm_global_ycm_extra_conf = "~\/.vim\/.ycm_extra_conf.py"$/;"	v
g:ycm_python_binary_path	nJedi.vim	/^let g:ycm_python_binary_path = "\/usr\/local\/Cellar\/python\/2.7.12\/bin\/python"$/;"	v
g:ycm_confirm_extra_conf	nJedi.vim	/^let g:ycm_confirm_extra_conf = 0$/;"	v
g:ycm_key_list_select_completion	nJedi.vim	/^let g:ycm_key_list_select_completion=[]$/;"	v
g:ycm_key_list_previous_completion	nJedi.vim	/^let g:ycm_key_list_previous_completion=[]$/;"	v
g:ycm_filetype_specific_completion_to_disable	nJedi.vim	/^let g:ycm_filetype_specific_completion_to_disable = { 'python' : 1 }$/;"	v
g:ycm_filetype_blacklist	nJedi.vim	/^let g:ycm_filetype_blacklist = { 'python' : 1 }$/;"	v
g:jedi#show_call_signatures_delay	nJedi.vim	/^let g:jedi#show_call_signatures_delay = 1$/;"	v
g:jedi#auto_initialization	nJedi.vim	/^let g:jedi#auto_initialization = 1$/;"	v
g:jedi#auto_vim_configuration	nJedi.vim	/^let g:jedi#auto_vim_configuration = 1$/;"	v
g:jedi#use_tabs_not_buffers	nJedi.vim	/^let g:jedi#use_tabs_not_buffers = 1$/;"	v
g:jedi#popup_on_dot	nJedi.vim	/^let g:jedi#popup_on_dot = 1$/;"	v
g:jedi#popup_select_first	nJedi.vim	/^let g:jedi#popup_select_first = 1$/;"	v
g:jedi#completions_enabled	nJedi.vim	/^let g:jedi#completions_enabled = 1$/;"	v
g:jedi#show_call_signatures	nJedi.vim	/^let g:jedi#show_call_signatures = "1"$/;"	v
g:jedi#goto_command	nJedi.vim	/^let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	nJedi.vim	/^let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	nJedi.vim	/^let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	nJedi.vim	/^let g:jedi#documentation_command = "K"$/;"	v
g:jedi#usages_command	nJedi.vim	/^let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#completions_command	nJedi.vim	/^let g:jedi#completions_command = "<C-Space>"$/;"	v
g:jedi#rename_command	nJedi.vim	/^let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#use_splits_not_buffers	nJedi.vim	/^let g:jedi#use_splits_not_buffers = "left"$/;"	v
g:jedi#popup_on_dot	nJedi.vim	/^let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#goto_command	nJedi.vim	/^let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	nJedi.vim	/^let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	nJedi.vim	/^let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	nJedi.vim	/^let g:jedi#documentation_command = "K"$/;"	v
g:jedi#usages_command	nJedi.vim	/^let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#completions_command	nJedi.vim	/^let g:jedi#completions_command = "<C-Space>"$/;"	v
g:jedi#rename_command	nJedi.vim	/^let g:jedi#rename_command = "<leader>r"$/;"	v
install_plugs	nJediVimrc.vim	/^        let install_plugs=0$/;"	v
vim_plug	nJediVimrc.vim	/^        let vim_plug=expand('~\/.vim\/autoload\/plug.vim')$/;"	v
autoload_dir	nJediVimrc.vim	/^            let autoload_dir=$HOME . "\/.vim\/autoload"$/;"	v
uname	nJediVimrc.vim	/^                let uname=system('uname')$/;"	v
install_plugs	nJediVimrc.vim	/^            let install_plugs=1$/;"	v
<S-Tab>	nJediVimrc.vim	/^        inoremap <S-Tab> <C-V><Tab>$/;"	m
<Down>	nJediVimrc.vim	/^        nnoremap <Down> gj$/;"	m
<Up>	nJediVimrc.vim	/^        nnoremap <Up> gk$/;"	m
<BS>	nJediVimrc.vim	/^        noremap <BS> <Left>X$/;"	m
<S-BS>	nJediVimrc.vim	/^        inoremap <S-BS> <C-o>db$/;"	m
<S-BS>	nJediVimrc.vim	/^        noremap <S-BS> db$/;"	m
<S-Del>	nJediVimrc.vim	/^        inoremap <S-Del> <C-o>dw$/;"	m
<S-Del>	nJediVimrc.vim	/^        noremap <S-Del> dw$/;"	m
output	nJediVimrc.vim	/^        let output=system("find ~\/.vim\/spell\/en.utf-8.add -cnewer ~\/.vim\/spell\/en.utf-8.add.spl | wc -l")$/;"	v
g:tex_flavor	nJediVimrc.vim	/^        let g:tex_flavor='latex'$/;"	v
g:tex_conceal	nJediVimrc.vim	/^        let g:tex_conceal=''$/;"	v
g:airline_theme	nJediVimrc.vim	/^        let g:airline_theme             = 'gruvbox'$/;"	v
g:airline#extensions#branch#enabled	nJediVimrc.vim	/^        let g:airline#extensions#branch#enabled    = 1$/;"	v
g:airline#extensions#ale#enabled	nJediVimrc.vim	/^        let g:airline#extensions#ale#enabled = 1$/;"	v
g:airline_symbols	nJediVimrc.vim	/^            let g:airline_symbols = {}$/;"	v
g:airline_left_sep	nJediVimrc.vim	/^        let g:airline_left_sep = 'â–¶'$/;"	v
g:airline_right_sep	nJediVimrc.vim	/^        let g:airline_right_sep = 'â—€'$/;"	v
g:airline_symbols	nJediVimrc.vim	/^        let g:airline_symbols.branch = 'âŽ‡'$/;"	v
g:airline_symbols	nJediVimrc.vim	/^        let g:airline_symbols.paste = 'âˆ¥'$/;"	v
g:airline_symbols	nJediVimrc.vim	/^        let g:airline_symbols.linenr = 'Â¶'$/;"	v
g:airline_symbols	nJediVimrc.vim	/^        let g:airline_symbols.whitespace = 'Îž'$/;"	v
g:airline#extensions#tabline#enabled	nJediVimrc.vim	/^        let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#bufferline#enabled	nJediVimrc.vim	/^        let g:airline#extensions#bufferline#enabled = 0$/;"	v
g:bufferline_echo	nJediVimrc.vim	/^        let g:bufferline_echo = 0$/;"	v
g:bufferline_rotate	nJediVimrc.vim	/^        let g:bufferline_rotate = 2$/;"	v
g:bufferline_fname_mod	nJediVimrc.vim	/^        let g:bufferline_fname_mod = ':.'$/;"	v
<C-PageUp>	nJediVimrc.vim	/^        nmap <C-PageUp> :bp!<CR>$/;"	m
<C-PageUp>	nJediVimrc.vim	/^        imap <C-PageUp> <C-o>:bp!<CR>$/;"	m
<C-PageDown>	nJediVimrc.vim	/^        nmap <C-PageDown> :bn!<CR>$/;"	m
<C-PageDown>	nJediVimrc.vim	/^        imap <C-PageDown> <C-o>:bn!<CR>$/;"	m
g:ctrlp_by_filename	nJediVimrc.vim	/^        let g:ctrlp_by_filename = 0$/;"	v
g:ctrlp_regexp	nJediVimrc.vim	/^        let g:ctrlp_regexp = 0$/;"	v
g:ctrlp_working_path	nJediVimrc.vim	/^        let g:ctrlp_working_path=0$/;"	v
g:ctrlp_match_window	nJediVimrc.vim	/^        let g:ctrlp_match_window = 'order:ttb,min:10,max:100,results:100'$/;"	v
g:ctrlp_match_func	nJediVimrc.vim	/^        let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }$/;"	v
g:ctrlp_max_files	nJediVimrc.vim	/^        let g:ctrlp_max_files = 0$/;"	v
g:ctrlp_clear_cache_on_exit	nJediVimrc.vim	/^        let g:ctrlp_clear_cache_on_exit = 1$/;"	v
g:ctrlp_custom_ignore	nJediVimrc.vim	/^        let g:ctrlp_custom_ignore = '\\.(class|o|rlib|swp|pyc)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
s:ctrlp_fallback	nJediVimrc.vim	/^            let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'$/;"	v
s:ctrlp_fallback	nJediVimrc.vim	/^            let s:ctrlp_fallback = 'find %s -type f'$/;"	v
g:ctrlp_user_command	nJediVimrc.vim	/^        let g:ctrlp_user_command = {$/;"	v
<C-b>	nJediVimrc.vim	/^        nmap <C-b> :CtrlPBuffer<CR>$/;"	m
<C-b>	nJediVimrc.vim	/^        imap <C-b> <C-o>:CtrlPBuffer<CR>$/;"	m
<C-p>	nJediVimrc.vim	/^        nmap <C-p> :CtrlPMixed<CR>$/;"	m
<C-p>	nJediVimrc.vim	/^        imap <C-p> <C-o>:CtrlPMixed<CR>$/;"	m
<C-f>	nJediVimrc.vim	/^        nnoremap <C-f> :CtrlPFunky<Cr>$/;"	m
g:ctrlp_funky_matchtype	nJediVimrc.vim	/^        let g:ctrlp_funky_matchtype = 'path'$/;"	v
g:ctrlp_funky_syntax_highlight	nJediVimrc.vim	/^        let g:ctrlp_funky_syntax_highlight = 1$/;"	v
<F5>	nJediVimrc.vim	/^        nnoremap <F5> :GundoToggle<CR>$/;"	m
g:jedi#popup_on_dot	nJediVimrc.vim	/^        let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#show_call_signatures	nJediVimrc.vim	/^        let g:jedi#show_call_signatures = 0$/;"	v
g:jedi#use_tabs_not_buffers	nJediVimrc.vim	/^        let g:jedi#use_tabs_not_buffers = 0$/;"	v
g:jedi#goto_command	nJediVimrc.vim	/^        let g:jedi#goto_command = "gd"$/;"	v
g:jedi#documentation_command	nJediVimrc.vim	/^        let g:jedi#documentation_command = "K"$/;"	v
g:jedi#usages_command	nJediVimrc.vim	/^        let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#rename_command	nJediVimrc.vim	/^        let g:jedi#rename_command = "<leader>r"$/;"	v
Togglebg	nJediVimrc.vim	/^        function! Togglebg()$/;"	f
<F6>	nJediVimrc.vim	/^        map <silent> <F6> :call Togglebg()<CR>$/;"	m
<F6>	nJediVimrc.vim	/^        imap <silent> <F6> <ESC>:call Togglebg()<CR>a$/;"	m
<F6>	nJediVimrc.vim	/^        vmap <silent> <F6> <ESC>:call Togglebg()<CR>gv$/;"	m
g:signify_vcs_list	nJediVimrc.vim	/^        let g:signify_vcs_list = ['hg', 'git']$/;"	v
g:echodoc_enable_at_startup	nJediVimrc.vim	/^        let g:echodoc_enable_at_startup = 1$/;"	v
g:acp_enableAtStartup	nJediVimrc.vim	/^        let g:acp_enableAtStartup = 0$/;"	v
g:neocomplete#enable_at_startup	nJediVimrc.vim	/^        let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	nJediVimrc.vim	/^        let g:neocomplete#sources#syntax#min_keyword_length = 3$/;"	v
g:neocomplete#lock_buffer_name_pattern	nJediVimrc.vim	/^        let g:neocomplete#lock_buffer_name_pattern = '\\*ku\\*'$/;"	v
g:neocomplete#enable_smart_case	nJediVimrc.vim	/^        let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#lock_buffer_name_pattern	nJediVimrc.vim	/^        let g:neocomplete#lock_buffer_name_pattern = '\\*ku\\*'$/;"	v
g:neocomplete#enable_auto_delimiter	nJediVimrc.vim	/^        let g:neocomplete#enable_auto_delimiter = 1$/;"	v
g:neocomplete#enable_auto_close_preview	nJediVimrc.vim	/^        let g:neocomplete#enable_auto_close_preview=1$/;"	v
g:neocomplete#sources#dictionary#dictionaries	nJediVimrc.vim	/^        let g:neocomplete#sources#dictionary#dictionaries = {$/;"	v
g:neocomplete#keyword_patterns	nJediVimrc.vim	/^            let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	nJediVimrc.vim	/^        let g:neocomplete#keyword_patterns['default'] = '' "'\\h\\w*'$/;"	v
<C-g>	nJediVimrc.vim	/^        inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-l>	nJediVimrc.vim	/^        inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
g:neocomplete#enable_auto_select	nJediVimrc.vim	/^        let g:neocomplete#enable_auto_select = 1$/;"	v
g:neocomplete#disable_auto_complete	nJediVimrc.vim	/^        let g:neocomplete#disable_auto_complete = 1$/;"	v
g:neocomplete#sources#omni#input_patterns	nJediVimrc.vim	/^          let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#force_omni_input_patterns	nJediVimrc.vim	/^          let g:neocomplete#force_omni_input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	nJediVimrc.vim	/^        let g:neocomplete#sources#omni#input_patterns.rust = '[^.[:digit:] *\\t]\\%(\\.\\|\\::\\)\\%(\\h\\w*\\)\\?'$/;"	v
g:EasyMotion_do_mapping	nJediVimrc.vim	/^        let g:EasyMotion_do_mapping = 0 " Disable default mappings$/;"	v
g:EasyMotion_smartcase	nJediVimrc.vim	/^        let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_use_upper	nJediVimrc.vim	/^        let g:EasyMotion_use_upper = 1$/;"	v
g:incsearch#auto_nohlsearch	nJediVimrc.vim	/^        let g:incsearch#auto_nohlsearch = 1$/;"	v
n	nJediVimrc.vim	/^        map n  <Plug>(incsearch-nohl-n)$/;"	m
N	nJediVimrc.vim	/^        map N  <Plug>(incsearch-nohl-N)$/;"	m
*	nJediVimrc.vim	/^        map *  <Plug>(incsearch-nohl-*)$/;"	m
#	nJediVimrc.vim	/^        map #  <Plug>(incsearch-nohl-#)$/;"	m
g*	nJediVimrc.vim	/^        map g* <Plug>(incsearch-nohl-g*)$/;"	m
g#	nJediVimrc.vim	/^        map g# <Plug>(incsearch-nohl-g#)$/;"	m
/	nJediVimrc.vim	/^        map \/ <Plug>(incsearch-easymotion-\/)$/;"	m
?	nJediVimrc.vim	/^        map ? <Plug>(incsearch-easymotion-?)$/;"	m
h	nJediVimrc.vim	/^        map h <Plug>(easymotion-bd-w)$/;"	m
h	nJediVimrc.vim	/^        omap h <Plug>(easymotion-bd-w)$/;"	m
h	nJediVimrc.vim	/^        vmap h <Plug>(easymotion-bd-w)$/;"	m
g:ackprg	nJediVimrc.vim	/^          let g:ackprg = 'ag --vimgrep'$/;"	v
g:tmuxline_preset	nJediVimrc.vim	/^        let g:tmuxline_preset = {$/;"	v
EmailFormat	nJediVimrc.vim	/^        command -range=% -nargs=* EmailFormat <line1>,<line2>!email_format$/;"	c
EmailFormatBuffer	nJediVimrc.vim	/^        fun EmailFormatBuffer()$/;"	f
InsertFile	nJediVimrc.vim	/^        fun InsertFile(f)$/;"	f
<F2>	nJediVimrc.vim	/^        nnoremap <F2> :call EmailFormatBuffer()<CR>$/;"	m
<F2>	nJediVimrc.vim	/^        vnoremap <F2> :Email_format<CR>$/;"	m
<F3>	nJediVimrc.vim	/^        nnoremap <F3> :call InsertFile('sig_normal')<CR>$/;"	m
<S-F3>	nJediVimrc.vim	/^        nnoremap <S-F3> :call InsertFile('sig_kings')<CR>$/;"	m
<F3>	nJediVimrc.vim	/^        inoremap <F3> <Esc>:call InsertFile('sig_normal')<CR>$/;"	m
<S-F3>	nJediVimrc.vim	/^        inoremap <S-F3> <Esc>:call InsertFile('sig_kings')<CR>$/;"	m
<f4>	nJediVimrc.vim	/^        inoremap <f4> <Esc>O<Esc>:call InsertFile('reminder')<CR>$/;"	m
<f4>	nJediVimrc.vim	/^        nnoremap <f4> O<Esc>:call InsertFile('reminder')<CR><Esc>ggJ$a<Left>$/;"	m
racer_dir	nJediVimrc.vim	/^        let racer_dir=$HOME . "\/.vim\/racer"$/;"	v
g:racer_cmd	nJediVimrc.vim	/^                let g:racer_cmd = ""$/;"	v
g:racer_cmd	nJediVimrc.vim	/^                let g:racer_cmd = "\/home\/ltratt\/.vim\/racer\/target\/release\/racer"$/;"	v
rust_src_dir	nJediVimrc.vim	/^            let rust_src_dir = $HOME . "\/.vim\/rust\/src"$/;"	v
$RUST_SRC_PATH	nJediVimrc.vim	/^            let $RUST_SRC_PATH=rust_src_dir$/;"	v
g:rustfmt_command	nJediVimrc.vim	/^            let g:rustfmt_command=$HOME . "\/.cargo\/bin\/rustfmt"$/;"	v
g:racer_experimental_completer	nJediVimrc.vim	/^        let g:racer_experimental_completer = 1$/;"	v
<F8>	nJediVimrc.vim	/^        nmap <F8> :TagbarToggle<CR>$/;"	m
g:tagbar_ctags_bin	nJediVimrc.vim	/^          let g:tagbar_ctags_bin = "ectags"$/;"	v
g:tagbar_type_rust	nJediVimrc.vim	/^        let g:tagbar_type_rust = {$/;"	v
g:vimtex_imaps_enabled	nJediVimrc.vim	/^        let g:vimtex_imaps_enabled = 0$/;"	v
g:EasyClipShareYanks	nJediVimrc.vim	/^        let g:EasyClipShareYanks = 1$/;"	v
<a-p>	nJediVimrc.vim	/^        nmap <a-p> <plug>EasyClipSwapPasteForward$/;"	m
<a-P>	nJediVimrc.vim	/^        nmap <a-P> <plug>EasyClipSwapPasteBackwards$/;"	m
g:EasyClipUseCutDefaults	nJediVimrc.vim	/^        let g:EasyClipUseCutDefaults = 0$/;"	v
g:EasyClipAlwaysMoveCursorToEndOfPaste	nJediVimrc.vim	/^        let g:EasyClipAlwaysMoveCursorToEndOfPaste = 1$/;"	v
d	nJediVimrc.vim	/^        nmap d <Plug>MoveMotionPlug$/;"	m
dd	nJediVimrc.vim	/^        nmap dd <Plug>MoveMotionLinePlug$/;"	m
<tab>	nJediVimrc.vim	/^        inoremap <silent><tab> <c-r>=CleverTab#Complete('start')<cr>$/;"	m
<s-tab>	nJediVimrc.vim	/^        inoremap <silent><s-tab> <c-r>=CleverTab#Complete('prev')<cr>$/;"	m
g:textobj#quote#educate	nJediVimrc.vim	/^        let g:textobj#quote#educate = 0$/;"	v
textobj_quote	nJediVimrc.vim	/^        augroup textobj_quote$/;"	a
<leader>qc	nJediVimrc.vim	/^        map <silent> <leader>qc <Plug>ReplaceWithCurly$/;"	m
<leader>qs	nJediVimrc.vim	/^        map <silent> <leader>qs <Plug>ReplaceWithStraighit$/;"	m
g:eregex_default_enable	nJediVimrc.vim	/^        let g:eregex_default_enable = 0$/;"	v
g:ale_rust_cargo_check_all_targets	nJediVimrc.vim	/^        let g:ale_rust_cargo_check_all_targets = 1 " Check tests for errors too$/;"	v
<C-k>	nJediVimrc.vim	/^        nmap <silent> <C-k> <Plug>(ale_previous_wrap)$/;"	m
<C-j>	nJediVimrc.vim	/^        nmap <silent> <C-j> <Plug>(ale_next_wrap)$/;"	m
HiInterestingWord	nJediVimrc.vim	/^        function! HiInterestingWord(n)$/;"	f
<leader>0	nJediVimrc.vim	/^        nmap <silent> <leader>0 :call HiInterestingWord(0)<cr>$/;"	m
<leader>1	nJediVimrc.vim	/^        nmap <silent> <leader>1 :call HiInterestingWord(1)<cr>$/;"	m
<leader>2	nJediVimrc.vim	/^        nmap <silent> <leader>2 :call HiInterestingWord(2)<cr>$/;"	m
<leader>3	nJediVimrc.vim	/^        nmap <silent> <leader>3 :call HiInterestingWord(3)<cr>$/;"	m
<leader>4	nJediVimrc.vim	/^        nmap <silent> <leader>4 :call HiInterestingWord(4)<cr>$/;"	m
<leader>5	nJediVimrc.vim	/^        nmap <silent> <leader>5 :call HiInterestingWord(5)<cr>$/;"	m
<leader>6	nJediVimrc.vim	/^        nmap <silent> <leader>6 :call HiInterestingWord(6)<cr>$/;"	m
s:pattern	nJediVimrc.vim	/^        let s:pattern = '^\\(.* \\)\\([1-9][0-9]*\\)$'$/;"	v
s:minfontsize	nJediVimrc.vim	/^        let s:minfontsize = 6$/;"	v
s:maxfontsize	nJediVimrc.vim	/^        let s:maxfontsize = 16$/;"	v
AdjustFontSize	nJediVimrc.vim	/^        function! AdjustFontSize(amount)$/;"	f
LargerFont	nJediVimrc.vim	/^        function! LargerFont()$/;"	f
LargerFont	nJediVimrc.vim	/^        command! LargerFont call LargerFont()$/;"	c
SmallerFont	nJediVimrc.vim	/^        function! SmallerFont()$/;"	f
SmallerFont	nJediVimrc.vim	/^        command! SmallerFont call SmallerFont()$/;"	c
<C-Up>	nJediVimrc.vim	/^        nnoremap <C-Up> :LargerFont<CR>$/;"	m
<C-Down>	nJediVimrc.vim	/^        nnoremap <C-Down> :SmallerFont<CR>$/;"	m
AutoSaveWinView	nJediVimrc.vim	/^        function! AutoSaveWinView()$/;"	f
AutoRestoreWinView	nJediVimrc.vim	/^        function! AutoRestoreWinView()$/;"	f
g:LanguageClient_autoStart	nLanguageClient.vim	/^let g:LanguageClient_autoStart = 1$/;"	v
g:LanguageClient_serverCommands	nLanguageClient.vim	/^let g:LanguageClient_serverCommands = {}$/;"	v
g:LanguageClient_serverCommands	nLanguageClient.vim	/^  let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']$/;"	v
g:LanguageClient_serverCommands	nLanguageClient.vim	/^let g:LanguageClient_serverCommands.python = ['pyls']$/;"	v
<F9>	nMake.vim	/^    nnoremap <F9> :Dispatch<CR>$/;"	m
g:neomake_open_list	nMake.vim	/^let g:neomake_open_list = 2$/;"	v
g:python_host_prog	nMinimumRC.vim	/^let g:python_host_prog = '\/usr\/bin\/python2'$/;"	v
g:python3_host_prog	nMinimumRC.vim	/^let g:python3_host_prog = '\/usr\/bin\/python3'$/;"	v
g:deoplete#enable_at_startup	nMinimumRC.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:nv_default_extension	nNV.vim	/^let g:nv_default_extension = '.md'$/;"	v
g:nv_keymap	nNV.vim	/^let g:nv_keymap = {$/;"	v
g:nv_create_note_key	nNV.vim	/^let g:nv_create_note_key = 'ctrl-x'$/;"	v
g:nv_create_note_window	nNV.vim	/^let g:nv_create_note_window = 'vertical split'$/;"	v
g:nv_show_preview	nNV.vim	/^let g:nv_show_preview = 1$/;"	v
g:nv_wrap_preview_text	nNV.vim	/^let g:nv_wrap_preview_text = 1$/;"	v
g:nv_preview_width	nNV.vim	/^let g:nv_preview_width = 50$/;"	v
g:nv_preview_direction	nNV.vim	/^let g:nv_preview_direction = 'right'$/;"	v
g:nv_yank_key	nNV.vim	/^let g:nv_yank_key = 'ctrl-y'$/;"	v
g:nv_yank_separator	nNV.vim	/^let g:nv_yank_separator = "\\n"$/;"	v
g:nv_use_short_pathnames	nNV.vim	/^let g:nv_use_short_pathnames = 0$/;"	v
g:nv_ignore_pattern	nNV.vim	/^let g:nv_ignore_pattern = ['summarize-*', 'misc*']$/;"	v
g:nv_expect_keys	nNV.vim	/^let g:nv_expect_keys = []$/;"	v
<C-b>	nNV.vim	/^nnoremap <C-b> :Buffers<CR>$/;"	m
<C-g>g	nNV.vim	/^nnoremap <C-g>g :Ag<CR>$/;"	m
<leader><leader>	nNV.vim	/^nnoremap <leader><leader> :Commands<CR>$/;"	m
<C-p>	nNV.vim	/^nnoremap <C-p> :call FzfOmniFiles()<CR>$/;"	m
FzfOmniFiles	nNV.vim	/^fun! FzfOmniFiles()$/;"	f
g:indent_object_except_first_level	noPlug.vim	/^                let g:indent_object_except_first_level = 0$/;"	v
g:AutoPairsShortcutToggle	noPlug.vim	/^                let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	noPlug.vim	/^                let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	noPlug.vim	/^                let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutBackInsert	noPlug.vim	/^                let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsMapBS	noPlug.vim	/^                let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	noPlug.vim	/^                let g:AutoPairsMapCR = 0 " insert a new indented line if cursor in pairs.$/;"	v
g:AutoPairsMapSpace	noPlug.vim	/^                let g:AutoPairsMapSpace = 0$/;"	v
g:AutoPairsCenterLine	noPlug.vim	/^                let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	noPlug.vim	/^                let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsMapCR	noPlug.vim	/^                let g:AutoPairsMapCR=0$/;"	v
g:indentLine_enabled	noPlug.vim	/^                let g:indentLine_enabled = 1$/;"	v
g:indent_guides_auto_colors	noPlug.vim	/^                let g:indent_guides_auto_colors = 1$/;"	v
g:SrcExpl_pluginList	noPlug.vim	/^                let g:SrcExpl_pluginList = [$/;"	v
g:SrcExpl_colorSchemeList	noPlug.vim	/^                let g:SrcExpl_colorSchemeList = [$/;"	v
<F4>	noPlug.vim	/^                nmap <F4> :SrcExplToggle<CR>  $/;"	m
g:SrcExpl_winHeight	noPlug.vim	/^                let g:SrcExpl_winHeight = 8 $/;"	v
g:SrcExpl_refreshTime	noPlug.vim	/^                let g:SrcExpl_refreshTime = 100 $/;"	v
g:SrcExpl_jumpKey	noPlug.vim	/^                let g:SrcExpl_jumpKey = "<ENTER>" $/;"	v
g:SrcExpl_gobackKey	noPlug.vim	/^                let g:SrcExpl_gobackKey = "<SPACE>" $/;"	v
quickfix_mappings	nPathArea51.vim	/^augroup quickfix_mappings$/;"	a
RemoveQuickfixItem	nPathArea51.vim	/^command! RemoveQuickfixItem silent! call RemoveQuickfixItem()$/;"	c
PreviewQuickfixItem	nPathArea51.vim	/^command! PreviewQuickfixItem silent! call PreviewQuickfixItem()$/;"	c
RemoveQuickfixItem	nPathArea51.vim	/^function! RemoveQuickfixItem()$/;"	f
PreviewQuickfixItem	nPathArea51.vim	/^function! PreviewQuickfixItem()$/;"	f
FlipDictionary	nPathArea51.vim	/^function! FlipDictionary(dictionary)$/;"	f
g:airline_theme	nPathArea51.vim	/^let g:airline_theme = 'base16color'$/;"	v
check_for_external_changes	nPathArea51.vim	/^augroup check_for_external_changes$/;"	a
help_local_mappings	nPathArea51.vim	/^augroup help_local_mappings$/;"	a
fullscreen_help_buffer	nPathArea51.vim	/^augroup fullscreen_help_buffer$/;"	a
filetype_settings	nPathArea51.vim	/^augroup filetype_settings$/;"	a
<CR>	nPathArea51.vim	/^inoremap <expr> <CR> pumvisible() ? "\\<C-y>" : "\\<CR>"$/;"	m
misc_commands	nPathArea51.vim	/^augroup misc_commands$/;"	a
RecordGif	nPathArea51.vim	/^function! RecordGif()$/;"	f
RecordGif	nPathArea51.vim	/^command! RecordGif silent! call RecordGif()$/;"	c
goyo_events	nPathArea51.vim	/^augroup goyo_events$/;"	a
g:limelight_conceal_ctermfg	nPathArea51.vim	/^let g:limelight_conceal_ctermfg = 'black'$/;"	v
goyo_enter	nPathArea51.vim	/^  function! s:goyo_enter()$/;"	f
goyo_leave	nPathArea51.vim	/^  function! s:goyo_leave()$/;"	f
OpenWritableSearchBufferFromQuickfix	nPathArea51.vim	/^function! OpenWritableSearchBufferFromQuickfix()$/;"	f
OpenWritableSearchBufferFromQuickfix	nPathArea51.vim	/^command! OpenWritableSearchBufferFromQuickfix silent! call OpenWritableSearchBufferFromQuickfix()$/;"	c
DuplicateCurrentFile	nPathArea51.vim	/^function! DuplicateCurrentFile(path)$/;"	f
Duplicate	nPathArea51.vim	/^command! -bar -nargs=1 Duplicate call DuplicateCurrentFile(<q-args>)$/;"	c
SortLinesByLength	nPathArea51.vim	/^function! SortLinesByLength() range$/;"	f
PhpSortImports	nPathArea51.vim	/^function! PhpSortImports(...)$/;"	f
PhpSortImports	nPathArea51.vim	/^command! -bar PhpSortImports call PhpSortImports()$/;"	c
PhpSortImportsByLength	nPathArea51.vim	/^command! -bar PhpSortImportsByLength call PhpSortImports('length')$/;"	c
<Leader>psi	nPathArea51.vim	/^nmap <Leader>psi :PhpSortImports<CR>$/;"	m
<Leader>psl	nPathArea51.vim	/^nmap <Leader>psl :PhpSortImportsByLength<CR>$/;"	m
g:ctrlsf_ackprg	nPathArea51.vim	/^let g:ctrlsf_ackprg = '\/usr\/local\/bin\/ag'$/;"	v
g:ctrlsf_auto_focus	nPathArea51.vim	/^let g:ctrlsf_auto_focus = {$/;"	v
CtrlSFSmart	nPathArea51.vim	/^command! -n=* -comp=customlist,ctrlsf#comp#Completion CtrlSFSmart call ctrlsf#Search(agriculture#smart_quote_input(<q-args>))$/;"	c
<Leader><Leader><Leader>/	nPathArea51.vim	/^nmap <Leader><Leader><Leader>\/ :CtrlSFSmart<Space>$/;"	m
mapleader	nPathMaps.vim	/^let mapleader = "\\<Space>"$/;"	v
jk	nPathMaps.vim	/^imap jk <Esc>$/;"	m
jk	nPathMaps.vim	/^cnoremap jk <C-c>$/;"	m
<Leader>jk	nPathMaps.vim	/^nmap <silent> <Leader>jk :nohlsearch<CR>$/;"	m
<Leader>q	nPathMaps.vim	/^nmap <Leader>q :q<CR>$/;"	m
<Leader>w	nPathMaps.vim	/^nmap <Leader>w :w<CR>$/;"	m
jw	nPathMaps.vim	/^imap jw <Esc>:w<CR>$/;"	m
<D-s>	nPathMaps.vim	/^map <D-s> <Esc>:w<CR>$/;"	m
<M-s>	nPathMaps.vim	/^map <M-s> <Esc>:w<CR>$/;"	m
<C-s>	nPathMaps.vim	/^map <C-s> <Esc>:w<CR>$/;"	m
<Leader>R	nPathMaps.vim	/^nmap <silent> <Leader>R :w<CR>:call system('chrome-cli reload')<CR>$/;"	m
<Leader><Leader>w	nPathMaps.vim	/^nmap <Leader><Leader>w :w<CR>:so %<CR>$/;"	m
<Leader><Leader>o	nPathMaps.vim	/^nmap <silent> <Leader><Leader>o :!open $PWD<CR><CR>$/;"	m
<Leader><Leader>b	nPathMaps.vim	/^nmap <silent> <Leader><Leader>b :!valet open<CR><CR>$/;"	m
<Tab>	nPathMaps.vim	/^nnoremap <Tab> <C-w>w$/;"	m
<S-Tab>	nPathMaps.vim	/^nnoremap <S-Tab> <C-w>W$/;"	m
<Leader>o	nPathMaps.vim	/^nnoremap <Leader>o <C-w>o$/;"	m
<Leader>c	nPathMaps.vim	/^nmap <silent> <Leader>c :BD<CR>$/;"	m
g:gitgutter_map_keys	nPathMaps.vim	/^let g:gitgutter_map_keys = 0$/;"	v
[c	nPathMaps.vim	/^nmap [c <Plug>GitGutterPrevHunk$/;"	m
]c	nPathMaps.vim	/^nmap ]c <Plug>GitGutterNextHunk$/;"	m
<Leader>f	nPathMaps.vim	/^nmap <Leader>f :GFiles<CR>$/;"	m
<Leader>F	nPathMaps.vim	/^nmap <Leader>F :Files<CR>$/;"	m
<Leader>t	nPathMaps.vim	/^nmap <Leader>t :BTags<CR>$/;"	m
<Leader>T	nPathMaps.vim	/^nmap <Leader>T :Tags<CR>$/;"	m
<Leader>b	nPathMaps.vim	/^nmap <Leader>b :Buffers<CR>$/;"	m
<Leader>l	nPathMaps.vim	/^nmap <Leader>l :BLines<CR>$/;"	m
<Leader>L	nPathMaps.vim	/^nmap <Leader>L :Lines<CR>$/;"	m
<Leader>h	nPathMaps.vim	/^nmap <Leader>h :History<CR>$/;"	m
<Leader>:	nPathMaps.vim	/^nmap <Leader>: :History:<CR>$/;"	m
<Leader>M	nPathMaps.vim	/^nmap <Leader>M :Maps<CR>$/;"	m
<Leader>C	nPathMaps.vim	/^nmap <Leader>C :Commands<CR>$/;"	m
<Leader>'	nPathMaps.vim	/^nmap <Leader>' :Marks<CR>$/;"	m
<Leader>s	nPathMaps.vim	/^nmap <Leader>s :Filetypes<CR>$/;"	m
<Leader>S	nPathMaps.vim	/^nmap <Leader>S :Snippets<CR>$/;"	m
<Leader><Leader>h	nPathMaps.vim	/^nmap <Leader><Leader>h :Helptags!<CR>$/;"	m
<Leader>/	nPathMaps.vim	/^nmap <Leader>\/ <Plug>AgRawSearch$/;"	m
<Leader>/	nPathMaps.vim	/^vmap <Leader>\/ <Plug>AgRawVisualSelection$/;"	m
<Leader>*	nPathMaps.vim	/^nmap <Leader>* <Plug>AgRawWordUnderCursor$/;"	m
<Leader>rt	nPathMaps.vim	/^nmap <Leader>rt :w<CR>:TestToggleStrategy<CR>$/;"	m
<Leader>rs	nPathMaps.vim	/^nmap <Leader>rs :w<CR>:TestSuite<CR>$/;"	m
<Leader>rf	nPathMaps.vim	/^nmap <Leader>rf :w<CR>:TestFile<CR>$/;"	m
<Leader>rl	nPathMaps.vim	/^nmap <Leader>rl :w<CR>:TestLast<CR>$/;"	m
<Leader>rn	nPathMaps.vim	/^nmap <Leader>rn :w<CR>:TestNearest<CR>$/;"	m
<Leader>rv	nPathMaps.vim	/^nmap <Leader>rv :w<CR>:TestVisit<CR>$/;"	m
<Leader><Leader>r	nPathMaps.vim	/^nmap <Leader><Leader>r :Run!<Space>$/;"	m
<Leader><Leader>i	nPathMaps.vim	/^nmap <Leader><Leader>i :Run! in<Space>$/;"	m
<Leader><Leader>p	nPathMaps.vim	/^nmap <Leader><Leader>p :Run! in project<Space>$/;"	m
<Leader><Leader>a	nPathMaps.vim	/^nmap <Leader><Leader>a :Run! art<Space>$/;"	m
<Leader><Leader>gst	nPathMaps.vim	/^nmap <Leader><Leader>gst :Gstatus<CR><Space>o$/;"	m
<Leader><Leader>gc	nPathMaps.vim	/^nmap <Leader><Leader>gc :Gcommit<CR><Space>o$/;"	m
<Leader><Leader>gbl	nPathMaps.vim	/^nmap <Leader><Leader>gbl :Gblame<CR>$/;"	m
<Leader><Leader>gbr	nPathMaps.vim	/^nmap <Leader><Leader>gbr :Gbrowse<CR>$/;"	m
<Leader><Tab>	nPathMaps.vim	/^nmap <Leader><Tab> :NERDTreeToggle<CR>$/;"	m
<Leader><Leader><Tab>	nPathMaps.vim	/^nmap <Leader><Leader><Tab> :NERDTree<CR>$/;"	m
<Leader><Leader><Tab>f	nPathMaps.vim	/^nmap <Leader><Leader><Tab>f :NERDTreeFind<CR>zz$/;"	m
<Leader>\	nPathMaps.vim	/^nmap <Leader>\\ :TagbarToggle<CR>$/;"	m
<Leader><Leader>u	nPathMaps.vim	/^nmap <Leader><Leader>u :UndotreeToggle<CR>$/;"	m
f	nPathMaps.vim	/^map f <Plug>Sneak_f$/;"	m
F	nPathMaps.vim	/^map F <Plug>Sneak_F$/;"	m
t	nPathMaps.vim	/^map t <Plug>Sneak_t$/;"	m
T	nPathMaps.vim	/^map T <Plug>Sneak_T$/;"	m
<Leader>d	nPathMaps.vim	/^nmap <Leader>d 0D$/;"	m
<S-CR>	nPathMaps.vim	/^nmap <S-CR> O<Esc>$/;"	m
<CR>	nPathMaps.vim	/^nmap <CR> o<Esc>$/;"	m
<Leader><CR>	nPathMaps.vim	/^nnoremap <Leader><CR> o<C-o>O$/;"	m
;;	nPathMaps.vim	/^imap ;; <Esc>A;<Esc>$/;"	m
,,	nPathMaps.vim	/^imap ,, <Esc>A,<Esc>$/;"	m
<C-j>	nPathMaps.vim	/^nnoremap <C-j> :m .+1<CR>==$/;"	m
<C-k>	nPathMaps.vim	/^nnoremap <C-k> :m .-2<CR>==$/;"	m
<C-j>	nPathMaps.vim	/^inoremap <C-j> <Esc>:m .+1<CR>==gi$/;"	m
<C-k>	nPathMaps.vim	/^inoremap <C-k> <Esc>:m .-2<CR>==gi$/;"	m
<C-j>	nPathMaps.vim	/^vnoremap <C-j> :m '>+1<CR>gv=gv$/;"	m
<C-k>	nPathMaps.vim	/^vnoremap <C-k> :m '<-2<CR>gv=gv$/;"	m
,	nPathMaps.vim	/^inoremap , ,<C-g>u$/;"	m
.	nPathMaps.vim	/^inoremap . .<C-g>u$/;"	m
!	nPathMaps.vim	/^inoremap ! !<C-g>u$/;"	m
?	nPathMaps.vim	/^inoremap ? ?<C-g>u$/;"	m
Q	nPathMaps.vim	/^nnoremap Q @q<CR>$/;"	m
ga	nPathMaps.vim	/^nmap ga <Plug>(EasyAlign)$/;"	m
g:UltiSnipsExpandTrigger	nPathMaps.vim	/^let g:UltiSnipsExpandTrigger = "<tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	nPathMaps.vim	/^let g:UltiSnipsJumpForwardTrigger = "<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	nPathMaps.vim	/^let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"$/;"	v
<Leader>p	nPathMaps.vim	/^nnoremap <Leader>p :call phpactor#ContextMenu()<CR>$/;"	m
<Leader>pg	nPathMaps.vim	/^nnoremap <Leader>pg :call phpactor#GotoDefinition()<CR>$/;"	m
<Leader>pi	nPathMaps.vim	/^nnoremap <Leader>pi :call phpactor#UseAdd()<CR>$/;"	m
<Leader>pt	nPathMaps.vim	/^nnoremap <Leader>pt :call phpactor#Transform()<CR>$/;"	m
<Leader>D	nPathMaps.vim	/^nnoremap <Leader>D :call pdv#DocumentWithSnip()<CR>$/;"	m
<C-e>	nPathMaps.vim	/^imap <C-e> <plug>(emmet-expand-abbr)$/;"	m
]e	nPathMaps.vim	/^nmap ]e <plug>(emmet-move-next)$/;"	m
[e	nPathMaps.vim	/^nmap [e <plug>(emmet-move-prev)$/;"	m
<Leader>B	nPathMaps.vim	/^nnoremap <Leader>B :Breakpoint<CR>$/;"	m
<Leader>V	nPathMaps.vim	/^nnoremap <Leader>V :VdebugStart<CR>$/;"	m
<Leader><Leader>q	nPathMaps.vim	/^nnoremap <Leader><Leader>q :call ToggleQuickfixList()<CR>$/;"	m
<Leader><Leader>l	nPathMaps.vim	/^nnoremap <Leader><Leader>l :call ToggleLocationList()<CR>$/;"	m
QuickfixLocalMappings	nPathMaps.vim	/^function! QuickfixLocalMappings()$/;"	f
HelpLocalMappings	nPathMaps.vim	/^function! HelpLocalMappings()$/;"	f
<Leader><Leader>v	nPathMaps.vim	/^nmap <Leader><Leader>v :EditVimrc<CR>$/;"	m
<Leader><Leader>vm	nPathMaps.vim	/^nmap <Leader><Leader>vm :EditVimMappings<CR>$/;"	m
<Leader><Leader>vp	nPathMaps.vim	/^nmap <Leader><Leader>vp :EditVimPlugins<CR>$/;"	m
VimrcLocalMappings	nPathMaps.vim	/^function! VimrcLocalMappings()$/;"	f
g:explicit_annotation_bindings	nPathPlug.vim	/^let g:explicit_annotation_bindings = {$/;"	v
g:BufKillCreateMappings	nPathPlug.vim	/^let g:BufKillCreateMappings = 0$/;"	v
g:toggle_list_no_mappings	nPathPlug.vim	/^let g:toggle_list_no_mappings = 1$/;"	v
g:NERDTreeWinSize	nPathPlug.vim	/^let g:NERDTreeWinSize=45$/;"	v
g:NERDTreeQuitOnOpen	nPathPlug.vim	/^let g:NERDTreeQuitOnOpen = 1$/;"	v
g:phpactorBranch	nPathPlug.vim	/^let g:phpactorBranch = 'develop'$/;"	v
g:peekaboo_window	nPathPlug.vim	/^let g:peekaboo_window = 'vertical botright 60new'$/;"	v
g:UltiSnipsSnippetsDir	nPathPlug.vim	/^let g:UltiSnipsSnippetsDir = "~\/.vim\/UltiSnips"$/;"	v
g:pdv_template_dir	nPathPlug.vim	/^let g:pdv_template_dir = $HOME . "\/.vim\/plugged\/pdv\/templates_snip"$/;"	v
g:deoplete#enable_at_startup	nPathPlug.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:vdebug_options	nPathPlug.vim	/^let g:vdebug_options= {$/;"	v
g:vim_markdown_frontmatter	nPathPlug.vim	/^let g:vim_markdown_frontmatter = 1$/;"	v
g:nremap	nPathPlug.vim	/^let g:nremap = {"[e": "", "]e": ""}$/;"	v
g:targets_seekRanges	nPathPlug.vim	/^let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB'$/;"	v
g:writable_search_new_buffer_command	nPathPlug.vim	/^let g:writable_search_new_buffer_command = 'enew'$/;"	v
g:netrw_banner	nPathPlug.vim	/^let g:netrw_banner = 0$/;"	v
g:netrw_liststyle	nPathPlug.vim	/^let g:netrw_liststyle = 3$/;"	v
g:netrw_browse_split	nPathPlug.vim	/^let g:netrw_browse_split = 1$/;"	v
g:netrw_winsize	nPathPlug.vim	/^let g:netrw_winsize = 25$/;"	v
<C-n>	nPathPlug.vim	/^noremap <C-n> :bn<CR>$/;"	m
<C-p>	nPathPlug.vim	/^noremap <C-p> :bp<CR>$/;"	m
<Leader>c	nPathPlug.vim	/^noremap <Leader>c :set cursorline! cursorcolumn!<CR>$/;"	m
<F2>	nPathPlug.vim	/^noremap <F2> :w !diff '%' -<CR>$/;"	m
<F4>	nPathPlug.vim	/^noremap <F4> :setlocal spell! spelllang=en_us<CR>$/;"	m
<F5>	nPathPlug.vim	/^noremap <F5> :SyntasticCheck<CR>$/;"	m
<Leader>,	nPathPlug.vim	/^noremap <Leader>, :nohlsearch<CR>$/;"	m
<C-J>	nPathPlug.vim	/^nnoremap <C-J> <C-W><C-J>$/;"	m
<C-K>	nPathPlug.vim	/^nnoremap <C-K> <C-W><C-K>$/;"	m
<C-L>	nPathPlug.vim	/^nnoremap <C-L> <C-W><C-L>$/;"	m
<C-H>	nPathPlug.vim	/^nnoremap <C-H> <C-W><C-H>$/;"	m
<Leader>-	nPathPlug.vim	/^nnoremap <Leader>- :resize -1<CR>$/;"	m
<Leader>=	nPathPlug.vim	/^nnoremap <Leader>= :resize +1<CR>$/;"	m
<C-A>	nPathPlug.vim	/^cnoremap <C-A> <C-B>$/;"	m
w!!	nPathPlug.vim	/^cnoremap w!! w !sudo tee % >\/dev\/null$/;"	m
g:ale_sign_error	nPathPlug.vim	/^let g:ale_sign_error = '!'$/;"	v
g:ale_sign_style_error	nPathPlug.vim	/^let g:ale_sign_style_error = '!'$/;"	v
g:ale_sign_warning	nPathPlug.vim	/^let g:ale_sign_warning = '!'$/;"	v
g:ale_sign_style_warning	nPathPlug.vim	/^let g:ale_sign_style_warning = '!'$/;"	v
g:ale_linters	nPathPlug.vim	/^let g:ale_linters = {$/;"	v
g:ale_php_phpcs_standard	nPathPlug.vim	/^let g:ale_php_phpcs_standard = 'PSR2'$/;"	v
g:ycm_server_python_interpreter	nPathPlug.vim	/^let g:ycm_server_python_interpreter = $HOME . '\/.vim\/venv\/bin\/python'$/;"	v
g:fzf_colors	nPathPlug.vim	/^let g:fzf_colors = {$/;"	v
Mapsn	nPathPlug.vim	/^command! Mapsn call fzf#vim#maps('n', 0)$/;"	c
Mapsx	nPathPlug.vim	/^command! Mapsx call fzf#vim#maps('x', 0)$/;"	c
Mapso	nPathPlug.vim	/^command! Mapso call fzf#vim#maps('o', 0)$/;"	c
Mapsi	nPathPlug.vim	/^command! Mapsi call fzf#vim#maps('i', 0)$/;"	c
Mapsv	nPathPlug.vim	/^command! Mapsv call fzf#vim#maps('v', 0)$/;"	c
Mapsa	nPathPlug.vim	/^command! Mapsa call fzf#vim#maps('a', 0)$/;"	c
$	nPathPlug.vim	/^command! ${1:Name} ${0:call SomeFunction()}$/;"	c
g:syntastic_error_symbol	nPathPlug.vim	/^let g:syntastic_error_symbol = '✗'$/;"	v
g:syntastic_warning_symbol	nPathPlug.vim	/^let g:syntastic_warning_symbol = '!'$/;"	v
g:syntastic_always_populate_loc_list	nPathPlug.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	nPathPlug.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	nPathPlug.vim	/^let g:syntastic_check_on_open = 0$/;"	v
g:syntastic_check_on_wq	nPathPlug.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:syntastic_sh_shellcheck_args	nPathPlug.vim	/^let g:syntastic_sh_shellcheck_args = "-x"$/;"	v
g:syntastic_python_checkers	nPathPlug.vim	/^let g:syntastic_python_checkers = ['pyflakes']$/;"	v
g:syntastic_python_pylint_args	nPathPlug.vim	/^let g:syntastic_python_pylint_args='-f parseable -r n'$/;"	v
g:syntastic_python_flake8_args	nPathPlug.vim	/^let g:syntastic_python_flake8_args = "--ignore=E402,F403,E501,E302,F811"$/;"	v
g:syntastic_python_pyflakes_args	nPathPlug.vim	/^let g:syntastic_python_pyflakes_args = "--ignore=E402,F403,E501,E302,F811"$/;"	v
g:dotfiles_path	nPath.vim	/^let g:dotfiles_path = $HOME . '\/.dotfiles'$/;"	v
VimrcPath	nPath.vim	/^function! VimrcPath(path)$/;"	f
g:vimrc_related_paths	nPath.vim	/^let g:vimrc_related_paths = [$/;"	v
source_config_files_in	nPath.vim	/^function! s:source_config_files_in(folder)$/;"	f
autosource_vimrc	nPath.vim	/^augroup autosource_vimrc$/;"	a
vimrc_local_mappings	nPathVimrc.vim	/^augroup vimrc_local_mappings$/;"	a
EditVimrc	nPathVimrc.vim	/^command! EditVimrc call EditVimConfig('vimrc')$/;"	c
EditVimMappings	nPathVimrc.vim	/^command! EditVimMappings call EditVimConfig('mappings.vim')$/;"	c
EditVimPlugins	nPathVimrc.vim	/^command! EditVimPlugins call EditVimConfig('plugins.vim')$/;"	c
EditVimConfig	nPathVimrc.vim	/^function! EditVimConfig(file)$/;"	f
GoToRelatedVimrcConfig	nPathVimrc.vim	/^command! GoToRelatedVimrcConfig call GoToRelatedVimrcConfig()$/;"	c
GoToRelatedVimrcMappings	nPathVimrc.vim	/^command! GoToRelatedVimrcMappings call GoToRelatedVimrcMappings()$/;"	c
GoToRelatedPlugDefinition	nPathVimrc.vim	/^command! GoToRelatedPlugDefinition call GoToRelatedPlugDefinition()$/;"	c
GoToRelatedVimrcConfig	nPathVimrc.vim	/^function! GoToRelatedVimrcConfig()$/;"	f
GoToRelatedVimrcMappings	nPathVimrc.vim	/^function! GoToRelatedVimrcMappings()$/;"	f
GoToRelatedPlugDefinition	nPathVimrc.vim	/^function! GoToRelatedPlugDefinition()$/;"	f
get_ref	nPathVimrc.vim	/^function! s:get_ref()$/;"	f
get_ref_from_annotation	nPathVimrc.vim	/^function! s:get_ref_from_annotation()$/;"	f
get_ref_for_current_config_file	nPathVimrc.vim	/^function! s:get_ref_for_current_config_file()$/;"	f
get_ref_from_plug_definition	nPathVimrc.vim	/^function! s:get_ref_from_plug_definition()$/;"	f
build_annotation_for_ref	nPathVimrc.vim	/^function! s:build_annotation_for_ref(ref)$/;"	f
go_to_ref	nPathVimrc.vim	/^function! s:go_to_ref(ref)$/;"	f
GoToPluginUrl	nPathVimrc.vim	/^command! GoToPluginUrl call GoToPluginUrl()$/;"	c
YankPluginUrl	nPathVimrc.vim	/^command! YankPluginUrl call YankPluginUrl()$/;"	c
PastePluginFromClipboard	nPathVimrc.vim	/^command! PastePluginFromClipboard call PastePluginFromClipboard()$/;"	c
GoToPluginUrl	nPathVimrc.vim	/^function! GoToPluginUrl()$/;"	f
YankPluginUrl	nPathVimrc.vim	/^function! YankPluginUrl()$/;"	f
PastePluginFromClipboard	nPathVimrc.vim	/^function! PastePluginFromClipboard()$/;"	f
get_installable_plugin_from_clipboard	nPathVimrc.vim	/^function! s:get_installable_plugin_from_clipboard()$/;"	f
g:trans_directions_list	nPlug.vim	/^            let g:trans_directions_list = [$/;"	v
g:trans_save_history	nPlug.vim	/^            let g:trans_save_history = 1$/;"	v
g:SrcExpl_pluginList	nPlug.vim	/^            let g:SrcExpl_pluginList = [$/;"	v
g:SrcExpl_colorSchemeList	nPlug.vim	/^            let g:SrcExpl_colorSchemeList = [$/;"	v
<F4>	nPlug.vim	/^            nmap <F4> :SrcExplToggle<CR>  $/;"	m
g:SrcExpl_winHeight	nPlug.vim	/^            let g:SrcExpl_winHeight = 8 $/;"	v
g:SrcExpl_refreshTime	nPlug.vim	/^            let g:SrcExpl_refreshTime = 100 $/;"	v
g:SrcExpl_jumpKey	nPlug.vim	/^            let g:SrcExpl_jumpKey = "<ENTER>" $/;"	v
g:SrcExpl_gobackKey	nPlug.vim	/^            let g:SrcExpl_gobackKey = "<SPACE>" $/;"	v
g:indent_guides_auto_colors	nPlug.vim	/^            let g:indent_guides_auto_colors = 0$/;"	v
b:vimpipe_command	nPlug.vim	/^            let b:vimpipe_command="lynx -dump -stdin"$/;"	v
b:vimpipe_command	nPlug.vim	/^            let b:vimpipe_command='jslint <(cat)'$/;"	v
b:vimpipe_command	nPlug.vim	/^            let b:vimpipe_command="python -m json.tool"$/;"	v
b:vimpipe_command	nPlug.vim	/^            let b:vimpipe_command="multimarkdown"$/;"	v
g:coveragepy_uncovered_sign	nPlug.vim	/^            let g:coveragepy_uncovered_sign = '-'$/;"	v
g:brightest#highlight	nPlug.vim	/^             let g:brightest#highlight = { "group" : "Define" }$/;"	v
g:session_persist_globals	nPlug.vim	/^            let g:session_persist_globals = ['&sessionoptions']$/;"	v
g:session_autosave	nPlug.vim	/^            let g:session_autosave = 'yes'$/;"	v
g:highlightedyank_highlight_duration	nPlug.vim	/^            let g:highlightedyank_highlight_duration = -1$/;"	v
g:yankring_window_use_bottom	nPlug.vim	/^                let g:yankring_window_use_bottom = 1$/;"	v
g:yankring_window_use_horiz	nPlug.vim	/^                let g:yankring_window_use_horiz = 1  " Use vertical split 0$/;"	v
g:yankring_window_height	nPlug.vim	/^                let g:yankring_window_height = 12$/;"	v
g:yankring_record_insert	nPlug.vim	/^                let g:yankring_record_insert = 1$/;"	v
g:yankring_window_auto_close	nPlug.vim	/^                let g:yankring_window_auto_close = 1$/;"	v
g:yankring_window_use_separate	nPlug.vim	/^                let g:yankring_window_use_separate = 1$/;"	v
g:yankring_persist	nPlug.vim	/^                let g:yankring_persist = 1$/;"	v
g:yankring_max_history	nPlug.vim	/^                let g:yankring_max_history = 100$/;"	v
g:yankring_replace_n_nkey	nPlug.vim	/^                let g:yankring_replace_n_nkey = 'zb'$/;"	v
timings	nProfile.vim	/^let timings=[]                      $/;"	v
initialize_ref_viewer	nProspects.vim	/^        function! s:initialize_ref_viewer()$/;"	f
g:memolist_path	nProspects.vim	/^let g:memolist_path = "$HOME\/.vim\/memolist"$/;"	v
g:memolist_memo_suffix	nProspects.vim	/^let g:memolist_memo_suffix = "mkd"$/;"	v
g:memolist_memo_date	nProspects.vim	/^let g:memolist_memo_date = "%Y-%m-%d %H:%M"$/;"	v
g:memolist_memo_date	nProspects.vim	/^let g:memolist_memo_date = "epoch"$/;"	v
g:memolist_memo_date	nProspects.vim	/^let g:memolist_memo_date = "%D %T"$/;"	v
g:memolist_prompt_tags	nProspects.vim	/^let g:memolist_prompt_tags = 1$/;"	v
g:memolist_prompt_categories	nProspects.vim	/^let g:memolist_prompt_categories = 1$/;"	v
g:memolist_qfixgrep	nProspects.vim	/^let g:memolist_qfixgrep = 0$/;"	v
g:memolist_vimfiler	nProspects.vim	/^let g:memolist_vimfiler = 1$/;"	v
g:memolist_template_dir_path	nProspects.vim	/^let g:memolist_template_dir_path = "$HOME\/.vim\/memolist"$/;"	v
<Space>mn	nProspects.vim	/^map <Space>mn  :MemoNew<CR>$/;"	m
<Space>ml	nProspects.vim	/^map <Space>ml  :MemoList<CR>$/;"	m
<Space>mg	nProspects.vim	/^map <Space>mg  :MemoGrep<CR>$/;"	m
b:match_ignorecase	nProspects.vim	/^let b:match_ignorecase = 1$/;"	v
W	nProspects.vim	/^map W  <Plug>(smartword-w)$/;"	m
B	nProspects.vim	/^map B  <Plug>(smartword-b)$/;"	m
E	nProspects.vim	/^map E  <Plug>(smartword-e)$/;"	m
TheSilverSearcher	nPyAgSearch.vim	/^        function! TheSilverSearcher()$/;"	f
Search	nPyAgSearch.vim	/^        command Search call TheSilverSearcher()$/;"	c
<Leader>sp	nPyAgSearch.vim	/^        nnoremap <Leader>sp :Search<CR>$/;"	m
WrapWordWith	nPyAgSearch.vim	/^        function! WrapWordWith()$/;"	f
WrapWith	nPyAgSearch.vim	/^        command! WrapWith call WrapWordWith()$/;"	c
<Leader>ww	nPyAgSearch.vim	/^        nnoremap <Leader>ww :WrapWith<CR>$/;"	m
g:jedi#use_tabs_not_buffers	nPyJedi.vim	/^let g:jedi#use_tabs_not_buffers = 1$/;"	v
g:jedi#use_splits_not_buffers	nPyJedi.vim	/^let g:jedi#use_splits_not_buffers = "left"$/;"	v
g:jedi#popup_on_dot	nPyJedi.vim	/^let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#goto_command	nPyJedi.vim	/^let g:jedi#goto_command = "<leader>d"$/;"	v
g:jedi#goto_assignments_command	nPyJedi.vim	/^let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	nPyJedi.vim	/^let g:jedi#goto_definitions_command = ""$/;"	v
g:jedi#documentation_command	nPyJedi.vim	/^let g:jedi#documentation_command = "K"$/;"	v
g:jedi#usages_command	nPyJedi.vim	/^let g:jedi#usages_command = "<leader>n"$/;"	v
g:jedi#completions_command	nPyJedi.vim	/^let g:jedi#completions_command = "<C-Space>"$/;"	v
g:jedi#rename_command	nPyJedi.vim	/^let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#completions_enabled	nPyJedi.vim	/^let g:jedi#completions_enabled = 0$/;"	v
ropevim_vim_completion	nPyMode.vim	/^let ropevim_vim_completion = 1$/;"	v
ropevim_extended_complete	nPyMode.vim	/^let ropevim_extended_complete = 1$/;"	v
g:ropevim_autoimport_modules	nPyMode.vim	/^let g:ropevim_autoimport_modules = ["os.*","traceback","django.*", "xml.etree"]$/;"	v
<c-space>	nPyMode.vim	/^imap <c-space> <C-R>=RopeCodeAssistInsertMode()<CR>$/;"	m
g:pymode	nPyMode.vim	/^        let g:pymode = 1$/;"	v
g:pymode_run	nPyMode.vim	/^                let g:pymode_run = 1$/;"	v
g:pymode_run_bind	nPyMode.vim	/^                let g:pymode_run_bind = '<leader>1'$/;"	v
g:pymode_breakpoint	nPyMode.vim	/^                let g:pymode_breakpoint = 1$/;"	v
g:pymode_breakpoint_bind	nPyMode.vim	/^                let g:pymode_breakpoint_bind = '<leader>2'$/;"	v
g:pymode_breakpoint_bind	nPyMode.vim	/^                let g:pymode_breakpoint_bind = '<C-2>'$/;"	v
g:pymode_doc	nPyMode.vim	/^                let g:pymode_doc = 1$/;"	v
g:pymode_doc_bind	nPyMode.vim	/^                let g:pymode_doc_bind = 'M'$/;"	v
g:pymode_lint_checkers	nPyMode.vim	/^                let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']$/;"	v
g:pymode_lint_on_fly	nPyMode.vim	/^                let g:pymode_lint_on_fly = 1$/;"	v
g:pymode_lint_message	nPyMode.vim	/^                let g:pymode_lint_message = 1$/;"	v
g:pymode_lint_ignore	nPyMode.vim	/^                let g:pymode_lint_ignore = ["E501", "W",]$/;"	v
g:pymode_lint_select	nPyMode.vim	/^                let g:pymode_lint_select = ["E501", "W0011", "W430"]$/;"	v
g:pymode_lint_sort	nPyMode.vim	/^                let g:pymode_lint_sort = ['E', 'C', 'I']$/;"	v
g:pymode_lint_todo_symbol	nPyMode.vim	/^                let g:pymode_lint_todo_symbol = 'WW'$/;"	v
g:pymode_lint_comment_symbol	nPyMode.vim	/^                let g:pymode_lint_comment_symbol = 'CC'$/;"	v
g:pymode_lint_visual_symbol	nPyMode.vim	/^                let g:pymode_lint_visual_symbol = 'RR'$/;"	v
g:pymode_lint_error_symbol	nPyMode.vim	/^                let g:pymode_lint_error_symbol = 'EE'$/;"	v
g:pymode_lint_info_symbol	nPyMode.vim	/^                let g:pymode_lint_info_symbol = 'II'$/;"	v
g:pymode_lint_pyflakes_symbol	nPyMode.vim	/^                let g:pymode_lint_pyflakes_symbol = 'FF'$/;"	v
g:pymode_rope_vim_completion	nPyMode.vim	/^                let g:pymode_rope_vim_completion = 1$/;"	v
g:pymode_rope_completion	nPyMode.vim	/^                let g:pymode_rope_completion = 1$/;"	v
g:pymode_rope_autoimport_modules	nPyMode.vim	/^                let g:pymode_rope_autoimport_modules = ["os", "shutil", "datetime"]$/;"	v
g:python_support_python2_require	nPythonSuport.vim	/^let g:python_support_python2_require = 0$/;"	v
g:python_support_python3_require	nPythonSuport.vim	/^let g:python_support_python3_require = 0$/;"	v
g:python_support_python3_requirements	nPythonSuport.vim	/^let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'flake8')$/;"	v
g:python_support_python2_requirements	nPythonSuport.vim	/^let g:python_support_python2_requirements = add(get(g:,'python_support_python2_requirements',[]),'flake8')$/;"	v
g:python_support_python2_venv	nPythonSuport.vim	/^let g:python_support_python2_venv = 0$/;"	v
g:python_support_python3_venv	nPythonSuport.vim	/^let g:python_support_python3_venv = 0$/;"	v
g:pymode_doc	nPy.vim	/^                let g:pymode_doc = 1 " Load show documentation plugin$/;"	v
g:pymode_doc_key	nPy.vim	/^                let g:pymode_doc_key = 'K' " Key for show python documentation$/;"	v
g:pydoc	nPy.vim	/^                let g:pydoc = 'pydoc' " Executable command for documentation search$/;"	v
g:pymode_run	nPy.vim	/^                let g:pymode_run = 1 " Load run code plugin$/;"	v
g:pymode_run_key	nPy.vim	/^                let g:pymode_run_key = '<LocalLeader>r' " Key for run python code$/;"	v
g:pymode_lint	nPy.vim	/^                let g:pymode_lint = 1 " Load pylint code plugin$/;"	v
g:pymode_lint_checker	nPy.vim	/^                let g:pymode_lint_checker = "pyflakes" " pylint, pyflakes or PEP8$/;"	v
g:pymode_lint_config	nPy.vim	/^                let g:pymode_lint_config = "$HOME\/.pylintrc" " Pylint configuration file$/;"	v
g:pymode_lint_write	nPy.vim	/^                let g:pymode_lint_write = 1 " Check code every save$/;"	v
g:pymode_lint_cwindow	nPy.vim	/^                let g:pymode_lint_cwindow = 1 " Auto open cwindow if errors be finded$/;"	v
g:pymode_lint_jump	nPy.vim	/^                let g:pymode_lint_jump = 1 " Auto jump on first error$/;"	v
g:pymode_lint_signs	nPy.vim	/^                let g:pymode_lint_signs = 1 " Place error signs$/;"	v
g:pymode_lint_minheight	nPy.vim	/^                let g:pymode_lint_minheight = 3 " Minimal height of pylint error window$/;"	v
g:pymode_lint_maxheight	nPy.vim	/^                let g:pymode_lint_maxheight = 6 " Maximal height of pylint error window$/;"	v
g:pymode_rope	nPy.vim	/^                let g:pymode_rope = 1 " Load rope plugin$/;"	v
g:pymode_rope_auto_project	nPy.vim	/^                let g:pymode_rope_auto_project = 1 " Auto create and open ropeproject$/;"	v
g:pymode_rope_enable_autoimport	nPy.vim	/^                let g:pymode_rope_enable_autoimport = 1 " Enable autoimport$/;"	v
g:pymode_rope_autoimport_generate	nPy.vim	/^                let g:pymode_rope_autoimport_generate = 1 " Auto generate global cache$/;"	v
g:pymode_rope_autoimport_underlineds	nPy.vim	/^                let g:pymode_rope_autoimport_underlineds = 0$/;"	v
g:pymode_rope_codeassist_maxfixes	nPy.vim	/^                let g:pymode_rope_codeassist_maxfixes = 10$/;"	v
g:pymode_rope_sorted_completions	nPy.vim	/^                let g:pymode_rope_sorted_completions = 1$/;"	v
g:pymode_rope_extended_complete	nPy.vim	/^                let g:pymode_rope_extended_complete = 1$/;"	v
g:pymode_rope_autoimport_modules	nPy.vim	/^                let g:pymode_rope_autoimport_modules = ["os","shutil","datetime"]$/;"	v
g:pymode_rope_confirm_saving	nPy.vim	/^                let g:pymode_rope_confirm_saving = 1$/;"	v
g:pymode_rope_global_prefix	nPy.vim	/^                let g:pymode_rope_global_prefix = "<C-x>p"$/;"	v
g:pymode_rope_local_prefix	nPy.vim	/^                let g:pymode_rope_local_prefix = "<C-c>r"$/;"	v
g:pymode_rope_vim_completion	nPy.vim	/^                let g:pymode_rope_vim_completion = 1 " use vim's complete function.$/;"	v
g:pymode_rope_guess_project	nPy.vim	/^                let g:pymode_rope_guess_project = 0 " scan project slow completion speed$/;"	v
g:pymode_rope_goto_def_newwin	nPy.vim	/^                let g:pymode_rope_goto_def_newwin = 1$/;"	v
g:pymode_rope_always_show_complete_menu	nPy.vim	/^                let g:pymode_rope_always_show_complete_menu = 1 " default=0$/;"	v
g:pymode_breakpoint	nPy.vim	/^                let g:pymode_breakpoint = 1 " Load breakpoints plugin$/;"	v
g:pymode_breakpoint_key	nPy.vim	/^                let g:pymode_breakpoint_key = '<LocalLeader>b' " set\/unset breakpoint$/;"	v
g:pymode_utils_whitespaces	nPy.vim	/^                let g:pymode_utils_whitespaces = 1 " Autoremove unused whitespaces$/;"	v
g:pymode_options_indent	nPy.vim	/^                let g:pymode_options_indent = 1 " default pymode python indent options$/;"	v
g:pymode_options_fold	nPy.vim	/^                let g:pymode_options_fold = 1 " Set default pymode python fold options$/;"	v
g:pymode_options_other	nPy.vim	/^                let g:pymode_options_other = 1 " Set default pymode python other options$/;"	v
g:pymode_utils	nPy.vim	/^                let g:pymode_utils = 1 " utils script$/;"	v
g:pymode_utils_whitespaces	nPy.vim	/^                let g:pymode_utils_whitespaces = 1 " autoremove unused whitespaces$/;"	v
g:pymode_virtualenv	nPy.vim	/^                let g:pymode_virtualenv = 1 " virtualenv support$/;"	v
g:pymode_syntax	nPy.vim	/^                let g:pymode_syntax = 1 " use custom syntax highlighting$/;"	v
g:pymode_syntax_builtin_objs	nPy.vim	/^                let g:pymode_syntax_builtin_objs = 1$/;"	v
g:pymode_syntax_builtin_funcs	nPy.vim	/^                let g:pymode_syntax_builtin_funcs = 1$/;"	v
g:pymode_options_indent	nPy.vim	/^                let g:pymode_options_indent = 1$/;"	v
g:pymode_options_fold	nPy.vim	/^                let g:pymode_options_fold = 1$/;"	v
g:pymode_options_other	nPy.vim	/^                let g:pymode_options_other = 1$/;"	v
g:pymode_motion	nPy.vim	/^                let g:pymode_motion = 1 " pymode enable some python motions.$/;"	v
<leader>j	nPy.vim	/^map <leader>j !python -m json.tool<CR>$/;"	m
[C	nPy.vim	/^  noremap [C :<C-U>PrevUncovered<CR>$/;"	m
]C	nPy.vim	/^  noremap ]C :<C-U>NextUncovered<CR>$/;"	m
python_highlight_all	nPy.vim	/^  let python_highlight_all = 1$/;"	v
python_slow_sync	nPy.vim	/^  let python_slow_sync = 1$/;"	v
loaded_snips	nSnipMate.vim	/^let loaded_snips = 1$/;"	v
s:save_cpo	nSnipMate.vim	/^let s:save_cpo = &cpo$/;"	v
g:snipMateSources	nSnipMate.vim	/^  let g:snipMateSources = {}$/;"	v
g:snipMateSources	nSnipMate.vim	/^  let g:snipMateSources['default'] = funcref#Function('snipMate#DefaultPool')$/;"	v
SnipMateDetect	nSnipMate.vim	/^augroup SnipMateDetect$/;"	a
<Plug>snipMateNextOrTrigger	nSnipMate.vim	/^inoremap <silent> <Plug>snipMateNextOrTrigger  <C-R>=snipMate#TriggerSnippet()<CR>$/;"	m
<Plug>snipMateTrigger	nSnipMate.vim	/^inoremap <silent> <Plug>snipMateTrigger        <C-R>=snipMate#TriggerSnippet(1)<CR>$/;"	m
<Plug>snipMateBack	nSnipMate.vim	/^inoremap <silent> <Plug>snipMateBack           <C-R>=snipMate#BackwardsSnippet()<CR>$/;"	m
<Plug>snipMateShow	nSnipMate.vim	/^inoremap <silent> <Plug>snipMateShow           <C-R>=snipMate#ShowAvailableSnips()<CR>$/;"	m
g:snips_author	nSnipMate.vim	/^	let g:snips_author = 'Me'$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate = {}$/;"	v
g:snipMate	nSnipMate.vim	/^let g:snipMate['no_match_completion_feedkeys_chars'] =$/;"	v
g:snipMate	nSnipMate.vim	/^let g:snipMate.scope_aliases = get(g:snipMate, 'scope_aliases', {})$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.objc =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.cpp =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.cu =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.xhtml =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.html =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.php =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.ur =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.mxml =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.eruby =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.scss =$/;"	v
g:snipMate	nSnipMate.vim	/^	let g:snipMate.scope_aliases.less =$/;"	v
g:snipMate	nSnipMate.vim	/^let g:snipMate['get_snippets'] = get(g:snipMate, 'get_snippets', funcref#Function("snipMate#GetSnippets"))$/;"	v
g:snipMate	nSnipMate.vim	/^let g:snipMate['get_scopes'] = get(g:snipMate, 'get_scopes', funcref#Function('return split(&ft,"\\\\.")+[&syntax, "_"]'))$/;"	v
grab_visual	nSnipMate.vim	/^function! s:grab_visual() abort$/;"	f
load_scopes	nSnipMate.vim	/^function! s:load_scopes(bang, ...) abort$/;"	f
SnipMateLoadScope	nSnipMate.vim	/^command! -bang -bar -nargs=+ SnipMateLoadScope$/;"	c
SnipMateOpenSnippetFiles	nSnipMate.vim	/^command! SnipMateOpenSnippetFiles call snipMate#OpenSnippetFiles()$/;"	c
s:ics	nTagBar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	nTagBar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
b:current_syntax	nTagBar.vim	/^let b:current_syntax = "tagbar"$/;"	v
MRU_Max_Entries	nTest.vim	/^        let MRU_Max_Entries = 400$/;"	v
<leader>f	nTest.vim	/^        map <leader>f :MRU<CR>$/;"	m
<F4>	nTest.vim	/^map          <F4> :sign unplace *<CR> <bar>:ccl<CR>$/;"	m
<F4>	nTest.vim	/^imap         <F4> <C-O>:sign unplace *<CR>$/;"	m
<F5>	nTest.vim	/^map          <F5> :make<CR>$/;"	m
<F5>	nTest.vim	/^imap         <F5> <C-O>:make<CR>$/;"	m
<C-f>	nTest.vim	/^noremap <expr> <C-f> (line('w0') <= 1         ? 'k' : "\\<C-y>")$/;"	m
<C-b>	nTest.vim	/^noremap <expr> <C-b> (line('w$') >= line('$') ? 'j' : "\\<C-e>")$/;"	m
gv	nTest.vim	/^nnoremap gv `[v`]$/;"	m
?n	nTest.vim	/^        nmap ?n ]s$/;"	m
?p	nTest.vim	/^        nmap ?p [s$/;"	m
?+	nTest.vim	/^        nmap ?+ zg$/;"	m
??	nTest.vim	/^        nmap ?? z=$/;"	m
zz	nTest.vim	/^        nnoremap zz z=$/;"	m
z=	nTest.vim	/^        nnoremap z= :echo "use zz you idiot"<cr>$/;"	m
;s	nTest.vim	/^    nmap  ;s     :set invspell spelllang=en<CR>$/;"	m
;ss	nTest.vim	/^    nmap  ;ss    :set    spell spelllang=en-basic<CR>$/;"	m
zz	nTest.vim	/^nnoremap zz z=$/;"	m
z=	nTest.vim	/^nnoremap z= :echo "use zz you idiot"<cr>$/;"	m
zh	nTest.vim	/^nnoremap zh mzzt10<c-u>`z$/;"	m
<C-_>	nTest.vim	/^inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
<F12>	nTest.vim	/^nnoremap <F12> :TagbarToggle<CR>$/;"	m
g:ctrlp_working_path_mode	nTest.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_map	nTest.vim	/^        let g:ctrlp_map = '<c-f>'$/;"	v
<leader>j	nTest.vim	/^        map <leader>j :CtrlP<cr>$/;"	m
<c-b>	nTest.vim	/^        map <c-b> :CtrlPBuffer<cr>$/;"	m
g:ctrlp_max_height	nTest.vim	/^        let g:ctrlp_max_height = 20$/;"	v
g:ctrlp_custom_ignore	nTest.vim	/^        let g:ctrlp_custom_ignore = 'node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee'$/;"	v
g:ctrlp_dont_split	nTest.vim	/^        let g:ctrlp_dont_split = 'NERD_tree_2'$/;"	v
g:ctrlp_jump_to_buffer	nTest.vim	/^        let g:ctrlp_jump_to_buffer = 0$/;"	v
g:ctrlp_working_path_mode	nTest.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_match_window_reversed	nTest.vim	/^        let g:ctrlp_match_window_reversed = 1$/;"	v
g:ctrlp_split_window	nTest.vim	/^        let g:ctrlp_split_window = 0$/;"	v
g:ctrlp_max_height	nTest.vim	/^        let g:ctrlp_max_height = 20$/;"	v
g:ctrlp_extensions	nTest.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_map	nTest.vim	/^        let g:ctrlp_map = '<leader>,'$/;"	v
<leader>.	nTest.vim	/^        nnoremap <leader>. :CtrlPTag<cr>$/;"	m
<leader>b	nTest.vim	/^        nnoremap <leader>b :CtrlPBuffer<cr>$/;"	m
<c-b>	nTest.vim	/^        nnoremap <c-b> :CtrlPBuffer<cr>$/;"	m
g:ctrlp_prompt_mappings	nTest.vim	/^        let g:ctrlp_prompt_mappings = {$/;"	v
my_ctrlp_ffind_command	nTest.vim	/^        let my_ctrlp_ffind_command = "ffind --semi-restricted --dir %s --type e -B -f"$/;"	v
g:ctrlp_user_command	nTest.vim	/^        let g:ctrlp_user_command = my_ctrlp_ffind_command$/;"	v
g:unite_source_menu_menus	nTest.vim	/^        let g:unite_source_menu_menus = {}$/;"	v
[menu]	nTest.vim	/^        nnoremap [menu] <Nop>$/;"	m
<LocalLeader>	nTest.vim	/^        nmap <LocalLeader> [menu]$/;"	m
[menu]u	nTest.vim	/^        nnoremap <silent>[menu]u :Unite -silent -winheight=20 menu<CR>$/;"	m
<Leader>o	nTest.vim	/^        nnoremap <silent><Leader>o :Unite -silent -start-insert file<CR>$/;"	m
<Leader>O	nTest.vim	/^        nnoremap <silent><Leader>O :Unite -silent -start-insert file_rec\/async<CR>$/;"	m
<Leader>m	nTest.vim	/^        nnoremap <silent><Leader>m :Unite -silent file_mru<CR>$/;"	m
<Leader>b	nTest.vim	/^        nnoremap <silent><Leader>b :Unite -silent buffer<CR>$/;"	m
<Leader>B	nTest.vim	/^        nnoremap <silent><Leader>B :Unite -silent tab<CR>$/;"	m
<Leader>f	nTest.vim	/^        nnoremap <silent><Leader>f :Unite -silent -no-split -start-insert -auto-preview$/;"	m
[menu]8	nTest.vim	/^        nnoremap <silent>[menu]8 :UniteWithCursorWord -silent -no-split -auto-preview$/;"	m
<Leader>i	nTest.vim	/^        nnoremap <silent><Leader>i :Unite -silent history\/yank<CR>$/;"	m
g<C-h>	nTest.vim	/^        nnoremap <silent> g<C-h> :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>;	nTest.vim	/^        nnoremap <silent><Leader>; :Unite -silent -toggle$/;"	m
<Leader>t	nTest.vim	/^        nnoremap <silent><Leader>t :Unite -silent -vertical -winwidth=40$/;"	m
g:unite_source_history_yank_enable	nTest.vim	/^        let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	nTest.vim	/^        let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	nTest.vim	/^        let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	nTest.vim	/^        let g:unite_force_overwrite_statusline = 0$/;"	v
g:unite_prompt	nTest.vim	/^        let g:unite_prompt = '>>> '$/;"	v
g:unite_marked_icon	nTest.vim	/^        let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	nTest.vim	/^        let g:unite_winheight = 15$/;"	v
g:unite_update_time	nTest.vim	/^        let g:unite_update_time = 200$/;"	v
g:unite_split_rule	nTest.vim	/^        let g:unite_split_rule = 'botright'$/;"	v
g:unite_data_directory	nTest.vim	/^        let g:unite_data_directory =OH_MY_VIM.'\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	nTest.vim	/^        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	nTest.vim	/^        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	nTest.vim	/^        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
ir	nTest.vim	/^onoremap ir i[$/;"	m
ar	nTest.vim	/^onoremap ar a[$/;"	m
ir	nTest.vim	/^vnoremap ir i[$/;"	m
ar	nTest.vim	/^vnoremap ar a[$/;"	m
N	nTest.vim	/^onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>$/;"	m
aN	nTest.vim	/^onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>$/;"	m
iN	nTest.vim	/^onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>$/;"	m
NumberTextObject	nTest.vim	/^function! s:NumberTextObject(whole)$/;"	f
ErrorsToggle	nTest.vim	/^command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	nTest.vim	/^function! ErrorsToggle() " {{{$/;"	f
LocationToggle	nTest.vim	/^command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	nTest.vim	/^function! LocationToggle() " {{{$/;"	f
QFixToggle	nTest.vim	/^command! -bang -nargs=? QFixToggle call QFixToggle(<bang>0)$/;"	c
QFixToggle	nTest.vim	/^function! QFixToggle(forced) " {{{$/;"	f
<f4>	nTest.vim	/^nmap <silent> <f4> :QFixToggle<cr>$/;"	m
<f3>	nTest.vim	/^nmap <silent> <f3> :LocationToggle<cr>$/;"	m
s:sessiondir	nTest.vim	/^let s:sessiondir  = expand("~\/.vim\/sessions", 1)$/;"	v
s:sessionfile	nTest.vim	/^let s:sessionfile = expand(s:sessiondir . "\/session.vim", 1)$/;"	v
s:sessionlock	nTest.vim	/^let s:sessionlock = expand(s:sessiondir . "\/session.lock", 1)$/;"	v
g:paredit_smartjump	nTest.vim	/^        let g:paredit_smartjump = 1$/;"	v
g:paredit_shortmaps	nTest.vim	/^        let g:paredit_shortmaps = 0$/;"	v
g:paredit_electric_return	nTest.vim	/^        let g:paredit_electric_return = 1$/;"	v
g:paredit_matchlines	nTest.vim	/^        let g:paredit_matchlines = 200$/;"	v
g:paredit_disable_lisp	nTest.vim	/^        let g:paredit_disable_lisp = 1$/;"	v
g:paredit_disable_clojure	nTest.vim	/^        let g:paredit_disable_clojure = 1$/;"	v
EnableParedit	nTest.vim	/^        function! EnableParedit()$/;"	f
<Leader>u	nTest.vim	/^                nnoremap <Leader>u :UndotreeToggle<CR>$/;"	m
g:undotree_SetFocusWhenToggle	nTest.vim	/^                let g:undotree_SetFocusWhenToggle=1$/;"	v
WinDo	nTipsBUFF.vim	/^function! WinDo(command)$/;"	f
Windo	nTipsBUFF.vim	/^com! -nargs=+ -complete=command Windo call WinDo(<q-args>)$/;"	c
BufDo	nTipsBUFF.vim	/^function! BufDo(command)$/;"	f
Bufdo	nTipsBUFF.vim	/^com! -nargs=+ -complete=command Bufdo call BufDo(<q-args>)$/;"	c
on	nTipsBUFF.vim	/^    command on all the buffers in the buffer list.$/;"	c
command.	nTipsBUFF.vim	/^    map command.  For example,$/;"	m
Calendar	nTipsCalender.vim	/^function! Calendar(year, month, day, weekday, week, daycount)$/;"	f
<S-F7>	nTipsCalender.vim	/^map <S-F7> :call Calendar(2002, 12, 30, 1, 1, 1000)<CR><CR>$/;"	m
g:mkw_any	nTipsCompl.vim	/^  let g:mkw_any = '\\k\\zs'$/;"	v
MKwFindStart	nTipsCompl.vim	/^  fun! MKwFindStart(line,anyre)$/;"	f
MKwCompleteId	nTipsCompl.vim	/^  fun! MKwCompleteId(line, base, col, findstart)$/;"	f
g:mkw_loaded	nTipsCompl.vim	/^  let g:mkw_loaded = 1$/;"	v
FileHeading	nTipsCPP.vim	/^function FileHeading()$/;"	f
<F4>	nTipsCPP.vim	/^imap <F4>  <esc>mz:execute FileHeading()<RET>`zjA$/;"	m
<F5>	nTipsCPP.vim	/^nmap <F5> "lYml[[kw"cye'l$/;"	m
<F6>	nTipsCPP.vim	/^nmap <F6> ma:let @n=@\/<cr>"lp==:s\/\\<virtual\\>\/\\\/\\*&\\*\\\/\/e<cr>:s\/\\<static\\>\/\\\/\\*&\\*\\\/\/e<cr>:s\/\\s*=\\s*0\\s*\/\/e<cr>:s\/(.\\{-}\\zs=\\s*[^,)]\\{-1,}\\>\\ze\\(\\*\\\/\\)\\@!.*)\/\\\/\\*&\\*\\\/\/e<cr>:s\/(.\\{-}\\zs=\\s*[^,)]\\{-1,}\\>\\ze\\(\\*\\\/\\)\\@!.*)\/\\\/\\*&\\*\\\/\/e<cr>:s\/(.\\{-}\\zs=\\s*[^,)]\\{-1,}\\>\\ze\\(\\*\\\/\\)\\@!.*)\/\\\/\\*&\\*\\\/\/e<cr>:let @\/=@n<cr>'ajf(b"cPa::<esc>f;s<cr>{<cr>}<cr><esc>kk$/;"	m
insert_gates	nTipsCPP.vim	/^function! s:insert_gates()$/;"	f
<F5>	nTipsCPP.vim	/^map <F5> :Make<cr><C-w><Up>$/;"	m
autocommands_loaded	nTipsCPP.vim	/^  let autocommands_loaded = 1$/;"	v
InsertCHHeader	nTipsCPP.vim	/^function! InsertCHHeader()$/;"	f
InsertSkeleton	nTipsCPP.vim	/^function! InsertSkeleton(fname)$/;"	f
InsertFname	nTipsCPP.vim	/^function! InsertFname()$/;"	f
ModifyHeader	nTipsCPP.vim	/^function! ModifyHeader()$/;"	f
ModifyTime	nTipsCPP.vim	/^function! ModifyTime()$/;"	f
Mosh_grep	nTipsDoc.vim	/^function! Mosh_grep(...)$/;"	f
with	nTipsDoc.vim	/^not with the gtk2 font selector. Probably a gtk build would have worked. $/;"	m
<F8>	nTipsDoc.vim	/^map <F8> :w^M:!mozilla `echo http:\/\/localhost\/${PWD\\#*\/*\/*\/*\/}\/%`^M$/;"	m
g	nTipsDoc.vim	/^vmap g "gy:silent! exec 'cd C:\\Archivos de programa\\Mozilla Firefox\\ <bar> !Start firefox "www.google.com\/search?q='@g'&ie=utf-8"'<cr>$/;"	m
AddMyHelpTags	nTipsDoc.vim	/^function! AddMyHelpTags()$/;"	f
very	nTipsDoc.vim	/^not very convinient..:o($/;"	m
Hex2dec	nTipsFUNC.vim	/^   fu! Hex2dec(var1, var2)$/;"	f
GdbFocusBuf	nTipsGDB.vim	/^function! s:GdbFocusBuf(nameref)$/;"	f
GdbAppendBuf	nTipsGDB.vim	/^function! s:GdbAppendBuf(nameref, stuff)$/;"	f
Gdb_Bpt	nTipsGDB.vim	/^function! Gdb_Bpt(id, file, linenum)$/;"	f
Gdb_CurrFileLine	nTipsGDB.vim	/^function! Gdb_CurrFileLine(file, line)$/;"	f
Gdb_Console	nTipsGDB.vim	/^function! Gdb_Console(stuff, set_prompt)$/;"	f
my	nTipsGDB.vim	/^   improved my earlier versions of the functions GdbFoucBuf and $/;"	m
GPGASCII	nTipsGNUPG.vim	/^      augroup GPGASCII$/;"	a
-greeting	nTipsGNUPG.vim	/^    no-greeting$/;"	m
Saving_scroll	nTipsGUI.vim	/^    function! s:Saving_scroll(cmd)$/;"	f
<C-J>	nTipsGUI.vim	/^    nmap <C-J>      :call <SID>Saving_scroll("1<C-V><C-D>")<CR>$/;"	m
<C-J>	nTipsGUI.vim	/^    vmap <C-J> <Esc>:call <SID>Saving_scroll("gv1<C-V><C-D>")<CR>$/;"	m
<C-K>	nTipsGUI.vim	/^    nmap <C-K>      :call <SID>Saving_scroll("1<C-V><C-U>")<CR>$/;"	m
<C-K>	nTipsGUI.vim	/^    vmap <C-K> <Esc>:call <SID>Saving_scroll("gv1<C-V><C-U>")<CR>$/;"	m
with	nTipsGUI.vim	/^not with the path and (2) not showing$/;"	m
gw	nTipsG.vim	/^map gw <Esc>:sp %<CR> gf$/;"	m
<CR>	nTipsHelp.vim	/^nmap <buffer> <CR> <C-]>$/;"	m
<BS>	nTipsHelp.vim	/^nmap <buffer> <BS> <C-T>$/;"	m
o	nTipsHelp.vim	/^nmap <buffer> o \/'[a-z]\\{2,\\}'<CR>$/;"	m
O	nTipsHelp.vim	/^nmap <buffer> O ?'[a-z]\\{2,\\}'<CR>$/;"	m
s	nTipsHelp.vim	/^nmap <buffer> s \/\\|\\S\\+\\|<CR>$/;"	m
S	nTipsHelp.vim	/^nmap <buffer> S ?\\|\\S\\+\\|<CR>$/;"	m
ShowPydoc	nTipsHelp.vim	/^function ShowPydoc(module, ...)$/;"	f
for	nTipsHelp.vim	/^command for it:$/;"	c
for	nTipsHelp.vim	/^command for it:$/;"	c
for	nTipsHelp.vim	/^command for it:$/;"	c
g:CommentDefines	nTipsHi.vim	/^let g:CommentDefines = ""$/;"	v
,a	nTipsHi.vim	/^map <silent> ,a :call AddCommentDefine()<CR>$/;"	m
,x	nTipsHi.vim	/^map <silent> ,x :call ClearCommentDefine()<CR>$/;"	m
AddCommentDefine	nTipsHi.vim	/^function! AddCommentDefine()$/;"	f
ClearCommentDefine	nTipsHi.vim	/^function! ClearCommentDefine()$/;"	f
EnhanceCppSyntax	nTipsHi.vim	/^function! EnhanceCppSyntax()$/;"	f
Misc.Beautify.For	nTipsHi.vim	/^nmenu Misc.Beautify.For          :s\/for\\s*(\\s*\/for ( \/<CR>:s\/\\s*)\\s*$\/ )\/<CR>:s\/\\(\\i\\+\\)\\s*=\\s*\/\\1 = \/<CR>:s\/\\s*\\([=<>!]=\\\\|[<>]\\)\\s*\/ \\1 \/<CR>:s\/\\s*\\(--\\\\|++\\)\/\\1\/<CR>:s\/\\s*;\\s*\/; \/g<CR>$/;"	m
Misc.Beautify.Func	nTipsHi.vim	/^nmenu Misc.Beautify.Func        :s\/\\s*)\/ )\/g<CR>:s\/\\s*\\([(,]\\)\\s*\/\\1 \/g<CR>:s\/(\\s\\+)\/()\/g<CR>$/;"	m
Misc.Beautify.If	nTipsHi.vim	/^nmenu Misc.Beautify.If              :s\/if\\s*(\\s*\/if ( \/<CR>:s\/\\s*)\\s*$\/ )\/<CR>:silent s\/\\s*\\([=<>!]=\\\\|[<>]\\)\\s*\/ \\1 \/<CR>$/;"	m
Misc.Beautify.Assign	nTipsHi.vim	/^nmenu Misc.Beautify.Assign      :s\/\\s*\\([-+*\\\/&\\|]\\?\\)\\s*=\\s*\/ \\1= \/g<CR>$/;"	m
<a-key>	nTipsHi.vim	/^nmap <a-key> m[%v%:sleep 350m<CR>`[$/;"	m
<a-key>	nTipsHi.vim	/^imap <a-key> <ESC>m[%v%:sleep 350m<CR>`[a$/;"	m
NextIndent	nTipsInDent.vim	/^function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)$/;"	f
[l	nTipsInDent.vim	/^nnoremap <silent> [l :call NextIndent(0, 0, 0, 1)<cr>$/;"	m
]l	nTipsInDent.vim	/^nnoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<cr>$/;"	m
[L	nTipsInDent.vim	/^nnoremap <silent> [L :call NextIndent(0, 0, 1, 1)<cr>$/;"	m
]L	nTipsInDent.vim	/^nnoremap <silent> ]L :call NextIndent(0, 1, 1, 1)<cr>$/;"	m
[l	nTipsInDent.vim	/^vnoremap <silent> [l <esc>:call NextIndent(0, 0, 0, 1)<cr>m'gv''$/;"	m
]l	nTipsInDent.vim	/^vnoremap <silent> ]l <esc>:call NextIndent(0, 1, 0, 1)<cr>m'gv''$/;"	m
[L	nTipsInDent.vim	/^vnoremap <silent> [L <esc>:call NextIndent(0, 0, 1, 1)<cr>m'gv''$/;"	m
]L	nTipsInDent.vim	/^vnoremap <silent> ]L <esc>:call NextIndent(0, 1, 1, 1)<cr>m'gv''$/;"	m
[l	nTipsInDent.vim	/^onoremap <silent> [l :call NextIndent(0, 0, 0, 1)<cr>$/;"	m
]l	nTipsInDent.vim	/^onoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<cr>$/;"	m
[L	nTipsInDent.vim	/^onoremap <silent> [L :call NextIndent(1, 0, 1, 1)<cr>$/;"	m
]L	nTipsInDent.vim	/^onoremap <silent> ]L :call NextIndent(1, 1, 1, 1)<cr>$/;"	m
current_compiler	nTipsJava.vim	/^let current_compiler = "javac"$/;"	v
jgs	nTipsJava.vim	/^map jgs mawv\/ <Enter>"ty\/ <Enter>wvwh"ny\/getters<Enter>$a<Enter><Enter>public <Esc>"tpa<Esc>"npbiget<Esc>l~ea()<Enter>{<Enter><Tab>return <Esc>"npa;<Enter>}<Esc>=<Enter><Esc>\/setters<Enter>$a<Enter><Enter>public void <Esc>"npbiset<Esc>l~ea(<Esc>"tpa <Esc>"npa)<Enter>{<Enter><Tab>this.<Esc>"npa=<Esc>"npa;<Enter>}<Esc>=<Enter>`ak$/;"	m
dc	nTipsJava.vim	/^nnoremap <buffer> <silent>dc :call <SID>AddBean()<CR>$/;"	m
AddBean	nTipsJava.vim	/^function! s:AddBean()$/;"	f
g:tlist_ant_settings	nTipsJava.vim	/^let g:tlist_ant_settings = 'ant;p:Project;t:Target'$/;"	v
<F9>	nTipsJava.vim	/^map <F9> :set makeprg=javac\\\\ %^M:make$/;"	m
<F10>	nTipsJava.vim	/^map <F10> :!echo %\\\\|awk -F. \\'{print $1}\\'\\\\|xargs java^M$/;"	m
<F11>	nTipsJava.vim	/^map <F11> :set makeprg=javac\\\\ #^M:make^M$/;"	m
<F12>	nTipsJava.vim	/^map <F12> :!echo #\\\\|awk -F. \\'{print $1}\\'\\\\|xargs java^M$/;"	m
<F9>	nTipsJava.vim	/^map! <F9> ^[[:set makeprg=javac\\\\ %^M:make^M$/;"	m
<F10>	nTipsJava.vim	/^map! <F10> ^[[:!echo %\\\\|awk -F. \\'{print $1}\\'\\\\|xargs java^M$/;"	m
<F11>	nTipsJava.vim	/^map! <F11> ^[[set makeprg=javac\\\\ #^M:make^M$/;"	m
<F12>	nTipsJava.vim	/^map! <F12> ^[[!echo #\\\\|awk -F. \\'{print $1}\\'\\\\|xargs java^M$/;"	m
<F10>	nTipsJava.vim	/^  nmap <F10> :clist<CR>$/;"	m
<F11>	nTipsJava.vim	/^  nmap <F11> :cprev<CR>$/;"	m
<F12>	nTipsJava.vim	/^  nmap <F12> :cnext<CR>$/;"	m
gr	nTipsMap.vim	/^map gr :grep <cword> *<cr>   $/;"	m
gr	nTipsMap.vim	/^map gr :grep <cword> %:p:h\/*<cr>   $/;"	m
gR	nTipsMap.vim	/^map gR :grep \\b<cword>\\b *<cr>$/;"	m
GR	nTipsMap.vim	/^map GR :grep \\b<cword>\\b %:p:h\/*<cr>$/;"	m
one	nTipsMap.vim	/^mapping one will search for the word under the cursor (like g*) in any of the files in the current directory $/;"	m
two	nTipsMap.vim	/^mapping two will search for the word under the cursor (like g*) in any of the files in the same directoryr$/;"	m
three	nTipsMap.vim	/^mapping three will search for the word under the cursor by itself (i.e. surrounded by word boundary like *)r$/;"	m
four	nTipsMap.vim	/^mapping four will search for the word under the cursor by itself (i.e. surrounded by word boundary like *)$/;"	m
<A-o>	nTipsMap.vim	/^imap <A-o>  <C-o>$/;"	m
<A-;>	nTipsMap.vim	/^imap <A-;>  <C-o>:$/;"	m
<A-h>	nTipsMap.vim	/^imap <A-h>  <Left>$/;"	m
<A-j>	nTipsMap.vim	/^imap <A-j>  <Down>$/;"	m
<A-k>	nTipsMap.vim	/^imap <A-k>  <Up>$/;"	m
<A-l>	nTipsMap.vim	/^imap <A-l>  <Right>$/;"	m
<A-f>	nTipsMap.vim	/^imap <A-f>  <PageDown>$/;"	m
<A-b>	nTipsMap.vim	/^imap <A-b>  <PageUp>$/;"	m
<A-^>	nTipsMap.vim	/^imap <A-^>  <Home>$/;"	m
<A-$>	nTipsMap.vim	/^imap <A-$>  <End>$/;"	m
<A-1>	nTipsMap.vim	/^imap <A-1>  <C-o>1$/;"	m
<A-2>	nTipsMap.vim	/^imap <A-2>  <C-o>2$/;"	m
<A-3>	nTipsMap.vim	/^imap <A-3>  <C-o>3$/;"	m
<A-4>	nTipsMap.vim	/^imap <A-4>  <C-o>4$/;"	m
<A-5>	nTipsMap.vim	/^imap <A-5>  <C-o>5$/;"	m
<A-6>	nTipsMap.vim	/^imap <A-6>  <C-o>6$/;"	m
<A-7>	nTipsMap.vim	/^imap <A-7>  <C-o>7$/;"	m
<A-8>	nTipsMap.vim	/^imap <A-8>  <C-o>8$/;"	m
<A-9>	nTipsMap.vim	/^imap <A-9>  <C-o>9$/;"	m
<A-/>	nTipsMap.vim	/^imap <A-\/>  <C-o>\/$/;"	m
<A-*>	nTipsMap.vim	/^imap <A-*>  <C-o>*$/;"	m
<A-#>	nTipsMap.vim	/^imap <A-#>  <C-o>#$/;"	m
<A-n>	nTipsMap.vim	/^imap <A-n>  <C-o>n$/;"	m
<A-N>	nTipsMap.vim	/^imap <A-N>  <C-o>N$/;"	m
<A-x>	nTipsMap.vim	/^imap <A-x>  <C-o>x$/;"	m
<A-d>	nTipsMap.vim	/^imap <A-d>  <C-o>d$/;"	m
<A-D>	nTipsMap.vim	/^imap <A-D>  <C-o>D$/;"	m
<A-y>	nTipsMap.vim	/^imap <A-y>  <C-o>y$/;"	m
<A-Y>	nTipsMap.vim	/^imap <A-Y>  <C-o>Y$/;"	m
<A-p>	nTipsMap.vim	/^imap <A-p>  <C-o>p$/;"	m
<A-P>	nTipsMap.vim	/^imap <A-P>  <C-o>P$/;"	m
<A-~>	nTipsMap.vim	/^imap <A-~>  <C-o>~$/;"	m
<A-m>	nTipsMap.vim	/^imap <A-m>  <C-o>m$/;"	m
<A-`>	nTipsMap.vim	/^imap <A-`>  <C-o>`$/;"	m
<A-">	nTipsMap.vim	/^imap <A-">  <C-o>"$/;"	m
<A-%>	nTipsMap.vim	/^imap <A-%>  <C-o>%$/;"	m
<A-h>	nTipsMap.vim	/^imap <A-h>  <C-o>:h$/;"	m
<A-s>	nTipsMap.vim	/^imap <A-s>  <C-o>:s$/;"	m
<A-!>	nTipsMap.vim	/^imap <A-!>  <C-o>:!$/;"	m
<A-w>	nTipsMap.vim	/^imap <A-w>  <C-o>:w<CR>$/;"	m
<A-e>	nTipsMap.vim	/^imap <A-e>  <C-o>:e$/;"	m
<A-u>	nTipsMap.vim	/^imap <A-u>  <C-o>u$/;"	m
<A-.>	nTipsMap.vim	/^imap <A-.>  <C-o>.$/;"	m
'	nTipsMap.vim	/^map ' `$/;"	m
<C-f>	nTipsMap.vim	/^map <C-f> :w<C-m>:!make<C-m>$/;"	m
<M-]>	nTipsMap.vim	/^map <M-]> <C-]>                                         Tags$/;"	m
<M-[>	nTipsMap.vim	/^map <M-[> <C-t>                                          Tags$/;"	m
<M-u>	nTipsMap.vim	/^map <M-u> :!ctags -R *<C-m>                                          Build Tags$/;"	m
<M-c>	nTipsMap.vim	/^map <M-c> I\/*<Esc>A*\/<Esc>                                          Comment current line$/;"	m
<M-d>	nTipsMap.vim	/^map <M-d> ^xx$xx                                          Delete comment for a single line$/;"	m
<M-l>	nTipsMap.vim	/^map <M-l> [{zf%                                          Fold upto the enclosing brace level$/;"	m
<M-o>	nTipsMap.vim	/^map <M-o> zo                                           open fold$/;"	m
<M-i>	nTipsMap.vim	/^map <M-i> zc                                          close fold$/;"	m
<M-.>	nTipsMap.vim	/^map <M-.> :cn<C-m>                                          Go to next error in list$/;"	m
<M-,>	nTipsMap.vim	/^map <M-,> :cp<C-m>                                          previous error in list$/;"	m
<Tab>	nTipsMap.vim	/^imap <Tab> <C-p>                                                  Complete word$/;"	m
<S-Tab>	nTipsMap.vim	/^inoremap <S-Tab> <Tab>                                                  Tab$/;"	m
{	nTipsMap.vim	/^inoremap { <CR>{<CR>                                                  Brace and line$/;"	m
}	nTipsMap.vim	/^inoremap } <CR>}                                                  brace and line. saves one enter stroke$/;"	m
<M-j>	nTipsMap.vim	/^imap <M-j> <Esc>                                                  Escape. Don't want to move my hand to esc key.$/;"	m
<M-k>	nTipsMap.vim	/^imap <M-k> <C-y>                                                  Copy line from above.$/;"	m
<M-q>	nTipsMap.vim	/^imap <M-q> \/*  *\/<Esc>hhi                                        Comment selected lines$/;"	m
<M-r>	nTipsMap.vim	/^noremap <M-r> ddko{<C-m>}<Esc>kpko             Convert a simple statement to a compound statement. And place cursor above prev line.$/;"	m
<M-k>	nTipsMap.vim	/^noremap <M-k> ddko{<C-m>}<Esc>kpo             Same as above but place cursor below old line.$/;"	m
<M-j>	nTipsMap.vim	/^vnoremap <M-j> <Esc>                   $/;"	m
<M-c>	nTipsMap.vim	/^vnoremap <M-c> di\/*<C-m>\/<C-m><Esc>kkp           Commented selected text$/;"	m
<M-n>	nTipsMap.vim	/^nmap <M-n> :noh<CR>                       No hilight$/;"	m
CppSetupCout	nTipsMap.vim	/^function! CppSetupCout ()$/;"	f
CppResetCout	nTipsMap.vim	/^function! CppResetCout ()$/;"	f
AuCpp	nTipsMap.vim	/^function! AuCpp ()$/;"	f
Eatchar	nTipsMap.vim	/^function! Eatchar()$/;"	f
MapNoContext	nTipsMap.vim	/^function! MapNoContext(key, seq)$/;"	f
Iab	nTipsMap.vim	/^function! Iab (ab, full)$/;"	f
<M-:>	nTipsMap.vim	/^map <M-:> :'<,'>$/;"	m
<F4>	nTipsMap.vim	/^nnoremap <F4> "+yiw$/;"	m
<F4>	nTipsMap.vim	/^vnoremap <F4> "+y$/;"	m
<F5>	nTipsMap.vim	/^nnoremap <F5> viw"+p$/;"	m
<F5>	nTipsMap.vim	/^nnoremap <F5> "+p$/;"	m
<S-F4>	nTipsMap.vim	/^nnoremap <S-F4> "+yiw:%s\/\\<<C-r>+\\>\/<C-r>+\/gc<LEFT><LEFT><LEFT>$/;"	m
<S-F4>	nTipsMap.vim	/^vnoremap <S-F4> "+y:%s\/\\<<C-r>+\\>\/<C-r>+\/gc<LEFT><LEFT><LEFT>$/;"	m
<M-">	nTipsMap.vim	/^nnoremap <M-"> ciw"<C-r>+"<esc>$/;"	m
<M-">	nTipsMap.vim	/^vnoremap <M-"> c"<C-r>+"<esc>$/;"	m
<C-S-Left>	nTipsMap.vim	/^nmap <C-S-Left>  vbge<Space>$/;"	m
<C-S-Right>	nTipsMap.vim	/^nmap <C-S-Right> vew<BS>$/;"	m
<C-S-Left>	nTipsMap.vim	/^imap <C-S-Left>  _<Esc>mz"_xv`z<BS>obge<Space>$/;"	m
<C-S-Right>	nTipsMap.vim	/^imap <C-S-Right> _<Esc>my"_xi<S-Right><C-o><BS>_<Esc>mz"_xv`yo`z$/;"	m
<C-S-Left>	nTipsMap.vim	/^vmap <C-S-Left>  bge<Space>$/;"	m
<C-S-Right>	nTipsMap.vim	/^vmap <C-S-Right> ew<BS>$/;"	m
<C-S-Down>	nTipsMap.vim	/^nmap <C-S-Down>  v<Down>$/;"	m
<C-S-Up>	nTipsMap.vim	/^nmap <C-S-Up>    v<Up>$/;"	m
<C-S-Down>	nTipsMap.vim	/^imap <C-S-Down>  _<Esc>mz"_xv`zo`z<Down><Right><BS><BS>$/;"	m
<C-S-Up>	nTipsMap.vim	/^imap <C-S-Up>    _<Esc>mz"_xv`z<Up>o`z<BS>o$/;"	m
<C-S-Down>	nTipsMap.vim	/^vmap <C-S-Down>  <Down>$/;"	m
<C-S-Up>	nTipsMap.vim	/^vmap <C-S-Up>    <Up>$/;"	m
<C-S-Home>	nTipsMap.vim	/^nmap <C-S-Home> v<Home>$/;"	m
<C-S-End>	nTipsMap.vim	/^nmap <C-S-End>  v<End>$/;"	m
<C-S-Home>	nTipsMap.vim	/^imap <C-S-Home> _<Esc>mz"_s<C-o><Left><C-o>`z<Esc>v<Home>$/;"	m
<C-S-End>	nTipsMap.vim	/^imap <C-S-End>  _<Esc>mz"_xv`zo<End>$/;"	m
<C-S-PageDown>	nTipsMap.vim	/^nmap <C-S-PageDown> v<End><C-d><End>$/;"	m
<C-S-PageUp>	nTipsMap.vim	/^nmap <C-S-PageUp>   v<Home><C-u>$/;"	m
<C-S-PageDown>	nTipsMap.vim	/^imap <C-S-PageDown> _<Esc>mz"_xv`zo<End><C-d><End>$/;"	m
<C-S-PageUp>	nTipsMap.vim	/^imap <C-S-PageUp>   _<Esc>mz"_xv`z<BS>o<Home><C-u>$/;"	m
<C-S-PageDown>	nTipsMap.vim	/^vmap <C-S-PageDown> <End><C-d><End>$/;"	m
<C-S-PageUp>	nTipsMap.vim	/^vmap <C-S-PageUp>   <Home><C-u>$/;"	m
<C-BS>	nTipsMap.vim	/^imap <C-BS>  <C-w>$/;"	m
<C-Del>	nTipsMap.vim	/^imap <C-Del> _<Esc>mzew<BS>i<Del><Esc>v`z"_c$/;"	m
JHStringObject	nTipsMap.vim	/^function! JHStringObject(cmd,delim,mode)$/;"	f
di"	nTipsMap.vim	/^nnoremap di" :call JHStringObject('d','"','i')<CR>$/;"	m
di'	nTipsMap.vim	/^nnoremap di' :call JHStringObject('d',"'",'i')<CR>$/;"	m
da"	nTipsMap.vim	/^nnoremap da" :call JHStringObject('d','"','a')<CR>$/;"	m
da'	nTipsMap.vim	/^nnoremap da' :call JHStringObject('d',"'",'a')<CR>$/;"	m
ci"	nTipsMap.vim	/^nnoremap ci" :call JHStringObject('c','"','i')<CR>$/;"	m
ci'	nTipsMap.vim	/^nnoremap ci' :call JHStringObject('c',"'",'i')<CR>$/;"	m
ca"	nTipsMap.vim	/^nnoremap ca" :call JHStringObject('c','"','a')<CR>$/;"	m
ca'	nTipsMap.vim	/^nnoremap ca' :call JHStringObject('c',"'",'a')<CR>$/;"	m
yi"	nTipsMap.vim	/^nnoremap yi" :call JHStringObject('y','"','i')<CR>$/;"	m
yi'	nTipsMap.vim	/^nnoremap yi' :call JHStringObject('y',"'",'i')<CR>$/;"	m
ya"	nTipsMap.vim	/^nnoremap ya" :call JHStringObject('y','"','a')<CR>$/;"	m
ya'	nTipsMap.vim	/^nnoremap ya' :call JHStringObject('y',"'",'a')<CR>$/;"	m
Shebang	nTipsMap.vim	/^augroup Shebang$/;"	a
Vim	nTipsMap.vim	/^normal Vim mode).$/;"	m
Percent	nTipsMap.vim	/^fu! Percent()$/;"	f
FileEncoding	nTipsMap.vim	/^fu! FileEncoding()$/;"	f
GlobalEncoding	nTipsMap.vim	/^fu! GlobalEncoding()$/;"	f
g:StatusLines	nTipsMap.vim	/^let g:StatusLines{0}='[%1*%n%*]%= [%2*%03bD%* | %2*%5(0x%02BH%)%*] [%8oC=%1*%3{Percent()}%%%*] [%8c] : [%8l\/%8L = %1*%3p%%%*]'$/;"	v
g:StatusLines	nTipsMap.vim	/^let g:StatusLines{1}='[%1*%n%*]%= [%1*GENC%* %10(%{GlobalEncoding()}%)] [%1*FENC%* %10(%{FileEncoding()}%)]'$/;"	v
g:StatusLines	nTipsMap.vim	/^let g:StatusLines{2}='[%1*%n%*]%= [%1*%F%*]'$/;"	v
g:StatusLinesCurrent	nTipsMap.vim	/^let g:StatusLinesCurrent=-1$/;"	v
<F3>	nTipsMap.vim	/^map <F3> :call ToggleStatusLine()<CR>$/;"	m
ToggleStatusLine	nTipsMap.vim	/^fu! ToggleStatusLine()$/;"	f
<C-X><C-X>	nTipsMap.vim	/^map <C-X><C-X> diw:exe "normal i".@"<cr>$/;"	m
MyExpand	nTipsMap.vim	/^   function! MyExpand(abbr,expansion)$/;"	f
ABC	nTipsMap.vim	/^imap ABC <esc>:call AskExpand("ABC","...expansion for ABC ...")<cr>a$/;"	m
XYZ	nTipsMap.vim	/^imap XYZ <esc>:call AskExpand("XYZ","...expansion for XYZ ...")<cr>a$/;"	m
MyFunction	nTipsMark.vim	/^function! MyFunction()$/;"	f
RemoveMark	nTipsMark.vim	/^function! RemoveMark(mark)$/;"	f
\rm	nTipsMark.vim	/^map \\rm :call RemoveMarks()<cr>$/;"	m
RemoveMarks	nTipsMark.vim	/^function! RemoveMarks()$/;"	f
UnderOccurences	nTipsMisc.vim	/^function! s:UnderOccurences()$/;"	f
FindOccurences	nTipsMisc.vim	/^function! s:FindOccurences()$/;"	f
Mosh_Tab_Or_Complete	nTipsMisc.vim	/^function! Mosh_Tab_Or_Complete()$/;"	f
,	nTipsMisc.vim	/^map , :w^M$/;"	m
,p	nTipsMisc.vim	/^nnoremap ,p :pu "<CR>$/;"	m
,P	nTipsMisc.vim	/^nnoremap ,P :pu! "<CR>$/;"	m
,cs	nTipsMisc.vim	/^nmap ,cs :let @*=expand("%")<CR>$/;"	m
,cl	nTipsMisc.vim	/^nmap ,cl :let @*=expand("%:p")<CR>$/;"	m
WQHelper	nTipsMisc.vim	/^function WQHelper()$/;"	f
<C-B>	nTipsMisc.vim	/^map <C-B> :!php -l %<CR>$/;"	m
c	nTipsMisc.vim	/^let c='a'$/;"	v
c	nTipsMisc.vim	/^    let c = nr2char(1+char2nr(c))$/;"	v
<M-Down>	nTipsNumberMe.vim	/^nmap <silent> <M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<M-Up>	nTipsNumberMe.vim	/^nmap <silent> <M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
ScrollOtherWindow	nTipsNumberMe.vim	/^fun! ScrollOtherWindow(dir)$/;"	f
Nlist	nTipsNumberMe.vim	/^command! -nargs=* -range Nlist <line1>,<line2>call Nlist(<f-args>)$/;"	c
Nlist	nTipsNumberMe.vim	/^function! Nlist(...) range$/;"	f
InsertBrackets	nTipsPerl.vim	/^function! InsertBrackets()$/;"	f
JumpNext	nTipsPerl.vim	/^function! JumpNext(normChar)$/;"	f
"	nTipsPerl.vim	/^inoremap " ""<esc>i<c-o>:echo <cr>$/;"	m
'	nTipsPerl.vim	/^inoremap ' ''<esc>i<c-o>:echo <cr>$/;"	m
<	nTipsPerl.vim	/^inoremap < <><esc>i<c-o>:echo <cr>$/;"	m
(	nTipsPerl.vim	/^inoremap ( ()<esc>i<c-o>:echo <cr>$/;"	m
[	nTipsPerl.vim	/^inoremap [ []<esc>i<c-o>:echo <cr>$/;"	m
{	nTipsPerl.vim	/^inoremap { <c-r>=InsertBrackets ()<cr>$/;"	m
>	nTipsPerl.vim	/^inoremap > <c-r>=JumpNext(">")<cr>$/;"	m
)	nTipsPerl.vim	/^inoremap ) <c-r>=JumpNext(")")<cr>$/;"	m
]	nTipsPerl.vim	/^inoremap ] <c-r>=JumpNext("]")<cr>$/;"	m
}	nTipsPerl.vim	/^inoremap } <c-r>=JumpNext("}")<cr>$/;"	m
<m-[>	nTipsPerl.vim	/^inoremap <m-[> [$/;"	m
<m-]>	nTipsPerl.vim	/^inoremap <m-]> ]$/;"	m
<m-/>	nTipsPerl.vim	/^inoremap <m-\/> "$/;"	m
<m-->	nTipsPerl.vim	/^inoremap <m--> {$/;"	m
<m-=>	nTipsPerl.vim	/^inoremap <m-=> }$/;"	m
<m-,>	nTipsPerl.vim	/^inoremap <m-,> <$/;"	m
<m-.>	nTipsPerl.vim	/^inoremap <m-.> >$/;"	m
<m-'>	nTipsPerl.vim	/^inoremap <m-'> '$/;"	m
<Leader>PickAMap	nTipsPlugin.vim	/^  map <unique> <Leader>PickAMap <Plug>AppFunction$/;"	m
<Plug>AppFunction	nTipsPlugin.vim	/^map <silent> <unique> <script> <Plug>AppFunction $/;"	m
AppFunction	nTipsPlugin.vim	/^fu! <SID>AppFunction()$/;"	f
InternalAppFunction	nTipsPlugin.vim	/^fu! <SID>InternalAppFunction(...)$/;"	f
MyCommandFunction	nTipsPlugin.vim	/^function! s:MyCommandFunction(...) range$/;"	f
unittest	nTipsPy.vim	/^import unittest$/;"	m
sys	nTipsPy.vim	/^import sys$/;"	m
<F2>	nTipsPy.vim	/^map <F2> :exec "!xterm -e 'pydoc ".expand("<cword>")."'"<CR><CR>$/;"	m
<F2>	nTipsPy.vim	/^imap <F2> <ESC>:exec "!xterm -e 'pydoc ".expand("<cword>")."'"<CR><CR>i$/;"	m
vim	nTipsPy.vim	/^import vim$/;"	m
PyEv	nTipsPy.vim	/^command -narg=* PyEv python EvaluateCurrentLine(<f-args>)$/;"	c
line	nTipsPy.vim	/^command line and running a complete script. Can be used for easy buffer$/;"	c
Pyer	nTipsPy.vim	/^command -range Pyer python PyExecReplace(<f-line1>,<f-line2>) $/;"	c
time	nTipsPy.vim	/^import time$/;"	m
urllib2,htmllib,formatter	nTipsPy.vim	/^import urllib2,htmllib,formatter$/;"	m
PythonGrep	nTipsPy.vim	/^      function <SID>PythonGrep(tool)$/;"	f
<F3>	nTipsPy.vim	/^        map  <F3> :call <SID>PythonGrep('pylint')<CR>$/;"	m
<F3>	nTipsPy.vim	/^        map! <F3> :call <SID>PythonGrep('pylint')<CR>$/;"	m
<F4>	nTipsPy.vim	/^        map  <F4> :call <SID>PythonGrep('pychecker')<CR>$/;"	m
<F4>	nTipsPy.vim	/^        map! <F4> :call <SID>PythonGrep('pychecker')<CR>$/;"	m
CScope	nTipsQF.vim	/^command -nargs=* CScope :silent call Mycscope("<args>")$/;"	c
Mylid	nTipsQF.vim	/^fu! Mylid(arg)$/;"	f
Lid	nTipsQF.vim	/^command -nargs=* Lid :silent call Mylid("<args>")$/;"	c
SavePosition	nTipsQF.vim	/^function SavePosition()$/;"	f
InsertComment	nTipsQF.vim	/^function InsertComment()$/;"	f
,sp	nTipsQF.vim	/^nmap ,sp :call SavePosition()<CR>$/;"	m
,ic	nTipsQF.vim	/^nmap ,ic :call InsertComment()<CR>$/;"	m
/	nTipsSearch.vim	/^noremap  \/ mg\/$/;"	m
?	nTipsSearch.vim	/^noremap  ? mg?$/;"	m
<C-A>	nTipsSearch.vim	/^noremap <C-A> mg"gyiw\/<C-R>g$/;"	m
<C-A>	nTipsSearch.vim	/^cnoremap <C-A> <CR>\/<Up>$/;"	m
<C-X>	nTipsSearch.vim	/^cnoremap <C-X> <CR>`g$/;"	m
<C-Q>	nTipsSearch.vim	/^cnoremap <C-Q> <CR>?<Up>$/;"	m
<C-F>	nTipsSearch.vim	/^cnoremap <C-F> <CR>yiw<BS>\/<C-R>"$/;"	m
<C-G>	nTipsSearch.vim	/^cnoremap <C-G> <CR>y\/<Up>\/e+1<CR><BS>\/<C-R>=escape(@",'.*\\\/?')<CR>$/;"	m
<C-K>	nTipsSearch.vim	/^cnoremap <C-K> <CR>"hyy?<Up><CR>\/<Up>$/;"	m
<C-K>	nTipsSearch.vim	/^noremap <C-K> "hp$/;"	m
<C-T><C-T>	nTipsSearch.vim	/^cnoremap <C-T><C-T> <Home>\\<<C-End>\\>$/;"	m
<C-T><C-Y>	nTipsSearch.vim	/^cnoremap <C-T><C-Y> <Home><Del><Del><End><Del><Del>$/;"	m
<C-V><C-G>	nTipsSearch.vim	/^noremap <C-V><C-G> mgyiw<CR>gg\/\\<<C-R>"\\>$/;"	m
<C-V><C-H>	nTipsSearch.vim	/^noremap <C-V><C-H> mgyiw?^{<CR>\/\\<<C-R>"\\>$/;"	m
<C-V><C-G>	nTipsSearch.vim	/^cnoremap <C-V><C-G> <CR>yiwgg\/\\<<C-R>"\\>$/;"	m
<C-V><C-H>	nTipsSearch.vim	/^cnoremap <C-V><C-H> <CR>yiw?^{<CR>\/\\<<C-R>"\\>$/;"	m
<C-E>	nTipsSearch.vim	/^cnoremap <C-E> <CR>mt<C-E>`t<BS>\/<Up>$/;"	m
<C-Y>	nTipsSearch.vim	/^cnoremap <C-Y> <CR><C-Y><BS>\/<Up>$/;"	m
<C-Z><C-A>	nTipsSearch.vim	/^cnoremap <C-Z><C-A> <CR>zt<BS>\/<Up>$/;"	m
<C-Z><C-X>	nTipsSearch.vim	/^cnoremap <C-Z><C-X> <CR>zb<BS>\/<Up>$/;"	m
<C-Z><C-Z>	nTipsSearch.vim	/^cnoremap <C-Z><C-Z> <CR>zz<BS>\/<Up>$/;"	m
/	nTipsSearch.vim	/^vnoremap \/ ymg\/<C-R>=escape(@",'.*\\\/?')<CR>$/;"	m
?	nTipsSearch.vim	/^vnoremap ? ymg?<C-R>=escape(@",'.*\\\/?')<CR>$/;"	m
\s	nTipsSearch.vim	/^vmap \\s y\/\\V<C-R>=substitute(escape(@",'\/\\'),"\\n","\\\\\\\\n","g")<CR>\/<CR>$/;"	m
visual	nTipsSearch.vim	/^vmap       visual map$/;"	m
,s	nTipsSearch.vim	/^nmap ,s :find %:t:r.c<cr>$/;"	m
,S	nTipsSearch.vim	/^nmap ,S :sf %:t:r.c<cr>$/;"	m
,h	nTipsSearch.vim	/^nmap ,h :find %:t:r.h<cr>$/;"	m
,H	nTipsSearch.vim	/^nmap ,H :sf %:t:r.h<cr>$/;"	m
;	nTipsSearch.vim	/^nmap ; :%s\/\\<<c-r>=expand("<cword>")<cr>\\>\/$/;"	m
want	nTipsSearch.vim	/^not want to have. There is a way with Vim to do such a thing:$/;"	m
word	nTipsSearch.vim	/^no word 'foo' preceding the word 'bar', we can do:$/;"	m
<F5>	nTipsSearch.vim	/^nmap <buffer> <F5> :call JumpToTestFile()<CR>$/;"	m
JumpToTestFile	nTipsSearch.vim	/^fun! JumpToTestFile()$/;"	f
ToggleSplit	nTipsSpc.vim	/^function! ToggleSplit (dir)$/;"	f
^W^]	nTipsSpc.vim	/^noremap ^W^] ^W^]:silent call ToggleSplit ("d")<CR>$/;"	m
^W^]	nTipsSpc.vim	/^noremap ^W^] :set splitbelow<CR>^W^]:silent call ToggleSplit ("u")<CR>:set nosplitbelow<CR>$/;"	m
K0	nTipsSpc.vim	/^nmap K0 i[0]<esc>maG$i<end><enter>[0] nmap KK$/;"	m
ti	nTipsSpc.vim	/^map <silent> ti :let &insertmode=1-&insertmode<CR>$/;"	m
ti	nTipsSpc.vim	/^imap <silent> ti <Esc>:let &insertmode=1-&insertmode<CR>$/;"	m
ta	nTipsSpc.vim	/^map <silent> ta :let &insertmode=1-&insertmode ^V| if &insertmode ^V| :startinsert! ^V| endif<CR>$/;"	m
ta	nTipsSpc.vim	/^imap <silent> ta <Esc>:let &insertmode=1-&insertmode ^V| if &insertmode ^V| :startinsert! ^V| endif<CR>$/;"	m
FindFiles	nTipsSpc.vim	/^fun! FindFiles()$/;"	f
\f	nTipsSpc.vim	/^nmap \\f :call FindFiles()<CR>$/;"	m
zm	nTipsSpc.vim	/^map zm :let @\/=expand("<cword>") <BAR> split <BAR> execute 'normal n'<CR>$/;"	m
in_diff_mode	nTipsSpc.vim	/^let in_diff_mode = 0$/;"	v
CheckSwap	nTipsSpc.vim	/^func CheckSwap()$/;"	f
WriteBackup	nTipsSpc.vim	/^fun! WriteBackup()$/;"	f
<Leader>ba	nTipsSpc.vim	/^nnoremap <Leader>ba :call WriteBackup()<CR>$/;"	m
myvar	nTipsSpc.vim	/^let myvar = strftime("(%y%m%d)[%Hh%M]")$/;"	v
myvar	nTipsSpc.vim	/^let myvar = "set backupext=_". myvar$/;"	v
<leader>aw	nTipsSpc.vim	/^map <leader>aw :call Myautowrite()<CR>$/;"	m
Myautowrite	nTipsSpc.vim	/^function! Myautowrite()$/;"	f
BalloonExpr	nTipsSpc.vim	/^        function! BalloonExpr()$/;"	f
PreviewTag	nTipsSpc.vim	/^function PreviewTag(top)$/;"	f
<C-]>	nTipsSpc.vim	/^inoremap <C-]> <ESC>:call PreviewTag(0)<CR>$/;"	m
<C-]>	nTipsSpc.vim	/^nnoremap <C-]> :call PreviewTag(0)<CR>$/;"	m
<M-]>	nTipsSpc.vim	/^nnoremap <M-]> :call PreviewTag(1)<CR>$/;"	m
<M-]>	nTipsSpc.vim	/^inoremap <M-]> <ESC>:call PreviewTag(1)<CR>$/;"	m
<M-[>	nTipsSpc.vim	/^noremap <M-[> <ESC>:pc<CR>$/;"	m
\g	nTipsSpc.vim	/^nnoremap <silent> \\g :grep <cword><CR>:cwindow<CR>$/;"	m
\G	nTipsSpc.vim	/^nnoremap <silent> \\G :!glimpseindex -F -H $HOME\/indexdir -b ${PWD}<CR>$/;"	m
ToggleYesNo	nTipsSpc.vim	/^function s:ToggleYesNo()$/;"	f
gy	nTipsSpc.vim	/^nnoremap gy  :call <SID>ToggleYesNo()<cr>$/;"	m
SetupDiffMappings	nTipsSpc.vim	/^function! SetupDiffMappings()$/;"	f
Kwbd	nTipsSpc.vim	/^function Kwbd(kwbdStage)$/;"	f
<m-a>	nTipsSpc.vim	/^map <m-a> ggVG$/;"	m
SortUnique	nTipsSpc.vim	/^function! SortUnique( list, ... )$/;"	f
theList	nTipsSpc.vim	/^let theList = SortUnique( theList )$/;"	v
Mosh_FocusLost_SaveFiles	nTipsSpc.vim	/^function! Mosh_FocusLost_SaveFiles()$/;"	f
<F7>	nTipsSpc.vim	/^nmap <F7> \\ss$/;"	m
<F7>	nTipsSpc.vim	/^vmap <F7> <C-C> \\ss$/;"	m
<F7>	nTipsSpc.vim	/^omap <F7> \\ss$/;"	m
<F7>	nTipsSpc.vim	/^map! <F7> <C-C> \\ss$/;"	m
\ss	nTipsSpc.vim	/^noremap <silent> \\ss :call SuggestWord()<return>$/;"	m
SuggestWord	nTipsSpc.vim	/^function! SuggestWord () $/;"	f
GoToOpenFold	nTipsSpc.vim	/^function! GoToOpenFold(direction)$/;"	f
]z	nTipsSpc.vim	/^nmap ]z :cal GoToOpenFold("next")$/;"	m
[z	nTipsSpc.vim	/^nmap [z :cal GoToOpenFold("prev")$/;"	m
MakeSession	nTipsSpc.vim	/^function! MakeSession()$/;"	f
LoadSession	nTipsSpc.vim	/^function! LoadSession()$/;"	f
<Esc>	nTipsSpc.vim	/^  inoremap <silent><Esc>      <C-r>=pumvisible()?"\\<lt>C-e>":"\\<lt>Esc>"<CR>$/;"	m
<CR>	nTipsSpc.vim	/^  inoremap <silent><CR>       <C-r>=pumvisible()?"\\<lt>C-y>":"\\<lt>CR>"<CR>$/;"	m
<Down>	nTipsSpc.vim	/^  inoremap <silent><Down>     <C-r>=pumvisible()?"\\<lt>C-n>":"\\<lt>Down>"<CR>$/;"	m
<Up>	nTipsSpc.vim	/^  inoremap <silent><Up>       <C-r>=pumvisible()?"\\<lt>C-p>":"\\<lt>Up>"<CR>$/;"	m
<PageDown>	nTipsSpc.vim	/^  inoremap <silent><PageDown> <C-r>=pumvisible()?"\\<lt>PageDown>\\<lt>C-p>\\<lt>C-n>":"\\<lt>PageDown>"<CR>$/;"	m
<PageUp>	nTipsSpc.vim	/^  inoremap <silent><PageUp>   <C-r>=pumvisible()?"\\<lt>PageUp>\\<lt>C-p>\\<lt>C-n>":"\\<lt>PageUp>"<CR>$/;"	m
<Esc>	nTipsSpc.vim	/^  inoremap <silent><Esc>      <C-r>=pumvisible()?"\\<lt>C-y>":"\\<lt>Esc>"<CR>$/;"	m
<C-c>	nTipsSpc.vim	/^vmap <C-c> :w! ~\/.vbuf<CR>$/;"	m
<C-c>	nTipsSpc.vim	/^nmap <C-c> :.w! ~\/.vbuf<CR>$/;"	m
<C-v>	nTipsSpc.vim	/^nmap <C-v> :r ~\/.vbuf<CR>$/;"	m
ShowWhitespace	nTipsSpc.vim	/^function! ShowWhitespace()$/;"	f
HideWhitespace	nTipsSpc.vim	/^function! HideWhitespace()$/;"	f
ToggleShowWhitespace	nTipsSpc.vim	/^function! ToggleShowWhitespace()$/;"	f
<Leader>ws	nTipsSpc.vim	/^nmap <Leader>ws :call ToggleShowWhitespace()<CR>$/;"	m
EnterInsert	nTipsSpc.vim	/^function! s:EnterInsert()$/;"	f
LeaveInsert	nTipsSpc.vim	/^function! s:LeaveInsert()$/;"	f
WideMsg	nTipsSpc.vim	/^function! WideMsg(msg)$/;"	f
,/	nTipsSpc.vim	/^vmap ,\/ '><ESC>o*\/<ESC>'<O\/*<ESC>$/;"	m
,/	nTipsSpc.vim	/^vmap ,\/ '<m''><ESC>o*\/<ESC>''O\/*<ESC>$/;"	m
,u	nTipsSpc.vim	/^vmap ,u ?\\\/*dd\/*\\\/dd:nohl<CR>$/;"	m
Mosh_Show_Colors	nTipsSpc.vim	/^function! Mosh_Show_Colors()$/;"	f
Ruby_eval_vsplit	nTipsSpc.vim	/^function! Ruby_eval_vsplit() range$/;"	f
<F7>	nTipsSpc.vim	/^vmap <silent> <F7> :call Ruby_eval_vsplit()<cr>$/;"	m
<F7>	nTipsSpc.vim	/^nmap <silent> <F7> mzggVG<F7>`z$/;"	m
<F7>	nTipsSpc.vim	/^imap <silent> <F7> <ESC><F7>a$/;"	m
<S-F7>	nTipsSpc.vim	/^map  <silent> <S-F7> <C-W>l:bw<cr>$/;"	m
<S-F7>	nTipsSpc.vim	/^imap <silent> <S-F7> <ESC><S-F7>a$/;"	m
Scramble	nTipsSpc.vim	/^function Scramble()$/;"	f
Unscramble	nTipsSpc.vim	/^function Unscramble()$/;"	f
<F7>	nTipsSpc.vim	/^map <silent> <F7> :call Scramble()<Esc>$/;"	m
<F8>	nTipsSpc.vim	/^map <silent> <F8> :call Unscramble()<Esc>$/;"	m
<F7>	nTipsSpell.vim	/^nmap <F7> \\ss$/;"	m
<F7>	nTipsSpell.vim	/^vmap <F7> <C-C> \\ss$/;"	m
<F7>	nTipsSpell.vim	/^omap <F7> \\ss$/;"	m
<F7>	nTipsSpell.vim	/^map! <F7> <C-C> \\ss$/;"	m
\ss	nTipsSpell.vim	/^noremap <silent> \\ss :call SuggestWord()<return>$/;"	m
SuggestWord	nTipsSpell.vim	/^function! SuggestWord () let rw = tempname() let oldspelling =$/;"	f
<S-Insert>	nTipsSpell.vim	/^vnoremap <S-Insert> <C-C>`<v`>s<Space><Esc>mq:e ispell.tmp<CR>i<C-R>"<Esc>:w<CR>:! xterm -bg ivory -fn 10x20 -e ispell %<CR><CR>:e %<CR><CR>ggVG<Esc>`<v`>s<Esc>:bwipeout!<CR>:!rm ispell.tmp*<CR>`q"_s<C-R>"<Esc>$/;"	m
<S-Insert>	nTipsSpell.vim	/^noremap <S-Insert> :w<CR>:! xterm -bg ivory -fn 10x20 -e ispell %<CR><Space>:e %<CR><Space>$/;"	m
qw	nTipsSRound.vim	/^  nnoremap qw :silent! normal mpea'<esc>bi'<esc>`pl$/;"	m
qd	nTipsSRound.vim	/^  nnoremap qd :silent! normal mpea"<esc>bi"<esc>`pl$/;"	m
wq	nTipsSRound.vim	/^  nnoremap wq :silent! normal mpeld bhd `ph^M$/;"	m
{	nTipsSRound.vim	/^imap { <esc>:call ReplaceCurly()<Cr>cl$/;"	m
ReplaceCurly	nTipsSRound.vim	/^function! ReplaceCurly()$/;"	f
<leader>{}	nTipsSRound.vim	/^nmap <leader>{} O{<esc>ddj>>ddkP$/;"	m
<leader>{}	nTipsSRound.vim	/^vmap <leader>{} <esc>o{<esc>ddgv>gvdp$/;"	m
TextEnableCodeSnip	nTipsSRound.vim	/^function! TextEnableCodeSnip(filetype,start,end) abort$/;"	f
MyFoldText	nTipsSRound.vim	/^  function MyFoldText()$/;"	f
SessSave	nTipsSRound.vim	/^	command! -bar SessSave call SessSave()$/;"	c
SessSave	nTipsSRound.vim	/^	function! SessSave()$/;"	f
SessExtraFname	nTipsSRound.vim	/^	function! SessExtraFname()$/;"	f
SessExtraOpen	nTipsSRound.vim	/^	command! -bar SessExtraOpen   exe 'new '.SessExtraFname()$/;"	c
SessExtraReread	nTipsSRound.vim	/^	command! -bar SessExtraReread exe 'source '.SessExtraFname()$/;"	c
<F7>	nTipsSRound.vim	/^map <F7> mzgg=G'z<CR>$/;"	m
the	nTipsSRound.vim	/^maps the sequence gC to a macro which wraps a block of text, from the current line back to the line marked by the "a" in a C style comment like:$/;"	m
Surround	nTipsSRound.vim	/^fun! Surround(s1, s2) range$/;"	f
_"	nTipsSRound.vim	/^vnoremap _" :call Surround('"', '"')<CR>$/;"	m
_(	nTipsSRound.vim	/^vnoremap _( :call Surround('(', ')')<CR>$/;"	m
_[	nTipsSRound.vim	/^vnoremap _[ :call Surround('[', ']')<CR>$/;"	m
_{	nTipsSRound.vim	/^vnoremap _{ :call Surround('{', '}')<CR>$/;"	m
Sur	nTipsSRound.vim	/^command! -range -nargs=* Sur call Surround(<f-args>)$/;"	c
Quotereturn	nTipsSRound.vim	/^function! Quotereturn()$/;"	f
<CR>	nTipsSRound.vim	/^inoremap <CR> <C-R>=Quotereturn()<CR>$/;"	m
Quotebackspace	nTipsSRound.vim	/^function! Quotebackspace()$/;"	f
<BS>	nTipsSRound.vim	/^inoremap <BS> <C-R>=Quotebackspace()<CR>$/;"	m
,	nTipsSRound.vim	/^mappings, follow these steps. This example creates$/;"	m
<S-Tab>	nTipsTable.vim	/^map <S-Tab> :call NextField(' \\{2,}',2,' ',0)<CR>$/;"	m
<S-Tab>	nTipsTable.vim	/^map! <S-Tab> <C-O>:call NextField(' \\{2,}',2,' ',0)<CR>$/;"	m
NextField	nTipsTable.vim	/^func! NextField(fieldsep,minlensep,padstr,offset)$/;"	f
is	nTipsTable.vim	/^mapping is especially useful in insert mode as it inserts the correct$/;"	m
or	nTipsTAG.vim	/^command or option.  To read more about a particular command or option$/;"	c
line	nTipsTAG.vim	/^       command line option.$/;"	c
<F6>	nTipsTemp.vim	/^vnoremap <F6> :!perl E:\\\\Devtools\\\\vim\\\\vimfiles\\\\template\\truler.pl<CR>$/;"	m
ShowFunc	nTips.vim	/^function! ShowFunc()$/;"	f
<F10>	nTips.vim	/^map  <F10>  :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>$/;"	m
InsertTabWrapper	nTips.vim	/^function InsertTabWrapper()$/;"	f
<tab>	nTips.vim	/^inoremap <tab> <c-r>=InsertTabWrapper()<cr>$/;"	m
<f1>	nTips.vim	/^map <f1> :previous<cr>$/;"	m
<f2>	nTips.vim	/^map <f2> :next<cr>$/;"	m
<M-Down>	nTips.vim	/^nmap <silent> <M-Down> :call ScrollOtherWindow("down")<CR>$/;"	m
<M-Up>	nTips.vim	/^nmap <silent> <M-Up> :call ScrollOtherWindow("up")<CR>$/;"	m
ScrollOtherWindow	nTips.vim	/^fun! ScrollOtherWindow(dir)$/;"	f
_F	nTips.vim	/^map _F ma[[k"xyy`a:echo @x<CR>$/;"	m
_F	nTips.vim	/^now _F will display which function you are currently in.$/;"	m
j	nTips.vim	/^map j jzz$/;"	m
k	nTips.vim	/^map k kzz$/;"	m
<C-BS>	nTips.vim	/^    imap <C-BS>        <Esc>vBc$/;"	m
)	nTips.vim	/^    inoremap ) )<c-o>%<c-o>:sleep 500m<CR><c-o>%<c-o>a$/;"	m
SetExecutableBit	nTips.vim	/^fun! SetExecutableBit()$/;"	f
Xbit	nTips.vim	/^command -nargs=0 Xbit call SetExecutableBit()$/;"	c
Cpage	nTips.vim	/^command Cpage silent !cp '%:p' "c:\/Progra~1\/Tomcat\/webapps\/console\/pages\/%"$/;"	c
Browser	nTips.vim	/^function! Browser ()$/;"	f
<Leader>w	nTips.vim	/^map <Leader>w :call Browser ()<CR>$/;"	m
<S-Space>	nTips.vim	/^imap <S-Space> <esc>l$/;"	m
<C-CR>	nTips.vim	/^imap <C-CR> <esc>o$/;"	m
<S-CR>	nTips.vim	/^imap <S-CR> <esc>O$/;"	m
<S-Space>	nTips.vim	/^nmap <S-Space> i$/;"	m
<space><space>	nTips.vim	/^nmap <space><space> i$/;"	m
<CR>	nTips.vim	/^nnoremap <CR> o$/;"	m
<space>	nTips.vim	/^map <space> <c-W>w$/;"	m
<space><space>	nTips.vim	/^map <space><space> :call OpenSplittedWindowWide()<cr>$/;"	m
OpenSplittedWindowWide	nTips.vim	/^function OpenSplittedWindowWide()$/;"	f
<tab>	nTips.vim	/^nmap <tab> :if &modifiable && !&readonly && &modified <cr> :w<cr> :endif<cr> :bn<cr>$/;"	m
<s-tab>	nTips.vim	/^nmap <s-tab> :if &modifiable && !&readonly && &modified <cr> :w<cr> :endif<cr> :bp<cr>$/;"	m
<Backspace>	nTips.vim	/^imap <Backspace> <left><del>$/;"	m
<C-j>	nTips.vim	/^imap <C-j> <Esc>Ji$/;"	m
.f	nTips.vim	/^map .f v%zf$/;"	m
.;	nTips.vim	/^map .; v%:s\/^\/;;;\/<CR>:noh<CR>$/;"	m
st	nTips.vim	/^map st :set tw=70<cr>v<S-}>gq<End>$/;"	m
<F9>	nTips.vim	/^map <F9> :!psql -d yourdb < % <BAR> less$/;"	m
<leader>fold	nTips.vim	/^vmap    <leader>fold mz:<esc>'<O\/\/ {{{<esc>'>o\/\/ }}}<esc>`z?{{{<cr>A<space>$/;"	m
CopyPattern	nTips.vim	/^function CopyPattern()$/;"	f
S	nTips.vim	/^map S diw"0P$/;"	m
Kwbd	nTips.vim	/^com! Kwbd let kwbd_bn= bufnr("%")|enew|exe "bdel ".kwbd_bn|unlet kwbd_bn$/;"	c
Kwbd	nTips.vim	/^        function! Kwbd(kwbdStage)$/;"	f
<A-e>	nTips.vim	/^map <A-e> :!echo <cword> \\| ispell -d british -a -- <return>$/;"	m
<A-d>	nTips.vim	/^map <A-d> :!echo <cword> \\| ispell -d danish -a -- <return>$/;"	m
<C-F>	nTips.vim	/^imap <C-F> {<CR>}<C-O>O$/;"	m
late	nTips.vim	/^    augroup late-verbose$/;"	a
:e	nTips.vim	/^    nnoremap :e :ls<CR>:e<Space>$/;"	m
<A-v>	nTips.vim	/^map <A-v> viw"+gPb$/;"	m
<A-c>	nTips.vim	/^map <A-c> viw"+y$/;"	m
<A-x>	nTips.vim	/^map <A-x> viw"+x$/;"	m
$INCLUDE	nTips.vim	/^let $INCLUDE = expand("%:p:h") . ";" . $INCLUDE$/;"	v
<C-]>	nTips.vim	/^nnoremap <C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>$/;"	m
shows	nTips.vim	/^command shows the tag in a preview window without changing the current buffer$/;"	c
LastMod	nTips.vim	/^function! LastMod()$/;"	f
Remove	nTips.vim	/^command! -complete=file -nargs=1 Remove :echo 'Remove: '.'<f-args>'.' '.(delete(<f-args>) == 0 ? 'SUCCEEDED' : 'FAILED')$/;"	c
QFix	nTips.vim	/^command -bang -nargs=? QFix call QFixToggle(<bang>0)$/;"	c
QFixToggle	nTips.vim	/^function! QFixToggle(forced)$/;"	f
\`	nTips.vim	/^nmap <silent> \\` :QFix<CR>$/;"	m
<F3>	nTips.vim	/^nmap <F3>  :redir @a<CR>:g\/\/<CR>:redir END<CR>:new<CR>:put! a<CR><CR>$/;"	m
<m-i>	nTips.vim	/^inoremap <m-i> <tab>$/;"	m
<tab>	nTips.vim	/^nnoremap <tab> <esc>$/;"	m
<tab>	nTips.vim	/^vnoremap <tab> <esc>gV$/;"	m
<tab>	nTips.vim	/^onoremap <tab> <esc>$/;"	m
<tab>	nTips.vim	/^inoremap <tab> <esc>`^$/;"	m
<Esc>	nTips.vim	/^  inoremap <silent><Esc>      <C-r>=pumvisible()?"\\<lt>C-e>":"\\<lt>Esc>"<CR>$/;"	m
<CR>	nTips.vim	/^  inoremap <silent><CR>       <C-r>=pumvisible()?"\\<lt>C-y>":"\\<lt>CR>"<CR>$/;"	m
<Down>	nTips.vim	/^  inoremap <silent><Down>     <C-r>=pumvisible()?"\\<lt>C-n>":"\\<lt>Down>"<CR>$/;"	m
<Up>	nTips.vim	/^  inoremap <silent><Up>       <C-r>=pumvisible()?"\\<lt>C-p>":"\\<lt>Up>"<CR>$/;"	m
<PageDown>	nTips.vim	/^  inoremap <silent><PageDown> <C-r>=pumvisible()?"\\<lt>PageDown>\\<lt>C-p>\\<lt>C-n>":"\\<lt>PageDown>"<CR>$/;"	m
<PageUp>	nTips.vim	/^  inoremap <silent><PageUp>   <C-r>=pumvisible()?"\\<lt>PageUp>\\<lt>C-p>\\<lt>C-n>":"\\<lt>PageUp>"<CR>$/;"	m
<Esc>	nTips.vim	/^  inoremap <silent><Esc>      <C-r>=pumvisible()?"\\<lt>C-y>":"\\<lt>Esc>"<CR>$/;"	m
fnp	nTips.vim	/^        imap fnp   <C-R>=expand("%:t:r")<CR>$/;"	m
MHooremanSetDiffEnviron	nTips.vim	/^function! MHooremanSetDiffEnviron()$/;"	f
<space>	nTips.vim	/^nnoremap <space> zo$/;"	m
<backspace>	nTips.vim	/^nnoremap <backspace> zc$/;"	m
<space>	nTips.vim	/^nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>$/;"	m
1	nTips.vim	/^  inoremap 1 !$/;"	m
2	nTips.vim	/^  inoremap 2 @$/;"	m
3	nTips.vim	/^  inoremap 3 #$/;"	m
4	nTips.vim	/^  inoremap 4 \$$/;"	m
5	nTips.vim	/^  inoremap 5 %$/;"	m
6	nTips.vim	/^  inoremap 6 ^$/;"	m
7	nTips.vim	/^  inoremap 7 &$/;"	m
8	nTips.vim	/^  inoremap 8 *$/;"	m
9	nTips.vim	/^  inoremap 9 ($/;"	m
0	nTips.vim	/^  inoremap 0 )$/;"	m
-	nTips.vim	/^  inoremap - _$/;"	m
!	nTips.vim	/^  inoremap ! 1$/;"	m
@	nTips.vim	/^  inoremap @ 2$/;"	m
#	nTips.vim	/^  inoremap # 3$/;"	m
$	nTips.vim	/^  inoremap $ 4$/;"	m
%	nTips.vim	/^  inoremap % 5$/;"	m
^	nTips.vim	/^  inoremap ^ 6$/;"	m
&	nTips.vim	/^  inoremap & 7$/;"	m
*	nTips.vim	/^  inoremap * 8$/;"	m
(	nTips.vim	/^  inoremap ( 9$/;"	m
)	nTips.vim	/^  inoremap ) 0$/;"	m
_	nTips.vim	/^  inoremap _ -$/;"	m
b:match_words	nTips.vim	/^let b:match_words = '\\s*#\\s*region.*$:\\s*#\\s*endregion$/;"	v
GitGrep	nTips.vim	/^fun GitGrep(...)$/;"	f
G	nTips.vim	/^command -nargs=? G call GitGrep(<f-args>)$/;"	c
OnlineDoc	nTips.vim	/^function! OnlineDoc()$/;"	f
<M-d>	nTips.vim	/^map <silent> <M-d> :call OnlineDoc()<CR>$/;"	m
PersistentEcho	nTips.vim	/^func! PersistentEcho(msg)$/;"	f
g:PersistentEcho	nTips.vim	/^let g:PersistentEcho=''$/;"	v
b:current_syntax	nTips.vim	/^let b:current_syntax = "en"$/;"	v
filetypedetect	nTips.vim	/^augroup filetypedetect$/;"	a
showmarks_include	nTips.vim	/^let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
g:showmarks_enable	nTips.vim	/^let g:showmarks_enable = 1$/;"	v
<A-S-p>	nTips.vim	/^map <A-S-p> :Project<CR>$/;"	m
<A-S-o>	nTips.vim	/^map <A-S-o> :Project<CR>:redraw<CR>\/$/;"	m
<F3>	nTips.vim	/^nmap <silent> <F3> <Plug>ToggleProject$/;"	m
g:proj_window_width	nTips.vim	/^let g:proj_window_width = 30$/;"	v
g:proj_window_increment	nTips.vim	/^let g:proj_window_increment = 50$/;"	v
<F4>	nTips.vim	/^nnoremap <silent> <F4> :TlistToggle<CR>$/;"	m
Tlist_Show_One_File	nTips.vim	/^let Tlist_Show_One_File = 1 " Displaying tags for only one file~$/;"	v
Tlist_Exist_OnlyWindow	nTips.vim	/^let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill yourself $/;"	v
Tlist_Use_Right_Window	nTips.vim	/^let Tlist_Use_Right_Window = 1 " split to the right side of the screen $/;"	v
Tlist_Sort_Type	nTips.vim	/^let Tlist_Sort_Type = "order" " sort by order or name$/;"	v
Tlist_Display_Prototype	nTips.vim	/^let Tlist_Display_Prototype = 0 " do not show prototypes and not tags in the taglist window.$/;"	v
Tlist_Compart_Format	nTips.vim	/^let Tlist_Compart_Format = 1 " Remove extra information and blank lines from the taglist window.$/;"	v
Tlist_GainFocus_On_ToggleOpen	nTips.vim	/^let Tlist_GainFocus_On_ToggleOpen = 1 " Jump to taglist window on open.$/;"	v
Tlist_Display_Tag_Scope	nTips.vim	/^let Tlist_Display_Tag_Scope = 1 " Show tag scope next to the tag name.$/;"	v
Tlist_Close_On_Select	nTips.vim	/^let Tlist_Close_On_Select = 1 " Close the taglist window when a file or tag is selected.$/;"	v
Tlist_Enable_Fold_Column	nTips.vim	/^let Tlist_Enable_Fold_Column = 0 " Don't Show the fold indicator column in the taglist window.$/;"	v
Tlist_WinWidth	nTips.vim	/^let Tlist_WinWidth = 40$/;"	v
g:miniBufExplTabWrap	nTips.vim	/^let g:miniBufExplTabWrap = 1 " make tabs show complete (no broken on two lines) $/;"	v
g:miniBufExplModSelTarget	nTips.vim	/^let g:miniBufExplModSelTarget = 1 " If you use other explorers like TagList you can (As of 6.2.8) set it at 1:$/;"	v
g:miniBufExplUseSingleClick	nTips.vim	/^let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to goto the selected buffer. $/;"	v
g:miniBufExplMaxSize	nTips.vim	/^let g:miniBufExplMaxSize = 1 " <max lines: defualt 0> setting this to 0 will mean the window gets as big as needed to fit all your buffers. $/;"	v
<C-j>	nTips.vim	/^imap <C-j> <C-X><C-O>$/;"	m
OmniCpp_GlobalScopeSearch	nTips.vim	/^let OmniCpp_GlobalScopeSearch = 1$/;"	v
OmniCpp_NamespaceSearch	nTips.vim	/^let OmniCpp_NamespaceSearch = 1$/;"	v
OmniCpp_DisplayMode	nTips.vim	/^let OmniCpp_DisplayMode = 1$/;"	v
OmniCpp_ShowScopeInAbbr	nTips.vim	/^let OmniCpp_ShowScopeInAbbr = 0$/;"	v
OmniCpp_ShowPrototypeInAbbr	nTips.vim	/^let OmniCpp_ShowPrototypeInAbbr = 1$/;"	v
OmniCpp_ShowAccess	nTips.vim	/^let OmniCpp_ShowAccess = 1$/;"	v
OmniCpp_DefaultNamespaces	nTips.vim	/^let OmniCpp_DefaultNamespaces = ["std"]$/;"	v
OmniCpp_MayCompleteDot	nTips.vim	/^let OmniCpp_MayCompleteDot = 0$/;"	v
OmniCpp_MayCompleteArrow	nTips.vim	/^let OmniCpp_MayCompleteArrow = 0$/;"	v
OmniCpp_MayCompleteScope	nTips.vim	/^let OmniCpp_MayCompleteScope = 0$/;"	v
OmniCpp_SelectFirstItem	nTips.vim	/^let OmniCpp_SelectFirstItem = 0$/;"	v
you	nTips.vim	/^now you may find life changed. $/;"	m
TmlStatusline	nTips.vim	/^fu! TmlStatusline()$/;"	f
TheInitializationMap	nTipsVIM.vim	/^            norm TheInitializationMap$/;"	m
\[i	nTipsVIM.vim	/^            norm \\[i$/;"	m
,SS	nTipsVIM.vim	/^ map ,SS :exec system("ispell -l -t -d br < ".expand("%")." \\| sort -u \\| sed 's\/\\\\(.*\\\\)\/syntax match Underlined \\"\\\\\\\\<\\\\1\\\\\\\\>\\" contains=TOP \/'")$/;"	m
aren't	nTipsVIM.vim	/^improvements aren't so hard to do; actually, I use another mappings $/;"	m
g:PathToSessions	nTipsVIM.vim	/^let g:PathToSessions = $HOME . "\/.vim\/sessions\/"$/;"	v
VimEnter	nTipsVIM.vim	/^function! VimEnter()$/;"	f
VimLeave	nTipsVIM.vim	/^function! VimLeave()$/;"	f
SetSession	nTipsVIM.vim	/^com -nargs=1 SetSession :let g:SessionFileName = g:PathToSessions . <args> . ".vim"$/;"	c
UnsetSession	nTipsVIM.vim	/^com -nargs=0 UnsetSession :let g:SessionFileName = ""$/;"	c
$VIMRUNTIME	nTipsVIM.vim	/^   let $VIMRUNTIME='C:\/usr\/share\/vim\/vim62'$/;"	v
gt	nTipsVIM.vim	/^      nmap gt mAT f:l"aywbbgf:^Ra^M$/;"	m
gt	nTipsVIM.vim	/^nmap gt ... place the above steps into key combinations "g" "t" so next time use "gt" instead of "gf" on the error tag!$/;"	m
<Leader>t	nTipsXML.vim	/^nmap <Leader>t viw<Leader>t $/;"	m
<Leader>t	nTipsXML.vim	/^vnoremap <Leader>t <Esc>:call TagSelection()<CR>$/;"	m
<Leader>t	nTipsXML.vim	/^nmap <Leader>t viw<Leader>t$/;"	m
<Leader>t	nTipsXML.vim	/^vnoremap <Leader>t <Esc>:call TagSelection()<CR>$/;"	m
TagSelection	nTipsXML.vim	/^function! TagSelection()$/;"	f
unite_settings	nUnite.vim	/^        function! s:unite_settings()$/;"	f
g:unite_source_menu_menus	nUnite.vim	/^        let g:unite_source_menu_menus.git = {$/;"	v
g:unite_source_menu_menus	nUnite.vim	/^        let g:unite_source_menu_menus.git.command_candidates = [$/;"	v
<Leader>e	nUnite.vim	/^        nnoremap <Leader>e :Unite -silent -start-insert menu:git<CR>$/;"	m
,	nVimTextObject.vim	/^			none, then leading white space is included.$/;"	m
s:V	nVital.vim	/^let s:V = vital#ujihisa#new()$/;"	v
ujihisa#util#system	nVital.vim	/^function! ujihisa#util#system(...)$/;"	f
s:V	nVital.vim	/^let s:V = vital#ujihisa#new()$/;"	v
s:O	nVital.vim	/^let s:O = s:V.import('Data.OrderedSet')$/;"	v
s:V	nVital.vim	/^let s:V = vital#ujihisa#new()$/;"	v
s:V	nVital.vim	/^let s:V = vital#ujihisa#new()$/;"	v
g:ycm_key_list_select_completion	nYcmZwischen.vim	/^let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']$/;"	v
g:ycm_key_list_previous_completion	nYcmZwischen.vim	/^let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']$/;"	v
g:SuperTabDefaultCompletionType	nYcmZwischen.vim	/^let g:SuperTabDefaultCompletionType = '<C-n>'$/;"	v
g:UltiSnipsExpandTrigger	nYcmZwischen.vim	/^let g:UltiSnipsExpandTrigger="<cr>"$/;"	v
g:UltiSnipsJumpForwardTrigger	nYcmZwischen.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-j>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	nYcmZwischen.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-k>"$/;"	v
Git2GREP	nZwischen.vim	/^        fun! Git2GREP(...)$/;"	f
GGR	nZwischen.vim	/^        command! -nargs=? GGR call Git2GREP(<f-args>)$/;"	c
templates	nZwischen.vim	/^  augroup templates$/;"	a
g:project_use_nerdtree	nZwischen.vim	/^        let g:project_use_nerdtree = 1$/;"	v
FT_Mako	nZwischen.vim	/^        function! FT_Mako()$/;"	f
Mako_templ	nZwischen.vim	/^        augroup Mako_templ$/;"	a
g:CtrlXA_Toggles	nZwischen.vim	/^        let g:CtrlXA_Toggles = [$/;"	v
g:ale_sign_error	nZwischen.vim	/^  let g:ale_sign_error = '☞ '$/;"	v
g:ale_sign_warning	nZwischen.vim	/^  let g:ale_sign_warning = '☞ '$/;"	v
g:ale_statusline_format	nZwischen.vim	/^  let g:ale_statusline_format = ['{%d}', '{%d}', '']$/;"	v
,t	nZwischen.vim	/^        map             ,t              :CopyTestUnderCursor<cr>$/;"	m
Co	nZwischen.vim	/^        command! Co CopyTestUnderCursor$/;"	c
<Leader>s	nZwischen.vim	/^        vmap <Leader>s <Plug>Vsurround$/;"	m
<Leader>S	nZwischen.vim	/^        vmap <Leader>S <Plug>VSurround$/;"	m
Flake8	nZwischen.vim	/^        function! Flake8(exe, args, recheck_now)$/;"	f
Python2	nZwischen.vim	/^        function! Python2(recheck_now)$/;"	f
Python3	nZwischen.vim	/^        function! Python3(recheck_now)$/;"	f
Python2	nZwischen.vim	/^        command! -bar Python2 call Python2(1)$/;"	c
Python3	nZwischen.vim	/^        command! -bar Python3 call Python3(1)$/;"	c
<C-K>	nZwischen.vim	/^        nmap <silent>   <C-K>           <Plug>(ale_previous_wrap)$/;"	m
<C-J>	nZwischen.vim	/^        nmap <silent>   <C-J>           <Plug>(ale_next_wrap)$/;"	m
<F4>	nZwischen.vim	/^        map             <F4>            :FirstOrNextInList<CR>$/;"	m
<F4>	nZwischen.vim	/^        imap            <F4>            <C-O><F4>$/;"	m
<S-F4>	nZwischen.vim	/^        map             <S-F4>          :PrevInList<CR>$/;"	m
<S-F4>	nZwischen.vim	/^        imap            <S-F4>          <C-O><S-F4>$/;"	m
<C-F4>	nZwischen.vim	/^        map             <C-F4>          :CurInList<CR>$/;"	m
<C-F4>	nZwischen.vim	/^        imap            <C-F4>          <C-O><C-F4>$/;"	m
/	nZwischen.vim	/^         map \/        <Plug>(incsearch-forward)$/;"	m
CtrlPDirMRU	nZwischen.vim	/^        augroup CtrlPDirMRU$/;"	a
<leader>qp	nZwischen.vim	/^        nnoremap <leader>qp gqip$/;"	m
<leader>ft	nZwischen.vim	/^        nnoremap <leader>ft Vatzf$/;"	m
<leader>v	nZwischen.vim	/^        nnoremap <leader>v <C-w>v<C-w>l$/;"	m
<leader>d	nZwischen.vim	/^        nmap <leader>d :cd ~\/Desktop<cr>:e.<cr>$/;"	m
,da	nZwischen.vim	/^        nmap <silent> ,da :exec "1," . bufnr('$') . "bd"<cr>$/;"	m
<leader>bv	nZwischen.vim	/^        nmap <leader>bv :bel vsp$/;"	m
;h	nZwischen.vim	/^        map! ;h <a href=""><\/a><ESC>5hi$/;"	m
<M-z>	nZwischen.vim	/^        vmap <M-z> mz:<esc>'<O\/\/ {{{<esc>'>o\/\/ }}}<esc>`z?{{{<cr>A<space>$/;"	m
<M-1>	nZwischen.vim	/^        vmap <M-1> mz:<esc>'<O {{{<esc>'>o }}}<esc>`z?{{{<cr>A<space>$/;"	m
MakeSession	nZwischen.vim	/^        function! MakeSession()$/;"	f
LoadSession	nZwischen.vim	/^        function! LoadSession()$/;"	f
QFixToggle	nZwischen.vim	/^        function! QFixToggle(forced)$/;"	f
QFix	nZwischen.vim	/^        command -bang -nargs=? QFix call QFixToggle(<bang>0)$/;"	c
\`	nZwischen.vim	/^        nmap <silent> \\` :QFix<CR>$/;"	m
ft_java	nZwischen.vim	/^        augroup ft_java$/;"	a
ft_quickfix	nZwischen.vim	/^        augroup ft_quickfix$/;"	a
ft_vim	nZwischen.vim	/^        augroup ft_vim$/;"	a
ft_fugitive	nZwischen.vim	/^        augroup ft_fugitive$/;"	a
vimscript	nZwischen.vim	/^        function! s:vimscript()$/;"	f
vimrc	nZwischen.vim	/^        augroup vimrc-vimscript$/;"	a
TableCreator	nZwischen.vim	/^        function! TableCreator()$/;"	f
<F4>	nZwischen.vim	/^        map <F4> :call TableCreator()<CR>$/;"	m
g:syntastic_mode_map	scratchIt.vim	/^        let g:syntastic_mode_map = { 'mode': 'active',$/;"	v
BgHighlight	scratchIt.vim	/^augroup BgHighlight$/;"	a
BgHighlight	scratchIt.vim	/^augroup BgHighlight$/;"	a
BgHighlight	scratchIt.vim	/^augroup BgHighlight$/;"	a
NrHighlight	scratchIt.vim	/^augroup NrHighlight$/;"	a
OnlineDoc	scratchIt.vim	/^function! OnlineDoc()$/;"	f
<M-d>	scratchIt.vim	/^map <silent> <M-d> :call OnlineDoc()<CR>$/;"	m
g:lightline	scratchIt.vim	/^let g:lightline = {$/;"	v
LightlineFilename	scratchIt.vim	/^function! LightlineFilename()$/;"	f
s:thesaurus_pat	topAerr-ninit.vim	/^        let s:thesaurus_pat = "~\/git\/aTest\/dotFiles\/DICT\/mthesaur.txt"$/;"	v
maplocalleader	topAerr-ninit.vim	/^        let maplocalleader=','$/;"	v
mapleader	topAerr-ninit.vim	/^        let mapleader=' '$/;"	v
vimrc	topAerr-ninit.vim	/^        augroup vimrc$/;"	a
<m-b>	topAerr-ninit.vim	/^        map <m-b> ggVG$/;"	m
<m-;>	topAerr-ninit.vim	/^        nnoremap <m-;> :ls\\|sleep<enter><enter>$/;"	m
<M-1>	topAerr-ninit.vim	/^        map <M-1> :confirm :b1 <CR>$/;"	m
<M-2>	topAerr-ninit.vim	/^        map <M-2> :confirm :b2 <CR>$/;"	m
<M-3>	topAerr-ninit.vim	/^        map <M-3> :confirm :b3 <CR>$/;"	m
<M-4>	topAerr-ninit.vim	/^        map <M-4> :confirm :b4 <CR>$/;"	m
<M-5>	topAerr-ninit.vim	/^        map <M-5> :confirm :b5 <CR>$/;"	m
LastMod	topAerr-ninit.vim	/^        function! LastMod()$/;"	f
Shebang	topAerr-ninit.vim	/^        augroup Shebang$/;"	a
gitroot	topAerr-ninit.vim	/^                let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\\n\\r]', '', 'g')$/;"	v
g:easytags_auto_highlight	topAerr-ninit.vim	/^        let g:easytags_auto_highlight = 1$/;"	v
g:easytags_syntax_keyword	topAerr-ninit.vim	/^        let g:easytags_syntax_keyword = 'always'$/;"	v
g:easytags_events	topAerr-ninit.vim	/^        let g:easytags_events = ['BufWritePost']$/;"	v
jj	topAerr-ninit.vim	/^        imap jj <Esc>$/;"	m
ss	topAerr-ninit.vim	/^        noremap ss :wa<cr>$/;"	m
qq	topAerr-ninit.vim	/^        noremap qq :wa<cr> :bd<cr>$/;"	m
sq	topAerr-ninit.vim	/^        noremap sq :wa<cr> :qa<cr>$/;"	m
qa	topAerr-ninit.vim	/^        noremap qa :qa!<cr>$/;"	m
ZZ	topAerr-ninit.vim	/^        nnoremap ZZ  <Nop> "-Disable-ZZ-$/;"	m
ge	topAerr-ninit.vim	/^        nnoremap ge :w<CR>:e #<CR>$/;"	m
ee	topAerr-ninit.vim	/^        nnoremap ee :e#<CR>$/;"	m
j	topAerr-ninit.vim	/^        noremap j gj$/;"	m
k	topAerr-ninit.vim	/^        noremap k gk$/;"	m
gj	topAerr-ninit.vim	/^        noremap gj j$/;"	m
gk	topAerr-ninit.vim	/^        noremap gk k$/;"	m
<C-A>	topAerr-ninit.vim	/^        cnoremap <C-A> <Home>$/;"	m
<C-E>	topAerr-ninit.vim	/^        cnoremap <C-E> <End>$/;"	m
<C-d>	topAerr-ninit.vim	/^        cnoremap <C-d> <Del>$/;"	m
<C-P>	topAerr-ninit.vim	/^        nnoremap <C-P> <Up>$/;"	m
<C-N>	topAerr-ninit.vim	/^        nnoremap <C-N> <Down>$/;"	m
Q	topAerr-ninit.vim	/^        nnoremap Q q$/;"	m
<leader>-	topAerr-ninit.vim	/^        nmap <silent> <leader>- :t.<CR>Vr-$/;"	m
aa	topAerr-ninit.vim	/^        nnoremap aa ggVG$/;"	m
<c-o>	topAerr-ninit.vim	/^        nnoremap <c-o> <c-o>zz$/;"	m
<c-i>	topAerr-ninit.vim	/^        nnoremap <c-i> <c-i>zz$/;"	m
<Leader>u	topAerr-ninit.vim	/^        nnoremap <silent> <Leader>u :<C-u>update<CR>$/;"	m
Y	topAerr-ninit.vim	/^        nnoremap Y y\$$/;"	m
H	topAerr-ninit.vim	/^        nnoremap H mzJ`z$/;"	m
S	topAerr-ninit.vim	/^        nnoremap S i<cr><esc>^mwgk:silent! s\/\\v +$\/\/<cr>:noh<cr>`w$/;"	m
vv	topAerr-ninit.vim	/^        nnoremap <silent> vv <C-w>v$/;"	m
g:bling_time	topAerr-ninit.vim	/^        let g:bling_time = 42$/;"	v
g:bling_color_fg	topAerr-ninit.vim	/^        let g:bling_color_fg = 'green'$/;"	v
g:bling_color_cterm	topAerr-ninit.vim	/^        let g:bling_color_cterm = 'reverse'$/;"	v
z1	topAerr-ninit.vim	/^        nnoremap z1 :set foldlevel=1<cr>$/;"	m
z2	topAerr-ninit.vim	/^        nnoremap z2 :set foldlevel=2<cr>$/;"	m
z3	topAerr-ninit.vim	/^        nnoremap z3 :set foldlevel=3<cr>$/;"	m
z4	topAerr-ninit.vim	/^        nnoremap z4 :set foldlevel=4<cr>$/;"	m
z5	topAerr-ninit.vim	/^        nnoremap z5 :set foldlevel=5<cr>$/;"	m
zO	topAerr-ninit.vim	/^        nnoremap zO zczO$/;"	m
FocusLine	topAerr-ninit.vim	/^        function! FocusLine()$/;"	f
<c-z>	topAerr-ninit.vim	/^        nnoremap <c-z> :call FocusLine()<cr>$/;"	m
<cr>	topAerr-ninit.vim	/^        nnoremap <cr> o<esc>$/;"	m
<CR>	topAerr-ninit.vim	/^        inoremap <silent><expr> <CR> (pumvisible() && bufname('%') !=# '[Command Line]' ? "\\<C-e>\\<CR>" : "\\<C-g>u\\<CR>")$/;"	m
}	topAerr-ninit.vim	/^        noremap } }^$/;"	m
gp	topAerr-ninit.vim	/^        nnoremap <expr> gp '`['.strpart(getregtype(), 0, 1).'`]'$/;"	m
<	topAerr-ninit.vim	/^        vnoremap < <gv$/;"	m
>	topAerr-ninit.vim	/^        vnoremap > >gv$/;"	m
.	topAerr-ninit.vim	/^        vnoremap . :normal .<CR>$/;"	m
w!!	topAerr-ninit.vim	/^        cmap w!! w !sudo tee % >\/dev\/null$/;"	m
cd	topAerr-ninit.vim	/^        map cd :cd %:p:h<cr>$/;"	m
(	topAerr-ninit.vim	/^        nnoremap ( <c-x>:y x\\|@x<cr>$/;"	m
)	topAerr-ninit.vim	/^        nnoremap ) <c-a>:y x\\|@x<cr>$/;"	m
<F4>	topAerr-ninit.vim	/^        nmap <F4> :call <SID>SynStack()<CR>$/;"	m
SynStack	topAerr-ninit.vim	/^        function! <SID>SynStack()$/;"	f
ShowFuncKeys	topAerr-ninit.vim	/^        function! ShowFuncKeys(bang)$/;"	f
ShowFuncKeys	topAerr-ninit.vim	/^        com! -bang ShowFuncKeys :call ShowFuncKeys(<q-bang>)$/;"	c
ShowMaps	topAerr-ninit.vim	/^        function! s:ShowMaps()$/;"	f
ShowMaps	topAerr-ninit.vim	/^        com! ShowMaps call s:ShowMaps()      " Enable :ShowMaps to call the function$/;"	c
\m	topAerr-ninit.vim	/^        nnoremap \\m :ShowMaps<CR>            " Map keys to call the function$/;"	m
ff	topAerr-ninit.vim	/^        nnoremap ff :call CscopeFindInteractive(expand('<cword>'))<CR>$/;"	m
g:UltiSnipsJumpForwardTrigger	topAerr-ninit.vim	/^                let g:UltiSnipsJumpForwardTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	topAerr-ninit.vim	/^                let g:UltiSnipsJumpBackwardTrigger="<s-tab>"$/;"	v
g:UltiSnipsListSnippets	topAerr-ninit.vim	/^                let g:UltiSnipsListSnippets="<C-R><tab>"$/;"	v
<C-b>	topAerr-ninit.vim	/^        imap <C-b>    <Plug>(neosnippet_expand_or_jump)$/;"	m
g:neocomplete#enable_at_startup	topAerr-ninit.vim	/^        let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_auto_select	topAerr-ninit.vim	/^        let g:neocomplete#enable_auto_select = 1$/;"	v
g:neocomplete#enable_smart_case	topAerr-ninit.vim	/^        let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#auto_completion_start_length	topAerr-ninit.vim	/^        let g:neocomplete#auto_completion_start_length = 3 "-zzz$/;"	v
g:neocomplete#sources#tags#cache_limit_size	topAerr-ninit.vim	/^        let g:neocomplete#sources#tags#cache_limit_size = 16777216 " 16MB$/;"	v
g:neocomplete#enable_fuzzy_completion	topAerr-ninit.vim	/^        let g:neocomplete#enable_fuzzy_completion = 1$/;"	v
g:deoplete#enable_ignore_case	topAerr-ninit.vim	/^        let g:deoplete#enable_ignore_case = 1$/;"	v
g:deoplete#enable_smart_case	topAerr-ninit.vim	/^        let g:deoplete#enable_smart_case = 1$/;"	v
g:deoplete#enable_camel_case	topAerr-ninit.vim	/^        let g:deoplete#enable_camel_case = 1$/;"	v
g:deoplete#enable_refresh_always	topAerr-ninit.vim	/^        let g:deoplete#enable_refresh_always = 1$/;"	v
g:deoplete#max_abbr_width	topAerr-ninit.vim	/^        let g:deoplete#max_abbr_width = 0$/;"	v
g:deoplete#max_menu_width	topAerr-ninit.vim	/^        let g:deoplete#max_menu_width = 0$/;"	v
<C-o>	topAerr-ninit.vim	/^        inoremap <silent> <C-o> <C-x><C-o>$/;"	m
<C-k>	topAerr-ninit.vim	/^        inoremap <silent> <C-k> <C-x><C-k>$/;"	m
<C-d>	topAerr-ninit.vim	/^        inoremap <silent> <C-d> <C-x><C-d>$/;"	m
<C-f>	topAerr-ninit.vim	/^        inoremap <silent> <C-f> <C-x><C-f>$/;"	m
<C-l>	topAerr-ninit.vim	/^        inoremap <silent> <C-l> <C-x><C-l>$/;"	m
g:ctrlp_map	topAerr-ninit.vim	/^        let g:ctrlp_map='<c-q>'$/;"	v
<leader>q	topAerr-ninit.vim	/^        nnoremap <leader>q :CtrlP<cr>$/;"	m
g:ctrlp_cmd	topAerr-ninit.vim	/^        let g:ctrlp_cmd = 'CtrlPMRU'$/;"	v
g:ctrlp_extensions	topAerr-ninit.vim	/^        let g:ctrlp_extensions = ['tag']$/;"	v
g:ctrlp_match_window_bottom	topAerr-ninit.vim	/^        let g:ctrlp_match_window_bottom = 0$/;"	v
g:ctrlp_match_window_reversed	topAerr-ninit.vim	/^        let g:ctrlp_match_window_reversed = 0$/;"	v
g:ctrlp_custom_ignore	topAerr-ninit.vim	/^        let g:ctrlp_custom_ignore = '\\v\\~$|\\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[\/\\\\])\\.(hg|git|bzr)($|[\/\\\\])|__init__\\.py'$/;"	v
g:ctrlp_dotfiles	topAerr-ninit.vim	/^        let g:ctrlp_dotfiles = 0$/;"	v
g:ctrlp_switch_buffer	topAerr-ninit.vim	/^        let g:ctrlp_switch_buffer = 0$/;"	v
g:ctrlp_working_path_mode	topAerr-ninit.vim	/^        let g:ctrlp_working_path_mode = 0$/;"	v
g:ctrlp_working_path_mode	topAerr-ninit.vim	/^        let g:ctrlp_working_path_mode = 'ar'$/;"	v
<C-r>	topAerr-ninit.vim	/^        imap <C-r> <plug>(fzf-complete-word)$/;"	m
<C-\>	topAerr-ninit.vim	/^        imap <C-\\> <plug>(fzf-complete-line)$/;"	m
<C-u>	topAerr-ninit.vim	/^        nmap <C-u> :Unite buffer file_mru file <CR>$/;"	m
<Leader>u	topAerr-ninit.vim	/^        nnoremap <Leader>u :Unite history\/yank file_mru file buffer file_rec bookmark <CR>$/;"	m
<Leader>h	topAerr-ninit.vim	/^        nnoremap <Leader>h :UniteWithCursorWord -silent help<CR>$/;"	m
<Leader>i	topAerr-ninit.vim	/^        nnoremap <Leader>i :Unite -silent history\/yank<CR>$/;"	m
<Leader>v	topAerr-ninit.vim	/^        nnoremap <Leader>v :UniteWithCursorWord -silent -no-split -auto-preview line<CR>$/;"	m
<Leader>t	topAerr-ninit.vim	/^        nnoremap <Leader>t :Unite -silent -vertical -winwidth=40  -direction=topleft -toggle outline<CR>$/;"	m
g:unite_source_grep_command	topAerr-ninit.vim	/^                let g:unite_source_grep_command = 'ag'$/;"	v
g:unite_source_grep_default_opts	topAerr-ninit.vim	/^                let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'$/;"	v
g:unite_source_grep_recursive_opt	topAerr-ninit.vim	/^                let g:unite_source_grep_recursive_opt = ''$/;"	v
g:unite_source_history_yank_save_clipboard	topAerr-ninit.vim	/^        let g:unite_source_history_yank_save_clipboard = 1$/;"	v
g:unite_source_mark_marks	topAerr-ninit.vim	/^        let g:unite_source_mark_marks = "abcdefghijklmnopqrstuvwxyz"$/;"	v
g:unite_candidate_icon	topAerr-ninit.vim	/^        let g:unite_candidate_icon = '∘'$/;"	v
g:unite_source_history_yank_enable	topAerr-ninit.vim	/^        let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_enable_start_insert	topAerr-ninit.vim	/^        let g:unite_enable_start_insert = 0$/;"	v
g:unite_enable_short_source_mes	topAerr-ninit.vim	/^        let g:unite_enable_short_source_mes = 0$/;"	v
g:unite_force_overwrite_statusline	topAerr-ninit.vim	/^        let g:unite_force_overwrite_statusline = 0$/;"	v
g:unite_prompt	topAerr-ninit.vim	/^        let g:unite_prompt = '>>> '$/;"	v
g:unite_marked_icon	topAerr-ninit.vim	/^        let g:unite_marked_icon = '✓'$/;"	v
g:unite_winheight	topAerr-ninit.vim	/^        let g:unite_winheight = 15$/;"	v
g:unite_update_time	topAerr-ninit.vim	/^        let g:unite_update_time = 200$/;"	v
g:unite_split_rule	topAerr-ninit.vim	/^        let g:unite_split_rule = 'botright'$/;"	v
g:unite_data_directory	topAerr-ninit.vim	/^        let g:unite_data_directory ='~\/.vim\/tmp\/unite'$/;"	v
g:unite_source_buffer_time_format	topAerr-ninit.vim	/^        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_file_mru_time_format	topAerr-ninit.vim	/^        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:unite_source_directory_mru_time_format	topAerr-ninit.vim	/^        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '$/;"	v
g:ackprg	topAerr-ninit.vim	/^                let g:ackprg = 'ag --vimgrep --smart-case'$/;"	v
g:ag_working_path_mode	topAerr-ninit.vim	/^                let g:ag_working_path_mode="r"$/;"	v
g:ctrlp_user_command	topAerr-ninit.vim	/^                let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'$/;"	v
g:ctrlp_use_caching	topAerr-ninit.vim	/^                let g:ctrlp_use_caching = 0$/;"	v
g:gitgutter_signs	topAerr-ninit.vim	/^        let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	topAerr-ninit.vim	/^        let g:gitgutter_max_signs = 2000$/;"	v
]c	topAerr-ninit.vim	/^        nmap ]c <Plug>GitGutterNextHunk$/;"	m
[c	topAerr-ninit.vim	/^        nmap [c <Plug>GitGutterPrevHunk$/;"	m
$h	topAerr-ninit.vim	/^        cno $h e ~\/$/;"	m
$d	topAerr-ninit.vim	/^        cno $d e ~\/Desktop\/$/;"	m
$j	topAerr-ninit.vim	/^        cno $j e .\/$/;"	m
$c	topAerr-ninit.vim	/^        cno $c e <C-\\>eCurrentFileDir("e")<cr>$/;"	m
$q	topAerr-ninit.vim	/^        cno $q <C-\\>eDeleteTillSlash()<cr>$/;"	m
$1	topAerr-ninit.vim	/^        inoremap $1 ()<esc>i$/;"	m
$2	topAerr-ninit.vim	/^        inoremap $2 []<esc>i$/;"	m
$3	topAerr-ninit.vim	/^        inoremap $3 {}<esc>i$/;"	m
$4	topAerr-ninit.vim	/^        inoremap $4 {<esc>o}<esc>O$/;"	m
$q	topAerr-ninit.vim	/^        inoremap $q ''<esc>i$/;"	m
$e	topAerr-ninit.vim	/^        inoremap $e ""<esc>i$/;"	m
E	topAerr-ninit.vim	/^        command! -bang E e<bang>$/;"	c
Q	topAerr-ninit.vim	/^        command! -bang Q q<bang>$/;"	c
W	topAerr-ninit.vim	/^        command! -bang W w<bang>$/;"	c
QA	topAerr-ninit.vim	/^        command! -bang QA qa<bang>$/;"	c
Qa	topAerr-ninit.vim	/^        command! -bang Qa qa<bang>$/;"	c
Wa	topAerr-ninit.vim	/^        command! -bang Wa wa<bang>$/;"	c
WA	topAerr-ninit.vim	/^        command! -bang WA wa<bang>$/;"	c
Wq	topAerr-ninit.vim	/^        command! -bang Wq wq<bang>$/;"	c
WQ	topAerr-ninit.vim	/^        command! -bang WQ wq<bang>$/;"	c
U	topAerr-ninit.vim	/^        nnoremap U :syntax sync fromstart<cr>:redraw!<cr>$/;"	m
<m-right>	topAerr-ninit.vim	/^        nnoremap <m-right> :vertical resize +3<cr>$/;"	m
<m-left>	topAerr-ninit.vim	/^        nnoremap <m-left> :vertical resize -3<cr>$/;"	m
<m-up>	topAerr-ninit.vim	/^        nnoremap <m-up> :resize +3<cr>$/;"	m
<m-down>	topAerr-ninit.vim	/^        nnoremap <m-down> :resize -3<cr>$/;"	m
JumpTo	topAerr-ninit.vim	/^                function! JumpTo(jumpcommand)$/;"	f
JumpToInSplit	topAerr-ninit.vim	/^                function! JumpToInSplit(jumpcommand)$/;"	f
JumpToTag	topAerr-ninit.vim	/^                function! JumpToTag()$/;"	f
JumpToTagInSplit	topAerr-ninit.vim	/^                function! JumpToTagInSplit()$/;"	f
<C-]>	topAerr-ninit.vim	/^                nnoremap <C-]> :silent! call JumpToTag()<cr>$/;"	m
<C-s>	topAerr-ninit.vim	/^                nnoremap <C-s> :silent! call JumpToTagInSplit()<cr>$/;"	m
PreviewTag3	topAerr-ninit.vim	/^                function PreviewTag3(top)$/;"	f
g:bookmark_auto_close	topAerr-ninit.vim	/^        let g:bookmark_auto_close = 1$/;"	v
g:bookmark_highlight_lines	topAerr-ninit.vim	/^        let g:bookmark_highlight_lines = 1          $/;"	v
g:bookmark_show_warning	topAerr-ninit.vim	/^        let g:bookmark_show_warning = 0           $/;"	v
g:bookmark_show_toggle_warning	topAerr-ninit.vim	/^        let g:bookmark_show_toggle_warning = 0      $/;"	v
g:bookmark_sign	topAerr-ninit.vim	/^        let g:bookmark_sign = '♥'$/;"	v
g:bookmark_highlight_lines	topAerr-ninit.vim	/^        let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_save_per_working_dir	topAerr-ninit.vim	/^        let g:bookmark_save_per_working_dir = 1$/;"	v
g:bookmark_auto_save	topAerr-ninit.vim	/^        let g:bookmark_auto_save = 1$/;"	v
<Leader>m	topAerr-ninit.vim	/^        nmap <Leader>m <Plug>BookmarkShowAll$/;"	m
g:bookmark_no_default_key_mappings	topAerr-ninit.vim	/^        let g:bookmark_no_default_key_mappings = 1$/;"	v
BookmarkMapKeys	topAerr-ninit.vim	/^        function! BookmarkMapKeys()$/;"	f
BookmarkUnmapKeys	topAerr-ninit.vim	/^        function! BookmarkUnmapKeys()$/;"	f
ErrorsToggle	topAerr-ninit.vim	/^        command! ErrorsToggle call ErrorsToggle()$/;"	c
ErrorsToggle	topAerr-ninit.vim	/^        function! ErrorsToggle() $/;"	f
LocationToggle	topAerr-ninit.vim	/^        command! LocationToggle call LocationToggle()$/;"	c
LocationToggle	topAerr-ninit.vim	/^        function! LocationToggle()$/;"	f
QFixToggle	topAerr-ninit.vim	/^        command! -bang -nargs=? QFixToggle call QFixToggle(<bang>0)$/;"	c
QFixToggle	topAerr-ninit.vim	/^        function! QFixToggle(forced)$/;"	f
<F7>	topAerr-ninit.vim	/^        map          <F7>       :FirstOrNextInList<CR>$/;"	m
<F7>	topAerr-ninit.vim	/^        imap         <F7>       <C-O><F7>$/;"	m
<S-F7>	topAerr-ninit.vim	/^        map          <S-F7>      :PrevInList<CR>$/;"	m
<S-F7>	topAerr-ninit.vim	/^        imap         <S-F7>      <C-O><S-F7>$/;"	m
<C-F7>	topAerr-ninit.vim	/^        map          <C-F7>      :CurInList<CR>$/;"	m
<C-F7>	topAerr-ninit.vim	/^        imap         <C-F7>      <C-O><C-F7>$/;"	m
<F9>	topAerr-ninit.vim	/^        nmap <silent> <F9> :QFixToggle<cr>$/;"	m
<S-F9>	topAerr-ninit.vim	/^        map         <S-F9>     :copen<CR>$/;"	m
<S-F9>	topAerr-ninit.vim	/^        imap        <S-F9>     <C-O><C-F9>$/;"	m
<C-F9>	topAerr-ninit.vim	/^        map         <C-F9>     :cclose<CR>$/;"	m
<C-F9>	topAerr-ninit.vim	/^        imap        <C-F9>     <C-O><C-F9>$/;"	m
<LocalLeader>b	topAerr-ninit.vim	/^        nnoremap <LocalLeader>b :cprev<cr>zvzz$/;"	m
<LocalLeader>n	topAerr-ninit.vim	/^        nnoremap <LocalLeader>n :cnext<cr>zvzz$/;"	m
<f8>	topAerr-ninit.vim	/^        nmap <silent> <f8> :LocationToggle<cr>$/;"	m
<S-F8>	topAerr-ninit.vim	/^        map         <S-F8>     :lopen<CR>$/;"	m
<S-F8>	topAerr-ninit.vim	/^        imap        <S-F8>     <C-O><C-F8>$/;"	m
<C-F8>	topAerr-ninit.vim	/^        map         <C-F8>     :lclose<CR>$/;"	m
<C-F8>	topAerr-ninit.vim	/^        imap        <C-F8>     <C-O><S-F8>$/;"	m
<Leader>n	topAerr-ninit.vim	/^        nnoremap <Leader>n :lnext<cr>zvzz$/;"	m
<Leader>b	topAerr-ninit.vim	/^        nnoremap <Leader>b :lprev<cr>zvzz$/;"	m
<LocalLeader>w	topAerr-ninit.vim	/^        nnoremap <LocalLeader>w :%s#\\<<C-r>=expand("<cword>")<CR>\\>#$/;"	m
<LocalLeader>z	topAerr-ninit.vim	/^        nnoremap <LocalLeader>z :%s#\\<<C-r>=getline(".")<CR>\\>#$/;"	m
<Esc><Esc>	topAerr-ninit.vim	/^        nnoremap <silent> <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>$/;"	m
n	topAerr-ninit.vim	/^        nmap <silent> n nzz$/;"	m
N	topAerr-ninit.vim	/^        nmap <silent> N Nzz$/;"	m
g*	topAerr-ninit.vim	/^        nmap <silent> g* g*zz$/;"	m
g#	topAerr-ninit.vim	/^        nmap <silent> g# g#zz$/;"	m
*	topAerr-ninit.vim	/^        vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
#	topAerr-ninit.vim	/^        vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
<Leader>l	topAerr-ninit.vim	/^        nnoremap <Leader>l :lgrep -R <cword> .<cr>$/;"	m
<Leader>g	topAerr-ninit.vim	/^        nnoremap <Leader>g :execute "vimgrep \/" . expand("<cword>") . "\/j **" <Bar> cw<CR>$/;"	m
<Leader>a	topAerr-ninit.vim	/^        nnoremap <Leader>a :Ack <cword> .<cr>$/;"	m
Find	topAerr-ninit.vim	/^        function! Find(name)$/;"	f
Find	topAerr-ninit.vim	/^        command! -nargs=1 Find :call Find("<args>")$/;"	c
GoToOpenFold	topAerr-ninit.vim	/^        function! GoToOpenFold(direction)$/;"	f
]z	topAerr-ninit.vim	/^        nmap ]z :cal GoToOpenFold("next")$/;"	m
[z	topAerr-ninit.vim	/^        nmap [z :cal GoToOpenFold("prev")$/;"	m
<m-b>	topAerr-ninit.vim	/^        map <m-b> ggVG$/;"	m
<m-;>	topAerr-ninit.vim	/^        nnoremap <m-;> :ls\\|sleep<enter><enter>$/;"	m
<M-1>	topAerr-ninit.vim	/^        map <M-1> :confirm :b1 <CR>$/;"	m
<M-2>	topAerr-ninit.vim	/^        map <M-2> :confirm :b2 <CR>$/;"	m
<M-3>	topAerr-ninit.vim	/^        map <M-3> :confirm :b3 <CR>$/;"	m
<M-4>	topAerr-ninit.vim	/^        map <M-4> :confirm :b4 <CR>$/;"	m
<M-5>	topAerr-ninit.vim	/^        map <M-5> :confirm :b5 <CR>$/;"	m
<F3>	topAerr-ninit.vim	/^        noremap  <F3> :NERDTreeToggle<cr>$/;"	m
<F3>	topAerr-ninit.vim	/^        inoremap <F3> <esc>:NERDTreeToggle<cr>$/;"	m
ps_nerdtree	topAerr-ninit.vim	/^        augroup ps_nerdtree$/;"	a
NERDTreeHighlightCursorline	topAerr-ninit.vim	/^        let NERDTreeHighlightCursorline = 1$/;"	v
NERDTreeIgnore	topAerr-ninit.vim	/^        let NERDTreeIgnore = ['\\~$', '.*\\.pyc$', 'pip-log\\.txt$', 'whoosh_index',$/;"	v
NERDTreeMinimalUI	topAerr-ninit.vim	/^        let NERDTreeMinimalUI = 1$/;"	v
NERDTreeDirArrows	topAerr-ninit.vim	/^        let NERDTreeDirArrows = 1$/;"	v
NERDChristmasTree	topAerr-ninit.vim	/^        let NERDChristmasTree = 1$/;"	v
NERDTreeChDirMode	topAerr-ninit.vim	/^        let NERDTreeChDirMode = 2$/;"	v
NERDTreeMapJumpFirstChild	topAerr-ninit.vim	/^        let NERDTreeMapJumpFirstChild = 'gK'$/;"	v
ft_fugitive	topAerr-ninit.vim	/^        augroup ft_fugitive$/;"	a
<leader>gd	topAerr-ninit.vim	/^                nnoremap <leader>gd :Gdiff<cr>$/;"	m
<leader>gs	topAerr-ninit.vim	/^                nnoremap <leader>gs :Gstatus<cr>$/;"	m
<leader>gw	topAerr-ninit.vim	/^                nnoremap <leader>gw :Gwrite<cr>$/;"	m
<leader>ga	topAerr-ninit.vim	/^                nnoremap <leader>ga :Gadd<cr>$/;"	m
<leader>gb	topAerr-ninit.vim	/^                nnoremap <leader>gb :Gblame<cr>$/;"	m
<leader>gco	topAerr-ninit.vim	/^                nnoremap <leader>gco :Gcheckout<cr>$/;"	m
<leader>gci	topAerr-ninit.vim	/^                nnoremap <leader>gci :Gcommit<cr>$/;"	m
<leader>gm	topAerr-ninit.vim	/^                nnoremap <leader>gm :Gmove<cr>$/;"	m
<leader>gr	topAerr-ninit.vim	/^                nnoremap <leader>gr :Gremove<cr>$/;"	m
<leader>gl	topAerr-ninit.vim	/^                nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \\|<cr>$/;"	m
DiffFoldLevel	topAerr-ninit.vim	/^         function! DiffFoldLevel()$/;"	f
ft_diff	topAerr-ninit.vim	/^         augroup ft_diff$/;"	a
DiffOrig	topAerr-ninit.vim	/^                command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis \\ | wincmd p | diffthis$/;"	c
dg	topAerr-ninit.vim	/^                vmap            dg             :diffget<CR>$/;"	m
dp	topAerr-ninit.vim	/^                vmap            dp             :diffput<CR>$/;"	m
<leader>d	topAerr-ninit.vim	/^                nnoremap <silent> <expr> <leader>d ":\\<C-u>".(&diff?"diffoff":"diffthis")."\\<CR>"$/;"	m
do	topAerr-ninit.vim	/^                nnoremap do :diffoff!<cr>$/;"	m
Diffoff	topAerr-ninit.vim	/^                command! Diffoff        diffoff | setlocal nowrap$/;"	c
<C-F10>	topAerr-ninit.vim	/^        noremap <C-F10> :SyntasticCheck<CR>$/;"	m
g:syntastic_always_populate_loc_list	topAerr-ninit.vim	/^        let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	topAerr-ninit.vim	/^        let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	topAerr-ninit.vim	/^        let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	topAerr-ninit.vim	/^        let g:syntastic_check_on_wq = 0$/;"	v
g:systastic_python_checkers	topAerr-ninit.vim	/^        let g:systastic_python_checkers = ['pylint', 'python']$/;"	v
g:syntastic_mode_map	topAerr-ninit.vim	/^        let g:syntastic_mode_map = {'mode': 'active'}$/;"	v
g:syntastic_python_pylint_quiet_messages	topAerr-ninit.vim	/^        let g:syntastic_python_pylint_quiet_messages = {}$/;"	v
g:syntastic_enable_signs	topAerr-ninit.vim	/^        let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_auto_jump	topAerr-ninit.vim	/^        let g:syntastic_auto_jump = 1$/;"	v
g:syntastic_enable_highlighting	topAerr-ninit.vim	/^        let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_echo_current_error	topAerr-ninit.vim	/^        let g:syntastic_echo_current_error  = 1$/;"	v
g:syntastic_javascript_checkers	topAerr-ninit.vim	/^        let g:syntastic_javascript_checkers=['jshint']$/;"	v
g:syntastic_php_checkers	topAerr-ninit.vim	/^        let g:syntastic_php_checkers=['php']$/;"	v
g:syntastic_css_checkers	topAerr-ninit.vim	/^        let g:syntastic_css_checkers=['csslint']$/;"	v
g:syntastic_check_on_w	topAerr-ninit.vim	/^        let g:syntastic_check_on_w = 1$/;"	v
wordUnderCursor	topAerr-ninit.vim	/^        let wordUnderCursor = expand("<cword>")$/;"	v
currentLine	topAerr-ninit.vim	/^        let currentLine   = getline(".")$/;"	v
OnlineDoc8	topAerr-ninit.vim	/^        function! OnlineDoc8()$/;"	f
<F10>	topAerr-ninit.vim	/^        map <F10> :call OnlineDoc8()<CR>$/;"	m
OpenUrlUnderCursor	topAerr-ninit.vim	/^        function! OpenUrlUnderCursor()$/;"	f
<leader>o	topAerr-ninit.vim	/^        nmap <leader>o :call OpenUrlUnderCursor()<CR>$/;"	m
w:persistent_cursorline	topAerr-ninit.vim	/^        let w:persistent_cursorline = 1$/;"	v
g:indentLine_color_term	topAerr-ninit.vim	/^        let g:indentLine_color_term = 133$/;"	v
g:airline_theme	topAerr-ninit.vim	/^        let g:airline_theme='powerlineish'$/;"	v
g:ctags_statusline	topAerr-ninit.vim	/^        let g:ctags_statusline=1$/;"	v
generate_tags	topAerr-ninit.vim	/^        let generate_tags=1$/;"	v
g:airline#extensions#tabline#enabled	topAerr-ninit.vim	/^        let g:airline#extensions#tabline#enabled = 2$/;"	v
g:airline#extensions#tabline#fnamemod	topAerr-ninit.vim	/^        let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#buffer_min_count	topAerr-ninit.vim	/^        let g:airline#extensions#tabline#buffer_min_count = 1$/;"	v
g:airline_section_c	topAerr-ninit.vim	/^        let g:airline_section_c = '%{strftime("%D - %H:%M")}'$/;"	v
g:airline_theme	topAerr-ninit.vim	/^        let g:airline_theme='light'$/;"	v
g:airline_powerline_fonts	topAerr-ninit.vim	/^        let g:airline_powerline_fonts=1$/;"	v
g:airline#extensions#branch#enabled	topAerr-ninit.vim	/^        let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#whitespace#enabled	topAerr-ninit.vim	/^        let g:airline#extensions#whitespace#enabled = 1$/;"	v
g:airline#extensions#hunks#non_zero_only	topAerr-ninit.vim	/^        let g:airline#extensions#hunks#non_zero_only = 1$/;"	v
<C-J>	topAerr-ninit.vim	/^        map <C-J> <C-W>j<C-W>_$/;"	m
<C-K>	topAerr-ninit.vim	/^        map <C-K> <C-W>k<C-W>_$/;"	m
<C-H>	topAerr-ninit.vim	/^        map <C-H> <C-W>h<C-W>|$/;"	m
<C-L>	topAerr-ninit.vim	/^        map <C-L> <C-W>l<C-W>|$/;"	m
<C-=>	topAerr-ninit.vim	/^        map <C-=> <C-W>=$/;"	m
<S-j>	topAerr-ninit.vim	/^        nnoremap <S-j> :bn<cr>$/;"	m
<S-k>	topAerr-ninit.vim	/^        nnoremap <S-k> :bp<cr>$/;"	m
<m-j>	topAerr-ninit.vim	/^        nnoremap <m-j> :bn<cr>$/;"	m
<m-k>	topAerr-ninit.vim	/^        nnoremap <m-k> :bp<cr>$/;"	m
<C-up>	topAerr-ninit.vim	/^        noremap <expr> <C-up> (line('w0') <= 1         ? 'k' : "\\<C-y>")$/;"	m
<C-down>	topAerr-ninit.vim	/^        noremap <expr> <C-down> (line('w$') >= line('$') ? 'j' : "\\<C-e>")$/;"	m
gv	topAerr-ninit.vim	/^        nnoremap gv `[v`]$/;"	m
zh	topAerr-ninit.vim	/^        nnoremap zh mzzt10<c-u>`z$/;"	m
<C-_>	topAerr-ninit.vim	/^        inoremap <C-_> <space><bs><esc>:call InsertCloseTag()<cr>a$/;"	m
<F12>	topAerr-ninit.vim	/^        nnoremap <F12> :TagbarToggle<CR>$/;"	m
<F2>	topAerr-ninit.vim	/^        noremap! <buffer> <F2> <Esc>:help <C-r><C-w><CR>$/;"	m
<C-F12>	topAerr-ninit.vim	/^        map <C-F12> :Scratch<CR>$/;"	m
<S-F12>	topAerr-ninit.vim	/^        map <S-F12> :ScratchPreview<CR>$/;"	m
g:SuperTabDefaultCompletionType	topAerr-ninit.vim	/^        let g:SuperTabDefaultCompletionType = "<c-n>"$/;"	v
g:SuperTabLongestHighlight	topAerr-ninit.vim	/^        let g:SuperTabLongestHighlight = 1$/;"	v
g:SuperTabCrMapping	topAerr-ninit.vim	/^        let g:SuperTabCrMapping = 1$/;"	v
<S-F11>	topAerr-ninit.vim	/^        map             <S-F11>         :ShowHighlightGroup<CR>$/;"	m
<C-F11>	topAerr-ninit.vim	/^        map             <C-F11>         :ShowSyntaxStack<CR>$/;"	m
str	usr_43VimL.vim	/^let str = "usr43 string theory."$/;"	v
